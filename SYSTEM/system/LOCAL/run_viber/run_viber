#!/usr/bin/zsh
RESET="\033[m" RED_FG="\033[31m" GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"

#Declarations
WIN_CHANGE=false
CHROME_WAS_RUNNING=false

#Constants
LIB=/usr/local/lib
MSG=~/Code/notification
MSG_TITLE="OBNOXIOUS VIBER ACTIVITY MITIGATION..."

#Imports
source ${LIB}/common.zsh

#Functions
convert_win_id_to_hex () {
	local HEX_ID

	HEX_ID=$(printf '%x\n' ${1})
	[[ -n ${HEX_ID} ]] && echo ${HEX_ID} || echo ''
}

scan_win_list_hex_id () {
	local HEX_ID=${1}
	local LIST
	local MATCH

	LIST=$(xwininfo -root -children)
	MATCH=$(grep ${HEX_ID} <<<${LIST})
	[[ -n ${MATCH} ]] && echo ${MATCH} || echo ''
}

scan_win_list_title () {
	local TITLE=${1}
	local LIST
	local MATCH

	LIST=$(xwininfo -root -children)
	MATCH=$(grep -i ${TITLE} <<<${LIST})
	[[ -n ${MATCH} ]] && echo ${MATCH} || echo ''
}

parse_win_list_hex_id () {
	local LINE=${1}
	local ID=$(echo ${LINE} | cut -d: -f1 | str_trim | cut -d' ' -f1)
	[[ -n ${ID} ]] && echo ${ID} || echo ''
}

parse_win_list_title_by_hex_id () {
	local HEX_ID=${1}
	local LIST
	local MATCH

	LIST=$(xwininfo -root -children)
	MATCH=$(grep -i ${HEX_ID} <<<${LIST})
	if [[ -n ${MATCH} ]];then
		echo ${MATCH:Q} | str_trim | cut -d: -f1 | cut -d' ' -f2- 
	else
		echo ''
	fi
}

get_current_win_id () {
	local CUR_WDW_ID=$(xdotool getwindowfocus)

	[[ -n ${CUR_WDW_ID} ]] && echo ${CUR_WDW_ID} || echo ''
}

get_current_win_title () {
	local WIN_ID
	local HEX_ID
	local TITLE

	WIN_ID=$(get_current_win_id)
	[[ -z ${WIN_ID} ]] && return 1
	
	HEX_ID=$(convert_win_id_to_hex ${WIN_ID})
	[[ -z ${HEX_ID} ]] && return 1

	TITLE=$(scan_win_list_hex_id ${HEX_ID})
	[[ -z ${TITLE} ]] && return 1

	TITLE=$(cut -d: -f1 <<<${TITLE} | str_trim | cut -d' ' -f2-)

	[[ -n ${TITLE} ]] && echo ${TITLE:Q} || return 1
}

get_win_id () {
	local WDW_NAME=${1}
	local -a WDW_ID
	local NDX=0
	local RETRIES=2

	while true;do
		WDW_ID=($(xdotool search --onlyvisible "${WDW_NAME}" 2>/dev/null)) #fuzzy search:class, classname, win title

		((NDX++))
		if [[ -n ${WDW_ID} ]];then
			$MSG 3 ${MSG_TITLE} "Getting ID for WINDOW:${WDW_ID} -> ${WDW_NAME}" 
			break
		else
			$MSG 3 ${MSG_TITLE} "Unable to detect ID for:${WDW_ID} -> ${WDW_NAME}" 
		fi
		sleep .1
		[[ ${NDX} -eq ${RETRIES} ]] && echo '' && return 1
	done
	echo ${WDW_ID[1]} #if > 1 return only first
}

start_viber () {
	local RC
	local VIBER

	VIBER=$(pgrep -of /opt/viber/Viber)
	[[ -n ${VIBER} ]] && $MSG 3 ${MSG_TITLE} "Viber is already running...restarting" && sudo kill -9 ${VIBER} && return 0

	exec env QT_SCALE_FACTOR=1.5 /opt/viber/Viber >/dev/null 2>&1 &
	sleep 3

	#wait for viber
	RC=1
	while true;do
		VIBER=$(pgrep -of /opt/viber/Viber)
		[[ -z ${VIBER} ]] && sleep 1 && continue
		RC=0
		break
	done
	return ${RC}
}

#Execution

$MSG 2 ${MSG_TITLE} "Starting"

#is chrome running
CHROME_PID=$(pgrep -of /opt/google/chrome/chrome 2>/dev/null)
if [[ -n ${CHROME_PID} ]];then
	CHROME_WAS_RUNNING=true
	$MSG 3 ${MSG_TITLE} "Viber will navigate to Chrome...wait"
else
	$MSG 3 ${MSG_TITLE} "Viber will start Chrome...wait"
fi

start_viber

LAST_WIN_ID=0

while true;do
	CUR_WDW_ID=$(get_current_win_id)
	CUR_WDW_TITLE=$(get_current_win_title)

	if [[ $? -ne 0 ]];then #could be known wrong id trouble maker:Viber, try by title
		LINE=$(scan_win_list_title "ViberPC")
		VIB_ID=$(parse_win_list_hex_id ${LINE})
		if [[ -n ${VIB_ID} ]];then
			CUR_WDW_TITLE=$(parse_win_list_title_by_hex_id ${VIB_ID})
		fi
	fi

	WIN_CHANGE=false
	if [[ ${LAST_WIN_ID} -ne ${CUR_WDW_ID} ]];then
		[[ ${LAST_WIN_ID} -ne 0 ]] && WIN_CHANGE=true
		LAST_WIN_ID=${CUR_WDW_ID}
	fi

	if [[ ${WIN_CHANGE} == 'true' ]];then
		if [[ ${CHROME_WAS_RUNNING} == 'true' ]];then #kill tab opened by viber
			wmctrl -a 'chrome'
			xdotool key ctrl+w
		fi
		$MSG 3 ${MSG_TITLE} "Returning to Viber!"
		wmctrl -a "Viber +" #plus sign disambiguates from the tab in chrome with the name 'viber' if chrome was open
		break
	fi

	sleep .2
done

if [[ ${CHROME_WAS_RUNNING} == 'false' ]];then
	$MSG 3 ${MSG_TITLE} "Killing Chrome instance started by Viber"
	CHROME_PID=$(pgrep -of /opt/google/chrome/chrome 2>/dev/null)
	[[ -z ${CHROME_PID} ]] && exit
	sudo killall chrome
fi

$MSG 3 ${MSG_TITLE} "Done. That was a total fucking pain in the ass..."
