#!/usr/bin/zsh
#Ansi colors
REVERSE="\033[7m"
RESET="\033[m"
BOLD="\033[1m"
BLACK_FG="\033[30m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
STRIKE="\033[9m"
ITALIC="\033[3m"
UNDER="\033[4m"

#Echoed ansi colors
E_REVERSE=$(echo "\033[7m")
E_RESET=$(echo "\033[m")
E_BOLD=$(echo "\033[1m")
E_BLACK_FG=$(echo "\033[30m")
E_RED_FG=$(echo "\033[31m")
E_GREEN_FG=$(echo "\033[32m")
E_YELLOW_FG=$(echo "\033[33m")
E_BLUE_FG=$(echo "\033[34m")
E_MAGENTA_FG=$(echo "\033[35m")
E_CYAN_FG=$(echo "\033[36m")
E_WHITE_FG=$(echo "\033[37m")
E_STRIKE=$(echo "\033[9m")

#Declarations
typeset -a RAWLIST
typeset -a MARKED=()
typeset -a LIST=()
typeset -A _FILE_APP
typeset -A _FILE_NDX

#Globals

#Constants
EBOOK="/usr/bin/python2.7 /usr/bin/ebook-viewer"
OKULAR=/usr/bin/okular
LIB=/usr/local/lib
MDLESS=/usr/local/bin/mdless
MUSE="/usr/local/bin/system/launchers/run_musescore"
OFFICE=/usr/local/bin/office
IMAGE=eog
TEXT=vim
VLC="/usr/bin/vlc --no-qt-error-dialogs --verbose 0"
VIM=/usr/bin/vim

#Imports
source ${LIB}/common.zsh

#Functions
action_do () {
	local -a MARKED=(${@})
	local M
	local APP
	local KEY
	local ARGS
	local ERRFILE=/tmp/app_errors

	if same_type ${MARKED};then
		KEY=${(k)_FILE_NDX[(r)${MARKED[1]}]}
		APP=${_FILE_APP[${KEY}]}
		ARGS=$(echo "${APP} $(list_quote_marked_elements ${MARKED}) 2>${ERRFILE}")
		eval "${ARGS}" &
		[[ ${?} -ne 0 ]] && msg_box -p "<B><I>${0}: ${APP} returned an error<N>| |$(<${ERRFILE})| |Press any key..."
	else
		for M in ${MARKED};do
			KEY=${(k)_FILE_NDX[(r)${M}]}
			APP=${_FILE_APP[${KEY}]}
			ARGS=$(echo "${APP} $(list_quote_marked_elements ${M}) 2>${ERRFILE}")
			eval "${ARGS}" &
			[[ ${?} -ne 0 ]] && msg_box -p "<B><I>${0}: ${APP} returned an error<N>| |$(<${ERRFILE})| |Press any key..."
		done
	fi

	for M in ${MARKED};do
		[[ ${M} -eq 0 ]] && continue
		MARKED[${M}]=0
		list_set_selected ${M} ${_GHOST_ROW}
	done
}

action_warn () {
	local MARKED=(${@})
	local CNT=$(list_get_selected_count ${MARKED})
	local M
	
	msg_box -p "<I>Please respond<N>|==============| |${CNT} $(str_pluralize item $CNT) queued for opening.| |<B>Open? (y/n)<N>"
	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${MARKED};do
			list_clear_selected ${M}
		done
	fi
}

create_list () {
	local FLIST=(${@})
	local F
	local APP
	local NDX=0
}

get_app () {
	local FN=${1}
	local EXT=${FN:e:l}
	local APP

	case ${EXT} in
		avi) APP=${VLC};;
		doc) APP=${OFFICE};;
		odg) APP=${OFFICE};;
		epub) APP=${EBOOK};;
		gif) APP=${IMAGE};;
		html) APP=${TEXT};;
		jpeg) APP=${IMAGE};;
		jpg) APP=${IMAGE};;
		log) APP=${VIM};;
		markdown) APP=${MDLESS};;
		md) APP=${MDLESS};;
		mkv) APP=${VLC};;
		mp3) APP=${VLC};;
		m4a) APP=${VLC};;
		mp4) APP=${VLC};;
		mscz) APP=${MUSE};;
		ods) APP=${OFFICE};;
		odt) APP=${OFFICE};;
		pdf) APP=${OKULAR};;
		png) APP=${IMAGE};;
		rtf) APP=${OFFICE};;
		svg) APP=${IMAGE};;
		xls) APP=${OFFICE};;
		txt) APP=${VIM};;
		wav) APP=${VLC};;
		flac) APP=${VLC};;
		*) APP=?;;
	esac
	
	if [[ ${APP} == '?' ]];then
		[[ -n ${FN} && $(file ${FN}) =~ "text" ]] && APP=${VIM}
	fi

	echo ${APP}
}

item_decorate () {
	local NDX=$1

	case ${_LIST_SELECTED[${NDX}]} in
		2) echo -n "${E_STRIKE}${E_RED_FG}${LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}viewed${E_RESET}";;
		3) echo -n "${E_STRIKE}${E_RED_FG}${LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}unsupported${E_RESET}";;
		*)	tput el;echo -n ${LIST[${NDX}]:t};;
	esac
}

mark_unsupported () {
	local NDX=$1
	local SUPPORTED

	SUPPORTED=$(get_app ${LIST[${NDX}]})
	[[ ${SUPPORTED} == '?' ]] && _LIST_SELECTED[${NDX}]=3
}

same_extension () {
	local MARKED=(${@})
	local SAME_EXT=true
	local LAST_EXT=?
	local M

	for M in ${MARKED};do
		[[ ! -f ${LIST[${M}]} ]] && continue
		[[ ${LAST_EXT} == "?" ]] && LAST_EXT=${LIST[${M}]:e}
		[[ ${LAST_EXT} != ${LIST[${M}]:e} ]] && SAME_EXT=false
	done

	[[ ${SAME_EXT} == 'true' ]] && return 0 || return 1
}

same_type () {
	local MARKED=(${@})
	local SAME_TYPE=true
	local LAST_TYPE=?
	local TYPE
	local M

	[[ ${#MARKED} -eq 1 ]] && return 0

	for M in ${MARKED};do
		[[ ! -f ${LIST[${M}]} ]] && continue
		[[ -n ${FN} ]] && TYPE=$(file -b ${LIST[${M}]} | cut -d: -f1 | grep -io 'ascii text')
		[[ -n ${TYPE} ]] && ( TYPE=${TYPE} || TYPE=$(file -b ${LIST[${M}]} | cut -d, -f1) )
		[[ ${LAST_TYPE} == "?" ]] && LAST_TYPE=${TYPE}
		[[ ${LAST_TYPE} != ${TYPE} ]] && SAME_TYPE=false
	done

	[[ ${SAME_TYPE} == 'true' ]] && return 0 || return 1
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Open selected file with associated application
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-a${RESET} show unsupported files"
	echo -e "${WHITE_FG}-n${RESET} no auto open (single file argument)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"

	exit_leave $(msg_err "${PENDING_MSGS}")
}

OPTSTR=":HDan"
OPTIND=0

FILTER_UNSUPPORTED=true
FILTER="Supported Only"
AUTO_OPEN=true

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     a) FILTER_UNSUPPORTED=false;FILTER="All Files";;
     n) AUTO_OPEN=false;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

#--Execution
#[[ ${_DEBUG} -eq 0 ]] && do_smcup

#File(s) passed on command line or pipe
typeset -a ARGS

if [[ ! -t 0 ]];then
	while read -A LINE;do
		ARGS=(${LINE})
	done
else
	ARGS=(${@})
fi

if [[ ${#ARGS} -eq 1 && ${AUTO_OPEN} == 'true' ]];then # a single file will be processed immediately
	set -xv
	[[ -e ${ARGS} ]] && FN=${ARGS} || exit_leave $(msg_err "File not found:${ARGS}")
	APP=$(get_app ${FN})
	[[ ${APP} == '?' ]] && exit_leave "${RED_FG}No application${RESET} to handle file:${WHITE_FG}${FN}${RESET} of type: [$(file -b ${FN})]"
	_LIST+=$(realpath ${FN}) #add full path
	_FILE_APP[${F}]=${APP}
	_FILE_NDX[${F}]=1
	action_do 1
	set +xv;read
	exit_leave
elif [[ ${#ARGS} -ge 1 ]];then # files will appear in a selection list
	RAWLIST=(${ARGS})
else
	RAWPATH=$(path_get_raw)
	FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
	FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
	PATHLBL=$(path_get_label 40)
	RAWLIST=("${(f)$(eval "find ${FPATH} -maxdepth 1 ${FGLOB} -type f ! -path .")}") #double quote surrounding command
fi

NDX=0
for F in ${RAWLIST};do
	((NDX++))
	FN=$(realpath ${F}) #add full path
	[[ ! -e ${FN} ]] && exit_leave $(msg_err "File not found:${FN}")
	RAWLIST[${NDX}]=${FN}
done

NDX=0
typeset -a SKIPPED_FILES
for F in ${(o)RAWLIST};do
	[[ -d ${F} ]] && SKIPPED_FILES+="Skipping directory:${F}" && continue #skip any directories
	APP=$(get_app ${F})
	[[ ${APP} == '?' && ${FILTER_UNSUPPORTED} == 'true' ]] && SKIPPED_FILES+="Skipping unsupported:${F}" && continue #skip any unsupported
	((NDX++))
	LIST+=${F}
	mark_unsupported ${NDX}
	_FILE_APP[${F}]=${APP}
	_FILE_NDX[${F}]=${NDX}
done

if arr_is_populated ${SKIPPED_FILES};then
	msg_box -p -PK "<I><w>Skipped files<N>|$(str_unicode_line 14)|$(msg_list ${(o)SKIPPED_FILES})"
fi

if [[ -z ${LIST} ]];then
	for F in ${(on)RAWLIST};do
		echo "${RED_FG}No application${RESET} to handle file:${WHITE_FG}${F}${RESET} of type: [$(file -b ${F})]"
	done
	exit_leave
fi

#set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize file ${#LIST})  Path:${WHITE_FG}%-*s${RESET}  Filter:${WHITE_FG}%s${RESET}  Selected:${WHITE_FG}%*d${RESET}  ${_PG}" ${#LIST} ${#PATHLBL} "${PATHLBL}" "${FILTER}" ${#${#SELECTED_COUNT}} ${SELECTED_COUNT}'
list_add_header_break
list_set_header_break_offset 0

#set line item
list_set_line_item ' 
printf "${BOLD}${GREEN_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${ARRAY_NDX} "$(item_decorate ${ARRAY_NDX})" 
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select file(s) then <${GREEN_FG}ENTER${RESET}> to open (${ITALIC}or exit if none selected${RESET})."
list_set_action_msgs open file
list_set_clear_ghosts true
list_set_client_warn true

while true;do
	#get selection
	list_select ${LIST}
	[[ ${?} -eq 0 ]] && break

	#get selections
	MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -gt 1 || ${#LIST} -eq 1 ]];then
		action_warn ${MARKED} #warn if more than 1 selected
	fi

	if [[ ${_MSG_KEY} == "y" || $(list_get_selected_count) -eq 1 ]];then
		action_do ${MARKED}
	fi
done

exit_leave
