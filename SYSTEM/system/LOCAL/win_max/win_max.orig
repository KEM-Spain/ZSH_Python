#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

_SCRIPT=${0:t}
_LOG=/tmp/${_SCRIPT}.log
[[ -e ${_LOG} ]] && rm -f ${_LOG}

log_it () {
	local MSG=${@}
	echo "$(date +"%D-%T") ${MSG}" >> ${_LOG}
}

INSTANCES=$(pgrep -ci win_max)
[[ ${INSTANCES} -gt 1 ]] && log_it "win_max instance detected - exiting">>${_LOG} && exit 1

APP=${1}
[[ ${#} -eq 0 ]] && echo "${0}: Missing argument:<APP>">&2 && exit 1
log_it "${_SCRIPT}: Waiting for application:${APP}"

for X in {1..100};do
	PID=$(pgrep -ni ${APP:t})
	[[ -n ${PID} ]] && break
	sleep .1
done

if [[ -n ${PID} ]];then
	log_it "${_SCRIPT}: Application:${APP} PID:${PID}"
else
	log_it "${_SCRIPT}: Application:${APP} is NOT running" && exit 1
fi

typeset -A SINGLE_WIN_APPS=(deluge 1 vlc 1 chrome 1 haruna 1 viber 1 pycharm 1)
typeset -a WIN_INFO

CYCLE=0
ID_CHANGE=0
ID_CNT=0
ITER=0
LAST_WID=?
MAX_CHANGES=4 # some apps open preliminary windows and id's change 
MAX_CYCLES=100 # max wmctrl requests
MAX_ITER=500
MAX_WMCTRL_CALLS=10
STABLE_ID=20 # iterations without a change of id should indicate a stable id
WMCTRL_CALL=0


while true;do
	((ITER++))
	[[ ${ITER} -ge ${MAX_ITER} ]] && log_it "Reached MAX_ITER" && break

	while true;do
		((WMCTRL_CALL++))
		[[ ${WMCTRL_CALL} -ge ${MAX_WMCTRL_CALLS} ]] && log_it "Unable to fetch window list (wmctrl) - exiting" && exit 1
		APP_WDWS=("${(f)$(wmctrl -plx 2>/dev/null | grep -i ${APP})}") # all app windows
		if [[ -z ${APP_WDWS} ]];then
			sleep 2
		else
			WMCTRL_CALL=0
			break
		fi
		log_it "WMCTRL_CALL:${WMCTRL_CALL} - Waiting for window list"
	done
	log_it "Pulled window list:APP_WDWS:${#APP_WDWS}"

	for W in ${APP_WDWS};do
		log_it "APP_WINDOW:${W}"
		CUR_WDW_ID=${WDW_ID}
		WDW_ID=$(echo ${W} | grep -i ${W} | tr -s '[:space:]' | cut -d' ' -f1) # app window id
		#TODO: alternating multiple id's for the same app - not a real solution
		#TODO: possibly use a assoc array to hold APP_WIN until it is STABLE
		#TODO: try to establish an app win that has already been maximized and ignore
		if [[ -n ${WDW_ID} && ${WDW_ID} != ${CUR_WDW_ID} ]];then 
			log_it "WDW_ID:${WDW_ID}"
			break
		fi
	done

	[[ -z ${WDW_ID} ]] && continue
	((CYCLE++))
	log_it "CYCLE:${CYCLE}"

	if [[ -n ${WDW_ID} && ${LAST_WID} != ${WDW_ID} ]];then
		LAST_WID=${WDW_ID}
		ID_CNT=0
		((ID_CHANGE++))
		log_it "ID_CHANGE:${ID_CHANGE}"
	else
		((ID_CNT++))
		log_it "ID_CNT:${ID_CNT}"
	fi

	CALL_MAXIMIZE=false
	if [[ (${SINGLE_WIN_APPS[${APP}]} -eq 1) ]];then
		log_it "SINGLE_WIN_APP"
		CALL_MAXIMIZE=true
	elif [[ (${ID_CHANGE} -ge ${MAX_CHANGES}) ]];then
		log_it "MAX CHANGES"
		CALL_MAXIMIZE=true
	elif [[ (${ID_CNT} -ge ${STABLE_ID}) ]];then
		log_it "STABLE"
		CALL_MAXIMIZE=true
	fi

	if [[ ${CALL_MAXIMIZE} == 'true' ]];then
		log_it "CALL_MAXIMIZE for WDW_ID:${WDW_ID} and EXIT"
		wmctrl -i -r ${WDW_ID} -b add,maximized_vert,maximized_horz >/dev/null 2>&1
		break
	fi
	[[ ${CYCLE} -ge ${MAX_CYCLES} ]] && log_it "${0}: Reached MAX_CYCLES - Window for:${APP} not found" && break
	sleep .1
done 

exit 0
