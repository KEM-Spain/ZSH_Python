#!/usr/bin/zsh
#vim: syntax off
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

#Constants
LIB=/usr/local/lib
EM=${BOLD}${ITALIC}
REMOTE_DIR=/usr/local/bin

#Imports
source ${LIB}/common.zsh

#Functions
do_copy () {
	local SOURCE_FN=${1}
	local DEST_FN=${2}
	local PROMPT=${3:=true}
	local RESPONSE
	local MSG OP

	[[ ${DEST_FN} =~ "\.bak$" ]] && OP="Backup" || OP="Copy"
	[[ -e ${DEST_FN} ]] && MSG="Overwriting ${EM}existing${RESET} ${OP:l}" || MSG="${OP} to"

	[[ ${PROMPT} == 'true' ]] && get_response "${MSG} ${WHITE_FG}${DEST_FN}${RESET}"

	if [[ ${?} -eq 0 || ${PROMPT} != 'true' ]];then
		cp ${SOURCE_FN} ${DEST_FN}
		echo "${OP} ${GREEN_FG}complete${RESET}"
		return 0
	else
		echo "${OP} cancelled"
		return 1
	fi
}

format_for_less () {
	local FN=${1}
	local HEAD
	local TAIL
	local CD
	local NO_EXT
	local FN_OUT
	local FNR

	#less doesn't display dots in filenames if passed
	#to the prompt so they have to be escaped
	
	HEAD=${FN:h}
	TAIL=${FN:t}

	[[ ${FN:h} == '.' ]] && CD=true || CD=false
	[[ -z ${FN:e} ]] && NO_EXT=true || NO_EXT=false

	[[ ${FN:r} =~ '\.' ]] && FNR=$(sed 's/\./\\./g' <<<${FN:r})

	[[ ${CD} == 'true' && ${NO_EXT} == 'true' ]] && FN_OUT="\./${FN}"
	[[ ${CD} == 'true' && ${NO_EXT} == 'false' ]] &&  FN_OUT="\./${FN:r}\.${FN:e}"
	[[ ${CD} == 'true' && ${NO_EXT} == 'false' && -n ${FNR} ]] && FN_OUT="\./${FNR}\.${FN:e}"
	[[ ${CD} == 'false' && ${NO_EXT} == 'true' ]] && FN_OUT="${HEAD}/${TAIL}"
	[[ ${CD} == 'false' && ${NO_EXT} == 'false' ]] && FN_OUT="${HEAD}/${TAIL:h}${TAIL:r}\.${TAIL:e}"

	echo ${FN_OUT}
}

get_response () {
	local MSG=${1}
	local RESPONSE

	echo -n "${MSG}${RESET}? (y/n)${RESET}:"

	read -sq RESPONSE;echo
	[[ ${RESPONSE} == 'y' ]] && return 0 || return 1
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}
parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	tabs 5
	local OPTS=$(parse_opts ${OPTSTR})
	echo -e "\n${WHITE_FG}Usage${RESET}: ${SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-c${RESET} copy ./$(opt_type f) to production"
	echo -e "${WHITE_FG}-d${RESET} show diff of ./$(opt_type f).bak and ./$(opt_type f)"
	echo -e "${WHITE_FG}-p${RESET} show diff of ./$(opt_type f) and production $(opt_type f)"
	echo -e "${WHITE_FG}-l${RESET} local ./$(opt_type f) has priority"
	echo -e "\n${WHITE_FG}DESC${RESET}:Copy a production $(opt_type f) and create $(opt_type f).bak.\n\tThe local option creates a ./$(opt_type f).bak from ./$(opt_type f)\n\tThe two diffs available are local source vs bak, and local source vs production"
	exit_leave
}

OPTSTR=":HDcdpl"
LOCAL_PRIORITY=false
SHOW_L_DIFF=false
SHOW_P_DIFF=false
PROD_COPY=false
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     c) PROD_COPY=true;;
     d) SHOW_L_DIFF=true;;
     p) SHOW_P_DIFF=true;;
     l) LOCAL_PRIORITY=true;;
     :) print -u2 "${SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${SCRIPT}: unknown option -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--

#Execution
FILE_ARG=${1}
[[ -z ${FILE_ARG} ]] && echo "${0:t}:${RED_FG}missing $(opt_type f)${RESET}" && usage

if [[ ${LOCAL_PRIORITY} == 'false' ]];then
	FN=$(file_finder ${FILE_ARG})
	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:file_finder returned: ${FN} for FILE_ARG:${FILE_ARG}"
	[[ ${?} -ne 0 ]] && exit_leave "${_THIS_FILE}: ${RED_FG}No file found${RESET}: ${FILE_ARG}"
else
	FN=$(file_finder -l ${FILE_ARG})
	[[ ${?} -ne 0 ]] && exit_leave "${_THIS_FILE}: ${RED_FG}No file found${RESET}: ${FILE_ARG}"
fi

REMOTE=${FN}
LOCAL=${PWD}/${FN:t}
BACKUP=${PWD}/${FN:t}.bak

INITIAL_REMOTE=false
[[ ${_DEBUG} -ge 0 ]] && dbg "${0}: REMOTE=${FN} LOCAL=${PWD}/${FN:t} BACKUP=${PWD}/${FN:t}.bak"
[[ ${REMOTE} == ${LOCAL} ]] && echo "No remote version found" && REMOTE="${REMOTE_DIR}/${FILE_ARG:t}" && INITIAL_REMOTE=true
[[ ${_DEBUG} -ge 0 ]] && dbg "${0}: No remote version found. Reset remote to: ${REMOTE}"

REMOTE_NAME="${CYAN_FG}${ITALIC}${REMOTE:h}/${RESET}${WHITE_FG}${REMOTE:t}${RESET}"
LOCAL_NAME="${MAGENTA_FG}${ITALIC}${LOCAL:h}/${RESET}${WHITE_FG}${LOCAL:t}${RESET}"
BACKUP_NAME="${MAGENTA_FG}${BACKUP:h}/${WHITE_FG}${REMOTE:t}.${ITALIC}${WHITE_FG}${BACKUP:e}${RESET}"
LOCAL_MATCHES_BAK="The ${EM}local${RESET} version:${LOCAL_NAME} ${GREEN_FG}${ITALIC}MATCHES${RESET} the ${EM}existing${RESET} backup:${BACKUP_NAME}"
REMOTE_MATCHES_LOCAL="The ${EM}remote${RESET} version:${REMOTE_NAME} ${GREEN_FG}${ITALIC}MATCHES${RESET} the ${EM}local${RESET} version:${LOCAL_NAME}"
REMOTE_DIFFERS_LOCAL="${RED_FG}Warning${RESET}:the ${EM}remote${RESET} version ${RED_FG}differs${RESET} from the ${EM}local${RESET} version"
REMOTE_MORE_RECENT="The ${GREEN_FG}${EM}remote${RESET} file:${REMOTE_NAME} is ${GREEN_FG}${EM}more recent${RESET}"
LOCAL_MORE_RECENT="The ${GREEN_FG}${EM}local${RESET} file:${LOCAL_NAME} is ${GREEN_FG}${EM}more recent${RESET}"
EXISTING_BAK_FOUND="${RED_FG}Warning${RESET}:an ${EM}existing${RESET} (non matching) backup:${BACKUP_NAME} was found..."
REMOTE_WILL_OVERWRITE="The ${EM}remote${RESET} version:${REMOTE_NAME} will ${RED_FG}${ITALIC}overwrite${RESET} the ${EM}local${RESET} version:${LOCAL_NAME}"
LOCAL_WILL_OVERWRITE="File:${LOCAL_NAME} will ${RED_FG}${ITALIC}overwrite${RESET} the ${EM}existing${RESET} backup:${BACKUP_NAME}"

if [[ ${SHOW_L_DIFF} == 'true' ]];then
	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:SHOW_L_DIFF:true"
	colordiff ${BACKUP} ${LOCAL} >/dev/null 2>&1
	if [[ ${?} -eq 0 ]];then
		echo ${LOCAL_MATCHES_BAK}
		exit_leave
	else
		colordiff ${FILE_ARG}.bak ${FILE_ARG} | less -RF -P "Comparing $(format_for_less ${FILE_ARG}.bak) and $(format_for_less ${FILE_ARG}) [RED is BACKUP, GREEN is LOCAL source]"
		exit_leave "Comparing ./${FILE_ARG}.bak and ./${FILE_ARG} [RED is BACKUP, GREEN is LOCAL source]"
	fi
elif [[ ${SHOW_P_DIFF} == 'true' ]];then
	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:SHOW_P_DIFF:true"
	colordiff ${LOCAL} ${REMOTE} >/dev/null 2>&1
	if [[ ${?} -eq 0 ]];then
		echo ${REMOTE_MATCHES_LOCAL}
		exit_leave
	else
		colordiff ${LOCAL} ${REMOTE} | less -RF -P "Comparing $(format_for_less ${FILE_ARG}) and $(format_for_less ${PROD}) [RED is LOCAL source, GREEN is REMOTE source]"
		exit_leave "Comparing ${LOCAL} and ${REMOTE} [RED is LOCAL source, GREEN is REMOTE source]"
	fi
elif [[ ${PROD_COPY} == 'true' ]];then
	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:PROD_COPY:true"
	if [[ ${INITIAL_REMOTE} == 'true' ]];then
		[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Initial remote copy"
		echo "Creating an initial remote copy:${REMOTE_NAME}"
		get_response "Create ${EM}remote${RESET} version: ${WHITE_FG}${REMOTE_NAME}${RESET} with the ${EM}local${RESET} version ${WHITE_FG}${LOCAL_NAME}${RESET}"
		if [[ ${?} -eq 0 ]];then
			cp ${LOCAL} ${REMOTE}
			echo "${WHITE_FG}${LOCAL_NAME}${RESET} was copied to ${WHITE_FG}${REMOTE_NAME}${RESET}"
		else
			exit_leave "Operation cancelled"
		fi
	else
		[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Overwriting remote copy"
		get_response "Overwrite the ${EM}remote${RESET} version: ${WHITE_FG}${REMOTE_NAME}${RESET} with the ${EM}local${RESET} version ${WHITE_FG}${LOCAL_NAME}${RESET}"
		if [[ ${?} -eq 0 ]];then
			cp ${LOCAL} ${REMOTE}
			echo "${WHITE_FG}${LOCAL_NAME}${RESET} was copied to ${WHITE_FG}${REMOTE_NAME}${RESET}"
		else
			exit_leave "Operation cancelled"
		fi
	fi
	exit_leave
fi

#Source
BACK_COMPLETE=false
if [[ ! -e ${LOCAL} ]];then #initial copy
	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Initial copy"
	echo "This appears to be an initial copy..."
	echo "Source file identified as:${WHITE_FG}${REMOTE_NAME}${RESET}"
	[[ ${?} -eq 0 ]] && do_copy ${REMOTE} ${LOCAL}
	echo "Creating an initial backup..."
	[[ ${?} -eq 0 ]] && do_copy ${LOCAL} ${LOCAL}.bak
else
	if [[ -e ${LOCAL} ]];then
		[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Found local version"
		echo "\nSOURCE"
		echo "A ${EM}local${RESET} version of ${WHITE_FG}${REMOTE_NAME}${RESET} exists..."
		diff ${REMOTE} ${LOCAL} >/dev/null 2>&1
		if [[ $? -eq 0 ]];then
			if [[ ${LOCAL_PRIORITY} == 'false' ]];then
				echo ${REMOTE_MATCHES_LOCAL}
			fi
		else
			[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Local version NOT found"
			NEWEST=$(file_date_diff ${FN} ./${FN:t})
			echo ${REMOTE_DIFFERS_LOCAL}
			[[ ${NEWEST} == ${FN} ]] && echo ${REMOTE_MORE_RECENT} || echo ${LOCAL_MORE_RECENT}
			echo ${REMOTE_WILL_OVERWRITE}
			get_response "Overwrite the ${EM}local${RESET} version? (the ${EM}local${RESET} version will be backed up first)"
			if [[ ${?} -eq 0 ]];then
				[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Local backed up; remote will overwrite local"
				echo "\nBACKUP"
				do_copy ${LOCAL} ${LOCAL}.bak no_prompt
				echo "\nSOURCE"
				echo "Copying remote:${WHITE_FG}${REMOTE_NAME}${RESET}..."
				do_copy ${REMOTE} ${LOCAL} no_prompt
				BACK_COMPLETE=true
			else
				echo "${WHITE_FG}Operation cancelled${RESET}"
				exit
			fi
		fi
	else
		[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Local NOT found; remote will create local"
		do_copy ${REMOTE} ${LOCAL}
	fi

	if [[ ${BACK_COMPLETE} == 'false' ]];then
		#Backup
		echo "\nBACKUP"
		if [[ -e ${LOCAL} && ! -e ${BACKUP} ]];then #no backup exists
			[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Backup NOT found; making backup"
			do_copy ${LOCAL} ${BACKUP} no_prompt
		elif [[ -e ${LOCAL} && -e ${BACKUP} ]];then #existing backup
			[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Backup found; comparing backup"
			diff ${LOCAL} ${BACKUP} >/dev/null 2>&1
			if [[ $? -eq 0 ]];then
				[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Backup is current"
				echo ${LOCAL_MATCHES_BAK}
			else
				[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:Backup is NOT current"
				echo ${EXISTING_BAK_FOUND}
				echo ${LOCAL_WILL_OVERWRITE}
				do_copy ${LOCAL} ${BACKUP}
			fi
		fi
	fi
fi

exit_leave
