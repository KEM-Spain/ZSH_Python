#!/usr/bin/zsh
REVERSE="\033[7m"
RESET="\033[m" 
BOLD="\033[1m" 
BLACK_FG="\033[30m" 
RED_FG="\033[31m" 
GREEN_FG="\033[32m" 
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"

#Constants
HDMI=DP-1
LCD=eDP-1

#Declarations
typeset -A MONS

#Functions
boolean_color () {
	local STATE=${1}

	case ${STATE} in
		on) echo ${GREEN_FG}${STATE}${RESET};;
		off) echo ${RED_FG}${STATE}${RESET};;
	esac
}

init () {
	local LIST=("${(@f)$(xrandr | grep -w connected)}")
	local M
	local TYPE

	for M in ${LIST};do
		MON=$(echo ${M} | cut -d' '  -f1)
		case ${MON:l} in
			${HDMI:l}) TYPE="External HDMI";;
			${LCD:l}) TYPE="Internal LCD";;
		esac
		MONS[${MON}]=${TYPE}
	done
}

ec () {
	local LEN=${1}
	local CHAR=${2}
	local X

	for ((X=0;X<${LEN};X++)) echo -n ${CHAR}
}

do_info () {
	local -A DESC
	local -R MON
	local C=$'\u2501'
	local LAST_CMD
	local M
	local STATUS_FILE=/tmp/mon_status

	[[ -f ${STATUS_FILE} ]] && LAST_CMD=$(<${STATUS_FILE})
	 
	printf "\n${WHITE_FG}%10s    "'%-18s'" "'%12s'" "'%12s'"${RESET}\n" "Monitor" "Description" "Status" "State"
	printf "${CYAN_FG}%10s    "'%-18s'" "'%12s'" "'%12s'"${RESET}\n" $(ec 7 ${C}) $(ec 18 ${C}) $(ec 12 ${C}) $(ec 12 ${C})

	for M in ${(k)MONS};do
		printf "%10s -> "'%-18s'" "'%12s'" "'%12s'"${RESET}\n" ${M} ${MONS[${M}]} "Connected" $(get_mon_state ${M})
	done

	echo

	[[ -z ${LAST_CMD} ]] && return
}

get_mon_state () {
	local MON_ARG=${1:l}
	local -A MONITORS

	MONITORS[${HDMI}]="DP-1"
	MONITORS[${LCD}]="eDP-1"

	local MON=${MONITORS[${1}]}
	[[ -z ${MON} ]] && echo "${0} - Invalid arg:$1" >&2 && exit

	#echo "Scanning fo ${MON}"

	local LIST=("${(f)$(xrandr --verbose | grep -iw 'connected\|brightness')}")

	local HIT=false
	for L in ${LIST};do
		[[ ${L:l} =~ "^${MON:l}" ]] && HIT=true && continue
		if [[ ${HIT} == 'true' ]];then
			STATE=$(echo ${L} | cut -d: -f2-)
			break
		fi
	done

	[[ -z ${STATE} ]] && echo "Failed to get state of ${MON}" >&2 && exit
	[[ ${STATE} =~ "0.0" ]] && echo "off" || echo "on"
}

set_mon_state () {
	local MON=${1}
	local ACTION=${2}

	for M in ${(k)MONS};do
		[[ ${(L)M}	!= "${(L)MON}" ]] && continue
		case ${ACTION} in
			on)	xrandr --output ${M} --brightness 1
					echo "Activating display ${M}" >&2
					;;
			off)	xrandr --output ${M} --brightness 0
					echo "De-activating display ${M}" >&2
					;;
		esac
	done
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}

parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done

	echo ${OPTSTRING}
}

opt_type () {
	local OPT=${1}

	case ${OPT} in
		s) echo "<HDMI|LCD>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	echo -e "\n${WHITE_FG}Usage${RESET}:${SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-b${RESET} BOTH displays on"
	echo -e "${WHITE_FG}-h${RESET} HDMI (external) display only"
	echo -e "${WHITE_FG}-l${RESET} LCD (internal) display only"
	echo -e "${WHITE_FG}-i${RESET} Display current display info"
	echo -e "${WHITE_FG}-s${RESET} Request status for monitor (HDMI/LCD)"
	echo -e "${WHITE_FG}-t${RESET} Toggle between HDMI only and both"
	echo -e "\n${WHITE_FG}DESC${RESET}:Control active display(s). Default is current status."
	exit
}

OPTSTR=":HDbhlits:"

DEBUG=false
BOTH_ON=false
HDMI_ONLY=false
LCD_ONLY=false
MON_INFO=false
TOGGLE_EXT_ONLY=false
MON_STATUS=false

OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
		D) DEBUG=true;;
		H) usage;;
		b) BOTH_ON=true;;
		h) HDMI_ONLY=true;;
		l) LCD_ONLY=true;;
		i) MON_INFO=true;;
		s) MON_STATUS=${OPTARG};;
		t) TOGGLE_EXT_ONLY=true;;
	:) print -u2 "${SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
	\?) print -u2 "${SCRIPT}: unknown option -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--
#Execution
 
init

#info
if [[ ${MON_INFO}	== 'true' ]];then
	do_info
	exit
fi

#mon status is default
if [[ ${OPTIND} -eq 1 ]];then
	printf "\n%7s %s\n" "Monitor" "State"
	printf "%7s %s\n" "-------" "-----"
	printf "%7s %s\n" "HDMI" $(boolean_color $(get_mon_state ${HDMI}))
	printf "%7s %s\n\n" "LCD" $(boolean_color $(get_mon_state ${LCD}))
	exit
fi

if [[ ${MON_STATUS} != 'false' ]];then
	MON_STATUS=${(U)MON_STATUS}
	case ${MON_STATUS} in
		HDMI) MON=${HDMI};;
		LCD) MON=${LCD};;
		*) echo "${RED_FG}Invalid monitor${RESET}. HDMI or LCD only";exit;;
	esac
	echo $(get_mon_state ${MON})
	exit
fi

#mon setting
if [[ ${BOTH_ON} == 'true' ]];then
	set_mon_state ${LCD} on
	set_mon_state ${HDMI} on
elif [[ ${HDMI_ONLY} == 'true' ]];then
	set_mon_state ${HDMI} on
	set_mon_state ${LCD} off
elif [[ ${LCD_ONLY} == 'true' ]];then
	set_mon_state ${HDMI} off
	set_mon_state ${LCD} on
elif [[ ${TOGGLE_EXT_ONLY} == 'true' ]];then
	HDMI_STATE=$(get_mon_state ${HDMI})
	LCD_STATE=$(get_mon_state ${LCD})
	if [[ ${HDMI_STATE} == 'on' && ${LCD_STATE} == 'off' ]];then #ext only to both
		set_mon_state ${HDMI} on 
		set_mon_state ${LCD} on
	else #ext only
		set_mon_state ${HDMI} on 
		set_mon_state ${LCD} off
	fi
fi
