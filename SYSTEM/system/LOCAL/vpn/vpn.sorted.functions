call_nord () {
	local CMD=(${@})


	case ${CMD} in
		status) echo "\n${CYAN_FG}$(str_unicode_line 22) ${GREEN_FG}VPN Status${RESET} ${CYAN_FG}$(str_unicode_line 22)${RESET}";;
		settings) echo "\n${CYAN_FG}$(str_unicode_line 21) ${GREEN_FG}VPN Settings${RESET} ${CYAN_FG}$(str_unicode_line 21)${RESET}";;
	esac

	_DO_PARSE=true
	case ${CMD} in
		status) eval "${VPN} ${CMD}" | format_nord;;
		settings) eval "${VPN} ${CMD}" | format_nord;;
		login) do_login;;
		*) _DO_PARSE=false;eval "${VPN} ${CMD} 2>&1" | format_nord;;
	esac
}

do_disconnect () {
	call_nord disconnect
	nord_reset >/dev/null 2>&1 &
}

do_login () {
	local -a RESPONSE
	local R

	RESPONSE=("${(f)$(nordvpn login --token ${_TOKEN})}")

	for R in ${RESPONSE};do
		[[ ${R} =~ 'already logged in' ]] && echo "logged in..." && return
	done
	echo "logging in..."
}

format_nord () {
	local L
	local LBL
	local LINE
	local LONGEST=0
	local OFFSET=''
	local VAL
	local -a LIST

	while read LINE;do
		[[ ${LINE:l} =~ "(version|http|rate)" ]] && continue #continue past info header

		if [[ ${_DO_PARSE} == 'false' ]];then
			echo ${LINE}
		else
			L=$(echo "${LINE}" | sed -e 's/[	\-]//g') #kill tabs, carriage, and dash

			LBL=$(echo ${L} | cut -d':' -f1 | sed 's/^ *//')
			VAL=$(echo ${L} | cut -d':' -f2 | sed 's/^ *//')
			[[ ${#LBL} -gt ${LONGEST} ]] && LONGEST=${#LBL}

			if [[ -n ${OFFSET} ]];then #offset, get value
				LBL=${OFFSET}
				VAL=${VAL}
			fi

			if [[ ${L:l} =~ 'subnet' ]];then #get offset label, catch value next cycle
				LBL=$(echo ${L} | cut -d':' -f1)
				OFFSET=${LBL}
				continue
			elif [[ ${L:l} =~ 'ports' ]];then #get offset label, catch value next cycle
				LBL=$(echo ${L} | cut -d':' -f1)
				OFFSET=${LBL}
				continue
			fi

			LIST+="${LBL}^${VAL}"
		fi
	done

	if [[ ${_DO_PARSE} == 'true' ]];then
			for L in ${LIST};do
				LBL=$(echo ${L} | cut -d'^' -f1)
				VAL=$(echo ${L} | cut -d'^' -f2)
				printf "${CYAN_FG}%*s${RESET}: ${WHITE_FG}%s${RESET}\n" ${LONGEST} ${LBL} ${VAL}
			done
	fi
}

list_servers () {
	local SELECTED
	local COUNTRY
	local L

	#reflects current output of 'countries' command. Extraneous info
	#on first 2 lines (tail -n -+2) is eliminated.  Could change.
	RAWLIST=($(call_nord countries | tail -n +2 | sed -re 's/\t+/ /g' -e 's/\x0d\x2d\x0d\x20\x20\x0d//g'))

	for L in ${(o)RAWLIST};do
		if [[ ${_SHORTLIST} == 'true' ]];then
			[[ ${L} =~ 'help' ]] && continue
			grep -qi ${L:l} <<<"${(v)SHORTCUTS:l}"
			[[ ${?} -eq 0 ]] && LIST+=${L}
		else
			LIST+=${L}
		fi
	done

	if ! arr_is_populated "${LIST}";then
		exit_leave "${RED_FG}No countries matched${RESET}:${SEARCHTERM}"
	fi

	list_set_header 'printf "List of %-*d countries providing VPN\tPage:%-*d of %-*d" ${#${#LIST}} ${#LIST} ${#${MAX_PAGES}} ${PAGE} ${#${MAX_PAGES}} ${MAX_PAGES}'
	list_add_header_break

	list_set_prompt "Hit <SPACE> to select server then <ENTER> to connect (or exit if none selected)."
	list_set_action_msgs connect "to country"
	list_set_selection_limit 1
	list_set_client_warn true

	list_cursor_select ${LIST}

	if [[ ${?} -ne 0 ]];then
		SELECTED=$(list_get_selected)
		COUNTRY=$(echo ${_LIST[${SELECTED}]} | cut -d: -f2)
		tput clear
		echo "${GREEN_FG}Connecting to ${COUNTRY} ${DEFAULT_ARGS}${RESET}"
		call_nord connect ${DEFAULT_ARGS} ${COUNTRY}
	fi
}

