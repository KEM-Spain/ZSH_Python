#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _LIB_FUNC_LIST=()
typeset -A _LIB_DEP_LIST=()
typeset -a _LIST=()
typeset -a _LIBS=()

# Constants
_LIB_DIR=/usr/local/lib
_LIBS=("${(f)$(find ${_LIB_DIR} -maxdepth 1 -name '*zsh' -type f)}")

# Globals

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Functions
app_scan () {
	local FN=${1}
	local -A APP_FUNC_LIST=()
	local -A APP_LIB_FUNC_LIST=()
	local -a XXX=()
	local -a APP_FUNCS=()
	local -a APP_LIBS=()
	local -a NEEDED_LIBS=()
	local APP=''
	local CNT=0
	local FUNC=''
	local HDR=''
	local K L N S V F
	local LIB=''
	local LIB_CNT=0
	local LINE_COL=0
	local LINE_LEN=24
	local NDX=0
	local SCORE=0

	# All functions defined in application
	APP_FUNCS=("${(f)$(grep -H --color=never '() {' ${FN} | sed -E 's/\s+[(][)] \{//' | sort)}")
	for F in ${APP_FUNCS};do
		APP=$(cut -d':' -f1 <<<${F})
		FUNC=$(cut -d':' -f2 <<<${F})
		APP_FUNC_LIST[${FUNC}]=${APP}
	done

	(
	echo "Found:${WHITE_FG}${#APP_FUNCS}${RESET} functions ${CYAN_FG}${ITALIC}defined${RESET} in ${WHITE_FG}${APP}${RESET}"
	echo $(str_unicode_line 80)
	NDX=0
	for L in ${APP_FUNCS};do
		((NDX++))
		FUNC=$(cut -d':' -f2 <<<${L})
		printf "${WHITE_FG}%2d${RESET}) ${WHITE_FG}%s${RESET}\n" ${NDX} ${FUNC}
	done
	echo $(str_unicode_line 80)

	# Scan application for lib functions
	echo "Library functions ${CYAN_FG}${ITALIC}referenced${RESET} in ${WHITE_FG}${APP}${RESET}"
	echo $(str_unicode_line 80)
	NDX=0
	for K in ${(ok)_LIB_FUNC_LIST};do
		F=$(grep -w -m1 -o --color=never ${K} ${FN}) # find lib function
		[[ ${?} -ne 0 ]] && continue
		((NDX++))
		APP_LIB_FUNC_LIST[${F}]=${_LIB_FUNC_LIST[${K}]}
		printf "${WHITE_FG}%2d${RESET}) ${CYAN_FG}%s ${WHITE_FG}${ITALIC}%s${RESET} is provided by:${WHITE_FG}%s${RESET}\n" ${NDX} ${FN:t} ${F} ${${APP_LIB_FUNC_LIST[${F}]}:t}
	done
	echo $(str_unicode_line 80)

	printf "${WHITE_FG}Function Summary${RESET} - Internal:${WHITE_FG}%d${RESET} Library:${WHITE_FG}%d${RESET}\n" ${#APP_FUNCS} ${#APP_LIB_FUNC_LIST}

	[[ -z ${APP_LIB_FUNC_LIST} ]] && return 1

	HDR="${CYAN_FG}Library Dependencies${RESET}"
	echo "\n${HDR}"
	echo $(str_unicode_line $(echo ${HDR} | str_strip_ansi -l))
	for V in ${(uov)APP_LIB_FUNC_LIST};do
		printf "${WHITE_FG}%s ${CYAN_FG}${ITALIC}includes${RESET}: ${WHITE_FG}%s${RESET}\n" ${FN:t} ${V:t}
	done
	) | mypager

}

map_lib_func () {
	local LIB
	local DEP
	local F L M

	for L in ${_LIBS};do
		_LIST=("${(f)$(grep -oPi "^.*\(\)\s+{$"  ${L})}")
		for M in ${_LIST};do
			F=$(cut -d' ' -f1 <<<${M})
			_LIB_FUNC_LIST[${F}]=${L}
		done
	done

	# All library dependencies
	for L in ${_LIBS};do
		D=("${(f)$(grep -m1 -H --color=never '_DEPS_+=' ${_LIB}/${L})}")
		[[ ${?} -ne 0 ]] && continue
		LIB=$(cut -d':' -f1 <<<${D})
		DEP=$(cut -d':' -f2 <<<${D})
		DEP=$(sed -e 's/_DEPS_+=//' <<<${DEP:gs/\"//})
		_LIB_DEP_LIST[${DEP}]=${LIB}
	done
}

func_by_lib () {
	local K=''
	local LONGEST=0
	local STR=''

	for K in ${(k)_LIB_FUNC_LIST};do
		STR="${K}${_LIB_FUNC_LIST[${K}]}"
		[[ ${#STR} -gt ${LONGEST} ]] && LONGEST=${#STR}
	done

	{
	printf "\n${CYAN_FG}%*s %s${RESET}\n" ${LONGEST} "Function" "Library"
	printf "%*s %s\n" ${LONGEST} "--------" "-------"
	for K in ${(Ok)_LIB_FUNC_LIST};do
		printf "%*s|${WHITE_FG}%s${RESET}\n" ${LONGEST} ${K} ${_LIB_FUNC_LIST[${K}]}
	done | sort -t'|' -k2 | sed 's/|/ /'
	} | mypager
}

find_func () {
	local FUNC=${1}
	if [[ -n ${_LIB_FUNC_LIST[${FUNC}]} ]];then
		echo "Function:${WHITE_FG}${FUNC}${RESET} is located in:${WHITE_FG}${_LIB_FUNC_LIST[${FUNC}]}${RESET}"
	else
		echo "Function:${WHITE_FG}${FUNC}${RED_FG} not found${RESET}"
	fi
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
1) Map application functions to library
\t2) Locate a function within library
\t3) View all library functions
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		a) echo "<ZSH_LIB_APP>";;
		f) echo "<FUNCTION>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type a)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-f${RESET} identify library containing $(opt_type f)"
	echo -e "${WHITE_FG}-l${RESET} generate list of all library functions"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	echo ${PENDING_MSGS}
}

OPTSTR=":HDf:l"
OPTIND=0

FUNC=''
FUNC_LIST=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     f) FUNC=${OPTARG};;
	  l) FUNC_LIST=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

#Execution
[[ ${#} -eq 0 && ${#OPTIONS} -eq 0 ]] && usage $(msg_warn "No operation was specified")
[[ ${#} -eq 1 && ! -e ${1} ]] && exit_leave $(msg_err "File not found:${1}") || APP=${1}

map_lib_func

[[ ${FUNC_LIST} == 'true' ]] && func_by_lib && exit_leave
[[ -n ${FUNC} ]] && find_func ${FUNC} && exit_leave
[[ -n ${APP} ]] && app_scan ${APP} && exit_leave

exit_leave
