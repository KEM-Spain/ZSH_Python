#!/usr/bin/zsh
REVERSE="\033[7m"
RESET="\033[m"
BOLD="\033[1m"
BLACK_FG="\033[30m"
BLACK_BG="\033[40m"
RED_FG="\033[31m"
RED_BG="\033[41m"
GREEN_FG="\033[32m"
GREEN_BG="\033[42m"
YELLOW_FG="\033[33m"
YELLOW_BG="\033[43m"
BLUE_FG="\033[34m"
BLUE_BG="\033[44m"
MAGENTA_FG="\033[35m"
MAGENTA_BG="\033[45m"
CYAN_FG="\033[36m"
CYAN_BG="\033[46m"
WHITE_FG="\033[37m"
WHITE_BG="\033[47m"
STRIKE="\033[9m"
ITALIC="\033[3m"
UNDER="\033[4m"

#echoed ansi
E_REVERSE=$(echo "\033[7m")
E_RESET=$(echo "\033[m")
E_BOLD=$(echo "\033[1m")
E_BLACK_FG=$(echo "\033[30m")
E_RED_FG=$(echo "\033[31m")
E_GREEN_FG=$(echo "\033[32m")
E_YELLOW_FG=$(echo "\033[33m")
E_BLUE_FG=$(echo "\033[34m")
E_MAGENTA_FG=$(echo "\033[35m")
E_CYAN_FG=$(echo "\033[36m")
E_WHITE_FG=$(echo "\033[37m")
E_STRIKE=$(echo "\033[9m")

#Declarations
typeset -a LIST
typeset -A HEAD_TAIL
typeset -A PATH_NDX
typeset -A TRACK_NDX
typeset -a MARKED=(0)
typeset -a RAWLIST
typeset -aU MUSIC_DIRS
typeset -a PLAYER_OPTS
typeset -A PLAYERS
typeset -a SEARCH_DESC
typeset -A SEEN

#Globals
_PLAYER=?
_PLAYER_TYPE=?

#Constants
PLAYERS[cvlc]="/usr/bin/cvlc"
PLAYERS[vlc]="/usr/bin/vlc"
ALT_MUSIC_DIR=''
AUDIO_FILES='\(\.mp3\|\.m4a\|\.flac\|\.ogg\|\.wav\)$'
LIB=/usr/local/lib
[[ -n ${MUSIC_DIR} ]] && MUSIC_DIRS+="${MUSIC_DIR}" #env var
MUSIC_DIRS+="${PWD}/"
MUSIC_DIRS+="/home/kmiller/Music"
MUSIC_DIRS+="/media/kmiller/KEM_Misc/Music/KEM-B9"
PLAYER_BKGD=${PLAYERS[cvlc]}
PLAYER_FRGD=${PLAYERS[vlc]}
PLAYER_BKGD_DEFAULT_OPTS="--file-caching=25000"
PLAYER_FRGD_DEFAULT_OPTS="--file-caching=25000"
PLAYER_DEFAULT_OPTS='--no-repeat --play-and-exit'
PLAYER_REPEAT_OPTS='--loop'
PLAYER_RANDOM_OPTS='--random'
PLAYLIST_FILE=/home/kmiller/.tmp/playlist.m3u
THIS_FILE=${0:t}

#Imports
source ${LIB}/common.zsh

#Functions
action_do () {
	local -a MARKED=(${@})
	local -a QUEUE
	local FPATH
	local M
	local TNDX
	local TRACK

	for M in ${MARKED};do
		TNDX=${(k)TRACK_NDX[(r)${LIST[${M}]}]}
		if [[ -z ${TNDX} ]];then
			msg_box -p "TNDX failed for:${LIST[${M}]} - should be:$(hard_path_search ${LIST[${M}]})"
		else
			FPATH=$(str_from_hex ${PATH_NDX[${TNDX}]})
			TRACK=$(str_from_hex ${LIST[${M}]})
			QUEUE+="${FPATH:q}/${TRACK:q}"
		fi
		[[ ${DEBUG} == 'true' ]] && echo "QUEUE:${QUEUE}">>debug.out
		list_set_selected ${M}
	done

	msg_box "Please wait..."
	player_playlist ${QUEUE}

	player_launch

	[[ ${FOREGROUND_PLAY} == 'false' ]] && player_kill ${#QUEUE}
}

action_warn () {
	local MARKED=(${@})
	local CNT=$(arr_get_nonzero_count ${MARKED})
	
	msg_box -p "<I>Please respond<N>|==============| |${CNT} $(str_pluralize item ${CNT}) selected.| |<B>Queue for play? (y/n)<N>"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${MARKED};do
			list_set_selected ${M} 0
		done
	fi
}

add_music_dir () {
	local DIR="${@}"

	ALT_MUSIC_DIR=$(realpath ${DIR})

	if [[ -d ${ALT_MUSIC_DIR} ]];then
		MUSIC_DIRS+=${ALT_MUSIC_DIR}
	else
		exit_leave "${RED_FG}Invalid directory${RESET}:${WHITE_FG}${DIR}${RESET}"
	fi
}

dir_search () {
	local DIR_SEARCH_TERM=${1}
	local -a SEARCH_RESULT
	local -a PWD_RESULT
	local -a MD_RESULT
	local -a RESULT
	local D

	PWD_RESULT=("${(f)$(find . -maxdepth 1 -iname "${DIR_SEARCH_TERM}*" -type d ! -path ${PWD} 2>/dev/null)}")

	for D in ${MUSIC_DIRS};do
		MD_RESULT+=("${(f)$(find ${D} -maxdepth 1 -iname "${DIR_SEARCH_TERM}*" -type d ! -path ${D} 2>/dev/null)}")
	done

	RESULT=(${PWD_RESULT} ${MD_RESULT})

	echo ${RESULT}
}

get_extra_info () {
	local NDX=${1}
	local STR

	STR=$(str_from_hex ${PATH_NDX[${(k)TRACK_NDX[(r)${LIST[${NDX}]}]}]})
	echo ${STR:t}
}

hard_path_search () {
	local TRACK=${1}
	local K

	for K in ${(k)PATH_NDX};do
		[[ "${X[${K}]}" =~ ${TRACK} ]] && echo "${K}"
	done
}

is_music_file () {
	local -a LIST=(${@})
	local -a AUDIO_LIST
	local L

	for L in ${LIST};do
		[[ ! $(file ${L}) =~ 'audio' ]] && continue
		AUDIO_LIST+=${L}
	done

	echo ${AUDIO_LIST}
}

is_singleton () {
	local INSTANCES=$(pgrep -c ${0:t})

	[[ ${INSTANCES} -eq 0 ]] && return true || return false
}

player_current_track () {
	local MY_PID
	local TRACK

	MY_PID=${1}
	[[ -z ${MY_PID} ]] && echo 'unknown (1)'

	TRACK=$(lsof 2>/dev/null | grep ${MY_PID})

	[[ -n ${TRACK} ]] && TRACK=$(echo ${TRACK} | grep ${AUDIO_FILES} | head -1 | tr -s '[:space:]' | cut -d' ' -f9- | rev | cut -d'/' -f 1 | rev)

	[[ -n ${TRACK} ]] && echo ${TRACK} || echo 'unknown (2)'
}

player_kill () {
	local CNT=${1}
	local KEY
	local PID
	local MSG
	local TRACK
	local LAST_TRACK
	local BOX_CLEAR

	msg_box -c "Detecting vlc process to monitor..."
	sleep 1 #wait for process to start

	PID=$(pgrep vlc)
	if [[ -n ${PID} ]];then
		[[ ${CNT} -gt 1 ]] && MSG="these tracks..." || MSG="this track..."
		msg_box -c "${CNT} $(str_pluralize track ${CNT}) queued|Press <y> or <space> to end playback of ${MSG}"
		tput civis
	else
		msg_box -p "Error: ${0} could not detect any vlc process to monitor...|Press any key"
	fi

	LAST_TRACK=?
	while true;do #loop until user cancels process or process no longer exists
		PID=$(pgrep vlc)
		[[ -z ${PID} ]] && echo && tput cnorm && return
		TRACK=$(player_current_track ${PID})
		if [[ ${TRACK} != ${LAST_TRACK} ]];then
			[[ ${LAST_TRACK} == '?' ]] && BOX_CLEAR='' || BOX_CLEAR='-c'
			msg_box ${BOX_CLEAR} -x 25 "Track:${TRACK}"
			LAST_TRACK=${TRACK}
		fi
		read -s -k1 -t3 KEY #timeout after 3 seconds
		if [[ ${KEY} == 'y' || ${KEY} == ' ' ]];then
			pkill vlc && tput cnorm && return
		else
			continue
		fi
	done
}

player_launch () {
	if is_singleton;then
		eval "nohup ${_PLAYER} ${PLAYER_OPTS} ${PLAYLIST_FILE} >/dev/null 2>&1" & 
	else
		exit_leave "Only one instance of ${_PLAYER} allowed. Exiting."
	fi
}

player_playlist () {
	local QUEUED=(${@})
	local Q

	#create the playlist using external tool m3u
	for Q in ${QUEUED};do
		echo ${Q}
	done | m3u >${PLAYLIST_FILE}
}

player_setopts () {
	local PLAYER=${1}

	PLAYER_OPTS=(${PLAYER_DEFAULT_OPTS})

	#set options for player
	if [[ ${REPEAT_PLAY} == "true" ]];then
		PLAYER_OPTS+=${PLAYER_REPEAT_OPTS}
	else
		PLAYER_OPTS+="--no-loop"
	fi

	if [[ ${RANDOM_PLAY} == "true" ]];then
		PLAYER_OPTS+=${PLAYER_RANDOM_OPTS}
	else
		PLAYER_OPTS+="--no-random"
	fi
}

player_set_type () {
	local FOREGROUND_PLAY=${1}

	if [[ ${FOREGROUND_PLAY} == 'true' ]];then
		_PLAYER=${PLAYER_FRGD}
		_PLAYER_TYPE=Foreground
		PLAYER_OPTS+=${PLAYER_FRGD_DEFAULT_OPTS} 
	else
		_PLAYER=${PLAYER_BKGD}
		_PLAYER_TYPE=Background
		PLAYER_OPTS+=${PLAYER_BKGD_DEFAULT_OPTS}
	fi
}

playit_set_header () {

	#Global for processing by eval in list_set_header
	typeset -g PLAYER_STATE
	typeset -g PLAYER_STATE_COLOR
	typeset -g RANDOM_STATE
	typeset -g RANDOM_STATE_COLOR
	typeset -g REPEAT_STATE
	typeset -g REPEAT_STATE_COLOR

	#set headings
	list_set_header_init

	REPEAT_PLAY=${_REPEAT_KEY}
	REPEAT_STATE=OFF 
	REPEAT_STATE_COLOR=${RED_FG}
	[[ ${REPEAT_PLAY} == 'true' ]] && REPEAT_STATE=ON && REPEAT_STATE_COLOR=${GREEN_FG}

	RANDOM_PLAY=${_RANDOM_KEY}
	RANDOM_STATE=OFF 
	RANDOM_STATE_COLOR=${RED_FG}
	[[ ${RANDOM_PLAY} == 'true' ]] && RANDOM_STATE=ON && RANDOM_STATE_COLOR=${GREEN_FG}

	FOREGROUND_PLAY=${_FOREGROUND_KEY}
	player_set_type ${FOREGROUND_PLAY}

	PLAYER_STATE=${_PLAYER_TYPE} 
	PLAYER_STATE_COLOR=${RED_FG}
	[[ ${FOREGROUND_PLAY} == 'true' ]] && PLAYER_STATE=${_PLAYER_TYPE} && PLAYER_STATE_COLOR=${GREEN_FG}

	player_setopts ${_PLAYER} 

	list_set_header 'printf "Query returned ${WHITE_FG}%s${RESET} $(str_pluralize track ${#LIST}), Search:${WHITE_FG}%s${RESET} Player:${PLAYER_STATE_COLOR}%-10s${RESET} Repeat:${REPEAT_STATE_COLOR}%-3s${RESET} Random:${RANDOM_STATE_COLOR}%-3s${RESET} \tPage:${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET}" ${#LIST} "${SEARCH_DESC}" ${PLAYER_STATE} ${REPEAT_STATE} ${RANDOM_STATE} ${PAGE} ${MAX_PAGES}'

	[[ -n ${ALT_MUSIC_DIR} ]] && list_set_header 'printf "Alternate Music Dir:${WHITE_FG}${ALT_MUSIC_DIR}${RESET}"'
	list_cursor_do_header
}

#--BeginGetopts--
parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR_SEARCH_TEXT>";;
		m) echo "<MUSIC_PATH>";;
		p) echo "<PARAM>";;
		s) echo "<SEARCH_TERM>";;
		e) echo "<FILE_EXT>";;
		t) echo "<TRACK_SEARCH_TEXT>";;
	esac
}

#For convenience, if two arguments present, use the first as DIR_SEARCH_TERM, second as TRACK_SEARCH_TERM...
usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	exit_visible
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_THIS_FILE} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} ${WHITE_FG}[[${RESET}$(opt_type d)${WHITE_FG}] [${RESET} $(opt_type t)${WHITE_FG}]]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-d $(opt_type s)${RESET} limit search to directories matching ${WHITE_FG}$(opt_type s)${RESET} text"
	echo -e "${WHITE_FG}-e $(opt_type e)${RESET} restrict search to a specific file type (flac,mp3,etc.)"
	echo -e "${WHITE_FG}-f${RESET} use foreground player"
	echo -e "${WHITE_FG}-l${RESET} list current search paths"
	echo -e "${WHITE_FG}-m $(opt_type m)${RESET} supply an alternate path to search"
	echo -e "${WHITE_FG}-r${RESET} repeat playlist"
	echo -e "${WHITE_FG}-z${RESET} randomize playlist"
	echo -e "\n${WHITE_FG}DESC${RESET}:\tSelect audio files from list. Use search options to find audio files.\n\tIf one argument is present it is $(opt_type t)\n\tFor convenience, if two arguments present, the first is $(opt_type d), second is $(opt_type t)\n\tWithout any arguments the current directory is searched for any music files. If that fails, further searches\n\tare done in the standard music directories or if -m $(opt_type m) was supplied, that directory will be searched.\n\tIf the valid name of an audio file is passed and it will be played.";
	exit_leave
}

OPTSTR=":HDd:e:flm:rvz"
OPTIND=0

DEBUG=false
DIR_SEARCH=false
FOREGROUND_PLAY=false
LIST_SEARCH_PATHS=false
RANDOM_PLAY=false
REPEAT_PLAY=false
TYPE_SEARCH=false
VERBOSE=false

while getopts ${OPTSTR} OPTION;do
	case ${OPTION} in
		H) usage;;
		D) DEBUG=true;;
		d) DIR_SEARCH=true;DIR_SEARCH_TERM=(${OPTARG});;
		e) TYPE_SEARCH=true;AUDIO_FILES="\(${OPTARG}\)$";;
		f) FOREGROUND_PLAY=true;;
		l) LIST_SEARCH_PATHS=true;;
		m) add_music_dir ${OPTARG};;
		r) REPEAT_PLAY=true;list_set_repeat;;
		v) VERBOSE=true;;
		z) RANDOM_PLAY=true;list_set_random;;
		\?) exit_leave "${WHITE_FG}${0:t}${RED_FG}->${RESET}unknown option:${WHITE_FG}${OPTARG}${RESET}";;
		:) exit_leave "${_THIS_FILE}:${RED_FG}option: -${WHITE_FG}${OPTARG}${RESET} requires an argument${RESET}";;
	esac
done
shift $((OPTIND -1))
#--EndGetOpts--

#Execution
rm -rf ./debug.out #kill any old debug output

#Display search paths and exit if LIST_SEARCH_PATHS
if [[ ${LIST_SEARCH_PATHS} == 'true' ]];then
	NDX=0
	echo "${WHITE_FG}Current music file search paths...${RESET}"
	for M in ${MUSIC_DIRS};do
		((NDX++))
		[[ -e ${M} ]] && STATUS=$(boolean_color valid E) || STATUS=$(boolean_color invalid E)
		printf "${WHITE_FG}%d${RESET}) %-40s %s\n" ${NDX} ${M} ${STATUS}
	done
	exit_leave
fi

#Initialization
[[ ${DEBUG} == 'false' ]] && do_smcup

[[ ! -d ~/.tmp ]] && mkdir ~/.tmp #dir for playlist

#Set player options
player_set_type ${FOREGROUND_PLAY}
player_setopts ${_PLAYER} 
_FOREGROUND_KEY=${FOREGROUND_PLAY}

#Check if a file name was passed
if [[ -e ${1} && $(grep -q ${AUDIO_FILES} <<<${1}) -eq 0 ]];then
	FN=${1}
	FN=$(realpath ${FN:h})/${FN:t}
	QUEUE+=${FN}
	player_playlist ${QUEUE}
	player_launch
	[[ ${FOREGROUND_PLAY} == 'false' ]] && player_kill ${#QUEUE}
	exit_leave
fi

#-- Begin_Dir_and_File_Search --#
#For convenience, if two arguments present, use the first as DIR_SEARCH_TERM, second as TRACK_SEARCH_TERM...
if [[ ${#} -eq 2 ]];then
	msg_box -c -t .75 "2 args passed. Using arg 1:\"${1}\" as DIR_SEARCH_TERM, and arg 2:\"${2}\" as TRACK_SEARCH_TERM"
	DIR_SEARCH=true
	DIR_SEARCH_TERM=${1}
	shift
fi

#Set TRACK_SEARCH_TERM. If 1 arg was passed or 1 arg remains it is the track search
TRACK_SEARCH=false
[[ -n ${1} ]] && TRACK_SEARCH=true && TRACK_SEARCH_TERM=${1} 

TYPE="$(echo ${AUDIO_FILES} | sed 's/[\()$]//g')"
[[ ${TYPE_SEARCH} == 'true' ]] && TYPE_MSG="of type:${WHITE_FG}${TYPE}${RESET}" || TYPE_MSG=''

#Directory search
if [[ ${DIR_SEARCH} == 'true' ]];then
	msg_box -c -t .75 "Scanning for directories matching \"${DIR_SEARCH_TERM}\""
	DIR_LIST=($(dir_search ${DIR_SEARCH_TERM}))
	CNT=$(arr_get_populated_count ${DIR_LIST})
	msg_box -c -t .75 "DIR_SEARCH found ${CNT} directory matches"

	#Find music files in DIR_LIST; Use TRACK_SEARCH_TERM as filter if supplied
	for D in ${DIR_LIST};do
		if [[ ${TRACK_SEARCH} == 'true' ]];then
			msg_box -c -t .75 "Scanning for tracks within matched directories matching \"${TRACK_SEARCH_TERM}\""
			RAWLIST=("${(f)$(find ${D} -type f -iregex ".*${TRACK_SEARCH_TERM}.*${AUDIO_FILES}" 2>/dev/null)}")
			CNT=$(arr_get_populated_count ${RAWLIST})
			msg_box -c -t .75 "TRACK_SEARCH matched ${CNT} tracks"
		else
			msg_box -c -t .75 "Scanning for tracks within matched directories..."
			RAWLIST=("${(f)$(find ${D}  -type f -iregex ".*${AUDIO_FILES}" 2>/dev/null)}")
			CNT=$(arr_get_populated_count ${RAWLIST})
			msg_box -c -t .75 "DIR_SEARCH matched ${CNT} tracks"
		fi
	done
else
	if [[ ${TRACK_SEARCH} == 'true' ]];then
		msg_box -c -t .75 "Scanning for files in all music directories matching \"${TRACK_SEARCH_TERM}\""
		for D in ${MUSIC_DIRS};do
			RAWLIST+=("${(f)$(find ${D} -type f -iregex ".*${TRACK_SEARCH_TERM}.*${AUDIO_FILES}" 2>/dev/null)}")
		done
		CNT=$(arr_get_populated_count ${RAWLIST})
		msg_box -c -t .75 "TRACK_SEARCH matched ${CNT} tracks in default music directories"
	else
		#DIR_SEARCH and TRACK_SEARCH are false: search current dir
		msg_box -c -t .75 "Scanning for files in current directory..."
		RAWLIST+=("${(f)$(find . -maxdepth 1 -type f -iregex ".*${AUDIO_FILES}" 2>/dev/null)}")
		CNT=$(arr_get_populated_count ${RAWLIST})
		msg_box -c -t .75 "Matched ${CNT} tracks in the current directory"
	fi
fi

if [[ ${#RAWLIST} -eq 0 && ${DIR_SEARCH} == 'false' && ${TRACK_SEARCH} == 'false' ]];then
	#SEARCH MUSIC_DIRS for all files
	msg_box -c -t .75 "Scanning for files in all music"
	for D in ${MUSIC_DIRS};do
		RAWLIST+=("${(f)$(find ${D} -type f -iregex ".*${AUDIO_FILES}" 2>/dev/null)}")
	done
	CNT=$(arr_get_populated_count ${RAWLIST})
	msg_box -c -t .75 "MUSIC_DIR matched ${CNT} tracks in default music directories"
fi

if [[ ${#RAWLIST} -gt 0 ]];then
	for ((L=1; L <= ${#RAWLIST}; L++));do
		[[ -z ${RAWLIST[${L}]} ]] && continue
		if [[ ${RAWLIST[${L}]} =~ '#' ]];then #catch any problamatic file names
			[[ ${VERBOSE} == 'true' ]] && msg_box -p "Warning: File names with embedded pound signs (#) are not compatible|Skipping ${RAWLIST[${L}]}|Press any key"
			continue
		fi
		[[ ${RAWLIST[${L}]:h} == '.' ]] && RAWLIST[${L}]=$(realpath ${RAWLIST[${L}]})
	done
fi
#-- End_Dir_and_File_Search --#

#Build listing
local R
NDX=0
if [[ ${#RAWLIST} -gt 0 ]];then
	RAWLIST=(${(o)RAWLIST}) #sort unique tracks
	for R in ${(o)RAWLIST};do
		((NDX++))
		printf "\rProcessing:${WHITE_FG}%s${RESET} of ${#RAWLIST}" ${NDX} >&2
		[[ ${R:h:l} =~ 'iphone' ]] && continue
		[[ ${R:h:l} =~ 'flashcards' ]] && continue
		HEAD_TAIL[$(str_to_hex ${R:t})]=$(str_to_hex ${R:h})
	done
fi

#Assign indexes to all tracks
local K
NDX=0
for K in ${(Oak)HEAD_TAIL};do
	((NDX++))
	TRACK_NDX[${NDX}]=${K} #track is key of HEAD_TAIL
done

#Assign indexes to all paths
local K
NDX=0
for K in ${(Oak)HEAD_TAIL};do
	((NDX++))
	PATH_NDX[${NDX}]=${HEAD_TAIL[${K}]} #path is value of HEAD_TAIL
done

LIST=(${(ov)TRACK_NDX})

if [[ ${DEBUG} == 'true' ]];then 
	echo 
	echo "${WHITE_FG}    RAWLIST COUNT${RESET}=${#RAWLIST}"
	echo "${WHITE_FG}  HEAD_TAIL COUNT${RESET}=${#HEAD_TAIL}"
	echo "${WHITE_FG}  TRACK_NDX COUNT${RESET}=${#TRACK_NDX}"
	echo "${WHITE_FG}   PATH_NDX COUNT${RESET}=${#PATH_NDX}"
	echo "${WHITE_FG} FINAL LIST COUNT${RESET}=${#LIST}"
	echo "${WHITE_FG}    ALT_MUSIC_DIR${RESET}=${ALT_MUSIC_DIR}"
	echo "${WHITE_FG}          _PLAYER${RESET}=${_PLAYER}"
	echo "${WHITE_FG}     _PLAYER_TYPE${RESET}=${_PLAYER_TYPE}"
	echo "${WHITE_FG}      PLAYER_OPTS${RESET}=${PLAYER_OPTS}"
	echo "${WHITE_FG}  DIR_SEARCH_TERM${RESET}=${DIR_SEARCH_TERM}"
	echo "${WHITE_FG}TRACK_SEARCH_TERM${RESET}=${TRACK_SEARCH_TERM}"
	echo "${WHITE_FG}      AUDIO_FILES${RESET}=${AUDIO_FILES}"
	echo "${WHITE_FG}      REPEAT_PLAY${RESET}=${REPEAT_PLAY}"
	echo "${WHITE_FG}      RANDOM_PLAY${RESET}=${RANDOM_PLAY}"
	echo "DEBUG pausing execution...waiting for keypress"
	read

	local NDX=0
	local Z
	for Z in ${(k)HEAD_TAIL};do
		((NDX++))
		printf "${WHITE_FG}%04d${RESET}) ${WHITE_FG}KEY${RESET}:%-80s ${WHITE_FG}VAL${RESET}:%-80s\n" ${NDX} "${Z[1,80]}" "${${HEAD_TAIL[${Z}]}[1,80]}"
	done>>debug.out
fi

[[ ${#LIST} -eq 0 ]] && exit_leave "No tracks found ${TYPE_MSG}"

if [[ ${DIR_SEARCH} == 'true' ]];then
	SEARCH_DESC+="${E_RESET}Dir:${E_WHITE_FG}\"${DIR_SEARCH_TERM}\"${E_RESET}"
	[[ ${TRACK_SEARCH} == 'true' ]] && SEARCH_DESC+="Track:${E_WHITE_FG}\"${TRACK_SEARCH_TERM}\"${E_RESET}"
elif [[ ${TRACK_SEARCH} == 'true' ]];then
	SEARCH_DESC+="${E_RESET}Title:\"${E_WHITE_FG}${TRACK_SEARCH_TERM}${E_RESET}\""
elif [[ -z ${SEARCH_DESC} ]];then
	SEARCH_DESC+="${E_RESET}${E_WHITE_FG}None${E_RESET}"
fi

#TODO Toggle buttons not working for FG/BG repeat random
playit_set_header

#set line item
list_set_line_item ' 
printf "${BOLD}${GREEN_FG}%4s${RESET}) ${BAR}${SHADE}%s - %s${RESET}\n" ${ARRAY_NDX} "$(str_from_hex ${LIST[${ARRAY_NDX}]})" "$(get_extra_info ${ARRAY_NDX})"
'
list_set_action_msgs play track
list_set_prompt "Enter track(s) to queue, <f>oreground <r>epeat <z>random:"
list_set_client_warn true

while true;do
	#get selection
	list_cursor_select ${LIST}
	[[ ${?} -eq 0 ]] && break
	
	MARKED=($(list_get_selected))
	
	if [[ ${#MARKED} -ne 0 ]];then
		action_do ${MARKED}
	fi
done

exit_leave
