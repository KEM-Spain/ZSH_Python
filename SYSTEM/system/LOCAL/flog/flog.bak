#!/usr/bin/zsh
BOLD="\033[1m"
RESET="\033[m"
RED_FG="\033[31m"
RED_BG="\033[41m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
WHITE_FG="\033[37m"

#Constants
LOG_DIR=/var/log
LIB=/usr/local/lib

#Declarations
typeset -a FILES
typeset -a SORTED_LIST
typeset -a LIST
typeset -A RAWLIST

#Imports
zmodload -F zsh/stat b:zstat
source ${LIB}/common.zsh

#Functions
action_do () {
	local -a MARKED=(${@})
	local M
	local APP
	local ARGS

	APP=/usr/bin/vim
	ARGS=$(echo "${APP} $(list_quote_marked_elements ${MARKED})")
	eval "${ARGS}"
	[[ ${?} -ne 0 ]] && msg_box -p "<B><I>${0}: ${APP} returned an error<N>| |Press any key..."

	for M in ${MARKED};do
		[[ ${M} -eq 0 ]] && continue
		MARKED[${M}]=0
		list_set_selected ${M} ${_GHOST_ROW}
	done
}

action_warn () {
	local MARKED=(${@})
	local CNT=$(list_get_selected_count ${MARKED})
	local M
	
	msg_box -p "<I>Pending Action<N>|==============| |${CNT} $(str_pluralize item $CNT) queued for viewing.| |<B>View? (y/n)<N>"
	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${MARKED};do
			list_remove_selected ${M}
		done
	fi
}

item_decorate () {
	local NDX=$1

	case ${_LIST_SELECTED[${NDX}]} in
		2) echo -n "${E_STRIKE}${E_RED_FG}${LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}viewed${E_RESET}";;
		*)	tput el;echo -n ${LIST[${NDX}]:t};;
	esac
}

search () {
	local SEARCHTERM=${1}
	local L
	local -a LOGS

	LOGS=("${(f)$(sudo find ${LOG_DIR} -maxdepth 4 2>/dev/null)}")
	for L in ${LOGS};do
		[[ ! $(file ${L}) =~ 'text' ]] && continue
		sudo grep -qi ${SEARCHTERM} <${L}
		if [[ $? -eq 0 ]];then
			LIST+=${L}
		fi
	done

	echo "${LIST[@]}"
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}
parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		i) echo "<INT>";;
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	exit_visible
	tabs 6
	echo -e "\n${WHITE_FG}Usage${RESET}: ${SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [SEARCHTERM]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-d $(opt_type i)${RESET} max age of log in days"
	echo -e "\n${WHITE_FG}DESC${RESET}:\tSearch for recently modified logs\n\tA searchterm may be added to narrow search"
	exit_leave
}

OPTSTR=":HDd:"

DEBUG=false
DAYS_OLD=0

OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) DEBUG=true;;
     d) DAYS_OLD=${OPTARG};;
     :) print -u2 "${SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${SCRIPT}: unknown option -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--
 
#Execution
[[ ${DEBUG} == 'false' ]] && do_smcup
SEARCHTERM=${1}

[[ ${DAYS_OLD} -gt 0 ]] && MTIME=-$(($DAYS_OLD +1)) || MTIME=0 #adjust MTIME to go back in time if not 0 (today)

if [[ ${DAYS_OLD} -eq 0 ]];then
	HEADER="${BOLD}${RED_FG}Logs modified today${RESET}"
else
	HEADER="${BOLD}${RED_FG}Logs modified within the last ${WHITE_FG}${DAYS_OLD}${RED_FG} days${RESET}"
fi

if [[ -n ${SEARCHTERM} ]];then
	FILES=($(search ${SEARCHTERM}))
	FILTER=${SEARCHTERM}
else
	FILES=($(sudo find ${LOG_DIR} -daystart -type f -mtime ${MTIME} | grep -Ev 'gz|[0-9]$|old' | sort))
	FILTER=none
fi

for F in ${FILES};do
	[[ ! $(file ${F}) =~ 'text' ]] && continue #omit non text files from list
	RAWLIST[$F]+=$(zstat -F "%s" +mtime ${F})
done

SORTED_LIST=($(for K in ${(k)RAWLIST};do echo "${RAWLIST[$K]}|${K}";done | sort -rn)) #sort desc numerically

for K in ${SORTED_LIST};do
	VAL=$(echo ${K} | cut -d'|' -f2)
	LIST+=$VAL
done

#Abort if SEARCH failed
if [[ -n ${SEARCHTERM} ]];then
	if ! arr_is_populated;then
		exit_leave "${RED_FG}No matches for${RESET}: ${SEARCHTERM}"
	fi
fi

#set headings
list_set_header 'printf "${HEADER} Found:${WHITE_FG}%s${RESET} $(str_pluralize log ${#LIST})${RESET} Filter:${WHITE_FG}%s${RESET}\tPage:${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET}\tSelected:${WHITE_FG}%d${RESET}" ${#LIST} "${FILTER}" ${PAGE} ${MAX_PAGES} ${SELECTED_COUNT}'
list_add_header_break

#set line item
list_set_line_item ' 
printf "${BOLD}${GREEN_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${ARRAY_NDX} "$(item_decorate ${ARRAY_NDX})"
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select file(s) then <${GREEN_FG}ENTER${RESET}> to view (${ITALIC}or exit if none selected${RESET})."
list_set_action_msgs view log
list_set_client_warn true
list_set_clear_ghosts true

while true;do
	#get selection
	list_cursor_select ${LIST}
	[[ ${?} -eq 0 ]] && break

	#get selections
	MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -gt 1 ]];then
		action_warn ${MARKED} #warn if more than 1 selected
	fi

	if [[ ${_MSG_KEY} == "y" || $(list_get_selected_count) -eq 1 ]];then
		action_do ${MARKED}
	fi
done

exit_leave
