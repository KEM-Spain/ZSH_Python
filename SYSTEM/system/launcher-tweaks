#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _LAUNCHER_DESKTOP=()
typeset -a _DESKTOP_DIRS=()

# Constants
_DESKTOP_DIRS+="/usr/share/applications"
_DESKTOP_DIRS+="/var/lib/snapd/desktop/applications"

_LAUNCHER_DIR=/usr/local/bin/system/launchers
_ORIGINALS_DIR=/usr/local/bin/system/launchers/originals

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Functions
get_file_state () {
	local FN=${1} # Desktop file
	local SYSTEM_FILE_TIME=0
	local MARKER_TIME=0
	local STATE_MARKER=${_LAUNCHER_DIR}/.${FN:t}

	[[ -e ${STATE_MARKER} ]] && MARKER_TIME=$(<${STATE_MARKER}) # Get marker time

	# Modifier `(:A)` resolves any symbolic links
	SYSTEM_FILE_TIME=$(stat -c %Z ${FN}(:A)) # Get time of system file

	if [[ ${MARKER_TIME} -lt ${SYSTEM_FILE_TIME} ]]; then
		sudo touch ${FN} # Update system file time
		SYSTEM_FILE_TIME=$(stat -c %Z ${FN}) # File change time in seconds
		echo "${SYSTEM_FILE_TIME}" > ${STATE_MARKER} # Update marker
		echo "stale"
	else
		echo "current"
	fi
}

save_original_desktop () {
	local FN=${1} # Desktop file

	diff ${FN} ${_ORIGINALS_DIR}/${FN:t} >/dev/null 2>&1
	[[ ${?} -ne 0 ]] && sudo cp ${FN} ${_ORIGINALS_DIR} # Backup original system file if needed
}

update_exec_lines () {
	local FN=${1} # Desktop file
	local -a EXEC_LINES=("${(f)$(grep Exec= ${FN})}")
	local ARGS=''
	local APP_NAME=$(echo ${FN:t} | cut -d '_' -f2) 
	local CALL_LINE="${_LAUNCHER_DIR}/run_${FN:t:r}" # Tail minus file extension
	local NEW_LINE=''
	local E

	for E in ${EXEC_LINES};do
		ARGS=$(cut -s -d' ' -f2- <<<${E})
		[[ -n ${ARGS} ]] && NEW_LINE="${CALL_LINE} ${ARGS}" || NEW_LINE=${CALL_LINE}
		sudo sed -i "s#${E}.*#Exec=${NEW_LINE}#" ${FN}
	done
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Modify system desktop file to execute 
\ta custom launcher instead of the default
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DESKTOP_FILE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type d)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-f${RESET} force tweak"
	echo -e "${WHITE_FG}-s${RESET} simulation mode"
	echo -e "${WHITE_FG}-v${RESET} verbose output"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	echo ${PENDING_MSGS}
	exit_leave
}

OPTSTR=":HDfsv"
OPTIND=0

SIMULATE=false
FORCE=false
VERBOSE=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     f) FORCE=true;;
     s) SIMULATE=true;;
     v) VERBOSE=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ -n ${1} ]] && APP_ARG=${1} || APP_ARG=''

typeset -a LAUNCHERS=()
typeset -a LAUNCHER_LIST=()

LAUNCHERS=("${(f)$(find ${_LAUNCHER_DIR}/run_* -executable )}") # Launchers format: run_<APPNAME> (only executable)

# Get launchers
for L in ${LAUNCHERS};do
	if [[ -n ${APP_ARG} ]];then # If an arg was passed isolate target
		grep -qi ${APP_ARG} <<<${L}
		[[ ${?} -ne 0 ]] && continue || (LAUNCHER_LIST+=${L} && break)
	fi

	LAUNCHER_LIST+=${L} # All launchers
done

# Get matching desktop
for L in ${LAUNCHER_LIST};do
	APP_NAME=$(echo ${L:t} | cut -d '_' -f2) # Remove 'run_' prefix of launcher
	DESKTOPS=("${(f)$(find ${_DESKTOP_DIRS} -iname "*${APP_NAME}*" 2>/dev/null)}")

	HIT=false
	HIT_COUNT=0
	for D in ${DESKTOPS};do
		grep -qi "${APP_NAME}.desktop$" <<<${D}
		[[ ${?} -ne 0 ]] && continue
		[[ ${VERBOSE} == 'true' ]] && echo "Matched ${WHITE_FG}${D}${RESET} to ${CYAN_FG}${APP_NAME}${RESET}"
		_LAUNCHER_DESKTOP[${L}]=${D}
		HIT=true && ((HIT_COUNT++))
	done
	[[ ${HIT} == 'false' && ${VERBOSE} == 'true' ]] && echo "${RED_FG}Skipping file${RESET}:${WHITE_FG}${APP_NAME}${RESET} No desktop file found"
	[[ ${HIT_COUNT} -gt 1 ]] && exit_leave $(msg_exit E "${APP_NAME}:matched more than 1 desktop file")
done

# Scan desktop files for stale versions
for L in ${(ok)_LAUNCHER_DESKTOP};do
	DESKTOP_FILE=${_LAUNCHER_DESKTOP[${L}]}
	APP="${L:t:r}"

	[[ ${SIMULATE} == 'true' ]] && SIM_TAG="[${WHITE_FG}simulation${RESET}] " || SIM_TAG=''

	STATUS=$(get_file_state ${DESKTOP_FILE})
	[[ ${VERBOSE} == 'true' || ${SIMULATE} == 'true' ]] && printf "${SIM_TAG}[${WHITE_FG}%15s${RESET}] Desktop file:${CYAN_FG}%s/${WHITE_FG}%s${RESET} is $(boolean_color ${STATUS})%-10s${RESET}\n" ${0:t} ${DESKTOP_FILE:h} ${DESKTOP_FILE:t} ${STATUS}

	if [[ ${STATUS} == "stale" || ${FORCE} == 'true' ]];then
		if [[ ${SIMULATE} == 'true' ]];then
			[[ ${FORCE} == 'true' ]] && echo "${SIM_TAG} ${BOLD}${RED_FG}FORCE REQUEST${RESET}: update ${WHITE_FG}${L:r}${RESET} regardless of status"
			echo "${SIM_TAG} save_original_desktop ${DESKTOP_FILE}" # Backup original system file
		else
			[[ ${FORCE} == 'true' ]] && echo "${BOLD}${RED_FG}FORCE REQUEST${RESET}:updating ${WHITE_FG}${L:r}${RESET} regardless of status"
			save_original_desktop ${DESKTOP_FILE}
		fi

		if [[ ${SIMULATE} == 'true' ]];then
			echo "${SIM_TAG} Modifying \"Exec\" lines in desktop file${RESET}"
		else
			update_exec_lines ${DESKTOP_FILE}
			if [[ ${?} -eq 0 ]];then
				MSG=" was modified" && STATUS=SUCCESS
			else
				MSG=" was NOT modified" && STATUS=ERROR
			fi
			printf "${BOLD}%s${RESET} Desktop file:%s%s to call:${ITALIC}%s${RESET}\n" ${STATUS} ${DESKTOP_FILE} ${MSG} ${L}
		fi
	fi
done

