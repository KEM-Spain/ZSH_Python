#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Constants
_SCRIPT=${0:t}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Create zsh completion files for script options

Script options must be in expected format:
echo -e ${WHITE_FG}-H${RESET} help
echo -e ${WHITE_FG}-D${RESET} debug
echo -e ${WHITE_FG}-a${RESET} option a
echo -e ${WHITE_FG}-b${RESET} option b
echo -e ${WHITE_FG}-c${RESET} option c
echo -e ${WHITE_FG}DESC${RESET}
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {

	local MSGS=${@}

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})
	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-r${RESET} print the raw usage options text"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	echo "\n${MSGS}" >&2
	) >&2

	exit
}

typeset -a OPTIONS
OPTSTR=":HDr"
OPTIND=0
PRINT_RAW=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     r) PRINT_RAW=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
# Execution
[[ -z ${1} ]] && usage "Missing argument:$(opt_type f)"
FN=${1}

[[ ! -e ${FN} ]] && echo "${RED_FG}File not found${RESET}:${FN}" && exit

if [[ ${PRINT_RAW} == 'true' ]];then
	sed -n '/-H/,/DESC/p' ${FN} | grep -v 'DESC' 
else
	{
	echo "#compdef ${FN:t}"
	echo
	echo "_arguments \\"
	sed -n '/-H/,/DESC/p' ${FN} \
		| grep -v 'DESC' \
		| perl -pe 's/\{[^}]*\}//g;s/\$//g;s/\(opt_type..\)\s//g' \
		| perl -p -e 's/^.*\"(?=[-])//' \
		| sed "s/^/'/g" \
		| sed "s/^\(['][-].\) /\1\[/g" \
		| sed -e "s/[\x27\x22]$/\]\x27/g" \
		| sed -e "$ ! s/$/ \x5c/g" \
		| sed "/^['][^-]/d"
	} > _${FN:t}

	if [[ -e _${FN:t} ]];then
		echo "option completion file:${WHITE_FG}_${FN:t}${RESET} created"
		chmod 755 _${FN:t}
	else
		echo "${RED_FG}something wen't wrong${RESET}"
	fi
fi
