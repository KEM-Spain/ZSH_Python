#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Constants
_LOG=/tmp/${0:t}.log

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Request a window ID for given application or the current window
\tAn application is specified by a string fully or partially matching the window title
\tIf no string is passed, the application is assumed to be the terminal
\tReturn format:HEX ID|DEC ID|TITLE
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		a) echo "<APP_STRING>";;
		d) echo "<DIR>";;
		f) echo "<FILE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type a)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $(( OPTIND - 1 ))
#--End GetOpts--
 
# Execution
if [[ ${#} -eq 0 ]];then
	ID=$(xdotool getactivewindow)
	printf "0x%x|%d|Terminal" ${ID} ${ID} # Active window will be terminal is executed from command line
	exit_leave
else
	APP=${1}
fi

logit "Received request for APP:${APP} window id"

for X in {1..10};do
	PID=$(pgrep -i ${APP[1,15]}) # Limit string len to pgrep max allowed
	[[ -n ${PID} ]] && break
	sleep .1
done
[[ -z ${PID} ]] && echo "[${WHITE_FG}${0:t}${RESET}]: A PID for application:${WHITE_FG}${APP}${RESET} could ${RED_FG}${ITALIC}NOT${RESET} be detected" >&2 && exit 1

typeset -A SINGLE_WIN_APPS=(gnome-terminal 1 terminal 1 deluge 1 vlc 1 chrome 1 haruna 1 viber 1 pycharm 1)
typeset -a WIN_INFO

CYCLE=0
ID_CHANGE=0
ID_CNT=0
LAST_WID=?
MAX_CHANGES=3 # Some apps open preliminary windows and id's change - 3 changes should be sufficient
MAX_CYCLES=50 # Max attempts to get an id
STABLE_ID=12 # 12 iterations without a change of id should indicate a stable id
TIMEOUT=false
TITLE=''
WIN_INFO=''
HEX_ID=''
DEC_ID=''

while true;do
	((CYCLE++))
	[[ ${CYCLE} -ge ${MAX_CYCLES} ]] && TIMEOUT=true && break 

	WIN_INFO=$(wmctrl -lp | grep -i ${APP} | sort -r | head -1 | tr -s '[:space:]')
	if [[ -n ${WIN_INFO} ]];then
		WIN_ID=$(cut -d' ' -f1 <<<${WIN_INFO})
		TITLE=$(cut -d' ' -f4- <<<${WIN_INFO})
		logit "Got WIN_INFO:${WIN_INFO} WIN_ID:${WIN_ID} TITLE:${TITLE} for APP:${APP}"
		[[ ${LAST_WID} != ${WDW_ID} ]] && LAST_WID=${WDW_ID} && ((ID_CHANGE++)) && ID_CNT=0 # Different id
		[[ ${LAST_WID} == ${WDW_ID} ]] && ((ID_CNT++)) # Same id
		if [[ (${SINGLE_WIN_APPS[${APP}]} -eq 1) || (${ID_CHANGE} -ge ${MAX_CHANGES}) || (${ID_CNT} -ge ${STABLE_ID}) ]];then
			DEC_ID=$(printf "%d" ${WIN_ID})
			logit "Returning HEX_ID:${WIN_ID}, DEC_ID:${DEC_ID}, TITLE:${TITLE}"
			echo "${WIN_ID}|${DEC_ID}|${TITLE}"
			break
		fi
		[[ ${ID_CHANGE} -eq 0 ]] && TIMEOUT=true && break
	fi
	sleep .2
done 

if [[ ${TIMEOUT} == 'true' ]];then
	echo "[${WHITE_FG}${0:t}${RESET}]: Window ID for:${WHITE_FG}${APP} ${RED_FG}NOT${RESET} found" >&2 
	logit "Window ID NOT found for APP:${APP}"
	return 1
fi

return 0
