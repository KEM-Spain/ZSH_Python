#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Declarations
typeset -A APP_TAGS=(brave-browser brave com.obsproject.studio obs firefox_firefox firefox haruna_haruna haruna)
typeset -a WIN_INFO

# Constants
_LOG=/tmp/${0:t}.log
MAX_CYCLES=25 # Max attempts to get an id
MAX_CHANGES=3 # Some apps open preliminary windows and id's change - 3 changes should be sufficient
STABLE_ID=5 # iterations without a change of id should indicate a stable id

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Request a window ID for given application or the current window
\tAn application is specified by a string fully or partially matching the window title
\tIf no string is passed, the application is assumed to be the terminal
\tNote: Use HEX_ID for wmctrl, DEC_ID for xdotool
\tReturn format:HEX ID|DEC ID|TITLE
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		a) echo "<APP_STRING>";;
		d) echo "<DIR>";;
		f) echo "<FILE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type a)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-q${RESET} quiet mode"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HDq"
OPTIND=0

QUIET=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     q) QUIET=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $(( OPTIND - 1 ))
#--End GetOpts--
 
# Execution
if [[ ${#} -eq 0 ]];then
	ID=$(xdotool getactivewindow)
	printf "0x%x|%d|Terminal" ${ID} ${ID} # Active window will be terminal is executed from command line
	return 0
else
	APP=${1}
	logit ${_LOG} "Got APP:${APP}"
fi

# Handle any alternate tags
if [[ -n ${APP_TAGS[${APP:l}]} ]];then # Lowercase
	APP_TAG=${APP_TAGS[${APP:l}]}
	logit ${_LOG} "Got alternate APP_TAG:${APP_TAG} for APP:${APP}"
else
	APP_TAG=${APP:l}
fi

RETRIES=10
while true;do
	((NDX++))
	[[ ${NDX} -gt ${RETRIES} ]] && break
	WIN_INFO=$(wmctrl -l | grep -i ${APP_TAG} | sort -r | head -1 | tr -s '[:space:]')
	if [[ -n ${WIN_INFO} ]];then
		WIN_ID=$(cut -d' ' -f1 <<<${WIN_INFO})
		WIN_TITLE=$(cut -d' ' -f3- <<<${WIN_INFO})
		break
	fi
	sleep .2
done

if [[ -n ${WIN_ID} ]];then
	printf "%s|%d|%s" ${WIN_ID} ${WIN_ID} ${WIN_TITLE}
	return 0
else
	echo "Unable to locate WIN_ID for ${APP_TAG}"
	logit ${_LOG} "Failed to locate WIN_ID for ${APP_TAG}"
	return 1
fi

