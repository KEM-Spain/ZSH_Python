#!/usr/bin/zsh
# Vim: syntax off
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

E_BOLD=$(echo "\033[1m")
E_ITALIC=$(echo "\033[3m")
E_RESET=$(echo "\033[m")
E_REVERSE=$(echo "\033[7m")
E_STRIKE=$(echo "\033[9m")
E_UNDER=$(echo "\033[4m")

E_BLACK_FG=$(echo "\033[30m")
E_BLUE_FG=$(echo "\033[34m")
E_CYAN_FG=$(echo "\033[36m")
E_GREEN_FG=$(echo "\033[32m")
E_MAGENTA_FG=$(echo "\033[35m")
E_RED_FG=$(echo "\033[31m")
E_WHITE_FG=$(echo "\033[37m")
E_YELLOW_FG=$(echo "\033[33m")

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Declarations
typeset -A _SUMMARY
typeset -a _RAWLIST
typeset -a _LOCAL_LIST
typeset -a _MARKED=()
typeset -A _KNOWN_TYPES=(\
bak backup \
mscz musescore \
mscz, musescore-backup \
zip archive \
gz archive \
bz2 archive \
jar archive \
js javascript \
mkv video \
avi video \
mp4 video \
deb package \
tar package \
json data \
xml data \
swp vim-lock \
zsh zsh \
)

# Functions
file_type () {
	local FN=${1}
	local FILE_DESC

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} FN:${FN}"

	FILE_DESC=${_KNOWN_TYPES[${FN:e}]}

	if [[ -n ${FILE_DESC} ]];then
		[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} using value from known_types FILE_DESC:${FILE_DESC}"
		echo ${FILE_DESC}
	else
		FILE_DESC=$(file -b ${FN})
		[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} using info from file -b: FILE_DESC:${FILE_DESC}"

		case ${FILE_DESC:l} in
			*application*) echo "application";;
			*audio*) echo "audio";;
			*bak*) echo "backup";;
			*bourne*) echo "bash";;
			*composite*document*) echo "document";;
			*data*) echo "data";;
			*directory*) echo "directory";;
			*drawing*) echo "drawing";;
			*elf*) echo "elf";;
			*expect*) echo "expect";;
			*image*) echo "image";;
			*javascript*) echo "javascript";;
			*media*) echo "media";;
			*node*) echo "node";;
			*pdf*) echo "pdf";;
			*perl*) echo "perl";;
			*python*) echo "python";;
			*posix*) echo "sh";;
			*ruby*) echo "ruby";;
			*socket*) echo "(socket)";;
			*source*) echo "code";;
			*ssh*|*rsa*) echo "SSH-key";;
			*video*) echo "video";;
			*vim*swap*) echo "vim swap";;
			*xml*) echo "xml";;
			*zsh*) echo "zsh";;
			*empty*) echo "(empty-file)";;
			*binary*) echo "(binary)";;
			*no*read*) echo "(no-permissions)";;
			*script*) echo "script";;
			*text*) echo "text";;
			*link*) echo "link";;
			*) echo "undef:$(tr ' ' '_' <<<${FILE_DESC})";;
		esac
	fi
}

get_fn () {
	local NDX=${1}
	local FN
	local TYPE

	FN=$(cut -d'|' -f1 <<<${_LIST[${NDX}]:t})
	TYPE=$(cut -d'|' -f2 <<<${_LIST[${NDX}]})
	if [[ ${TYPE} == 'link' ]];then
		echo "$(realpath ${FN})"
	else
		echo ${FN}
	fi
}

get_type () {
	local NDX=${1}
	local FN
	local TYPE

	FN=$(cut -d'|' -f1 <<<${_LIST[${NDX}]:t})
	TYPE=$(cut -d'|' -f2 <<<${_LIST[${NDX}]})
	if [[ ${TYPE} == 'link' ]];then
		echo "$(type_color $(file_type $(realpath ${FN}))) $(type_color ${TYPE})"
	else
		echo ${TYPE}
	fi
}

item_decorate () {
	local NDX=${1}
	local TYPE

	TYPE=$(get_type ${NDX})

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} NDX:${NDX} TYPE:${TYPE}"

	echo "$(type_color ${TYPE} E)"
}

type_color () {
	local TYPE=${1}
	local STYLE=${2:=A}
	local COLOR
	local CTAG
	local CSTR

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} TYPE:${1} STYLE:${2}"

	case ${TYPE} in
		*application*) COLOR=CYAN;;
		*backup*) COLOR=RED;;
		*binary*) COLOR=RED;;
		*directory*) COLOR=CYAN;;
		*empty*) COLOR=WHITE;;
		*expect*) COLOR=MAGENTA;;
		*image*) COLOR=CYAN;;
		*javascript*) COLOR=GREEN;;
		*key*) COLOR=CYAN;;
		*link*) COLOR=WHITE;;
		*musescore*) COLOR=MAGENTA;;
		*musescore*back*) COLOR=BLUE;;
		*node*) COLOR=RED;;
		*permission*) COLOR=RED;;
		*socket*) COLOR=RED;;
		*undef*) COLOR=RED;;
		*video*) COLOR=MAGENTA;;
		*vim*) COLOR=RED;;
		archive) COLOR=RED;;
		audio) COLOR=RED;;
		bash) COLOR=GREEN;;
		code) COLOR=MAGENTA;;
		data) COLOR=MAGENTA;;
		document) COLOR=WHITE;;
		drawing) COLOR=CYAN;;
		elf) COLOR=BLUE;;
		media) COLOR=MAGENTA;;
		package) COLOR=GREEN;;
		pdf) COLOR=MAGENTA;;
		perl) COLOR=MAGENTA;;
		python) COLOR=CYAN;;
		ruby) COLOR=RED;;
		script) COLOR=GREEN;;
		text) COLOR=WHITE;;
		vim*swap*) COLOR=BLUE;;
		xml) COLOR=WHITE;;
		sh) COLOR=GREEN;;
		zsh) COLOR=GREEN;;
		*) COLOR=YELLOW;;
	esac

	if [[ ${STYLE} != 'A' ]];then # Use ansi with echo
		CTAG="E_${COLOR}_FG"
		CSTR="${BOLD}${(P)CTAG}${TYPE}${E_RESET}"
	else
		CTAG="${COLOR}_FG"
		CSTR="${BOLD}${(P)CTAG}${TYPE}${E_RESET}"
	fi

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} TYPE:${TYPE} COLOR:${COLOR}"

	echo ${CSTR}
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Show files by type
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		p) echo "<PATTERN>";;
		t) echo "<TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type p)] [<SEARCHTERM>]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-s${RESET} summarize types"
	echo -e "${WHITE_FG}-t${RESET} $(opt_type t) limit to file type"
	echo -e "${WHITE_FG}\nDesc${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

OPTSTR=":HDst:"

_SUMMARY_ONLY=false
TYPE_ONLY=false
OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     s) _SUMMARY_ONLY=true;;
     t) TYPE_ONLY=${OPTARG};;
     :) print -u2 "${_SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${_SCRIPT}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${#} -ne 0 ]] && SEARCHTERM=${1} || SEARCHTERM=''
[[ ${_DEBUG} -eq 0 ]] && do_smcup

RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FPATH=${FPATH:q}
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
PATHLBL=$(path_get_label 40)

[[ ${_DEBUG} -gt 0 ]] && echo "find ${FPATH} -maxdepth 1 ${FGLOB} ! -path ${FPATH}" | dbg
_RAWLIST=("${(f)$(eval "find ${FPATH} -maxdepth 1 ${FGLOB} ! -path ${FPATH}")}")

NDX=0
MAX_FN_LEN=0
MAX_DESC_LEN=0
for L in ${(on)_RAWLIST};do
	LINE=$(tr -cd '[:print:]' <<<${L})
	((NDX++))
	tput cup 0 0; tput el; printf "\rProcessing line ${WHITE_FG}%-d${RESET} of ${WHITE_FG}%-d${RESET} files ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_RAWLIST} $(( NDX * 100. / ${#_RAWLIST} )) >&2
	DESC=$(file_type ${L})
	[[ -n ${SEARCHTERM} && ! ${DESC} =~ ${SEARCHTERM} ]] && continue
	[[ ${TYPE_ONLY} != 'false' && ! ${DESC} =~ ${TYPE_ONLY} ]] && continue
	_LOCAL_LIST+=("${LINE}|${DESC}")
	if [[ -L ${L} ]];then # Links show fullpath
		RP=$(realpath ${L:t})
		[[ ${#RP} -gt ${MAX_FN_LEN} ]] && MAX_FN_LEN=${#RP}
	else
		[[ ${#L:t} -gt ${MAX_FN_LEN} ]] && MAX_FN_LEN=${#L}
	fi
	[[ ${#DESC} -gt ${MAX_DESC_LEN} ]] && MAX_DESC_LEN=${#DESC}
done

if [[ ${_DEBUG} -ge 4 ]];then
	for L in ${_LOCAL_LIST};do
		echo "_LOCAL_LIST: ${L}"
	done | dbg
fi

_LOCAL_LIST=("${(f)$(list_sort_flat _LOCAL_LIST 2 a ${_LIST_DELIM})}") # Forward sort default type asc

# Verify existence of data
if ! arr_is_populated "${_LOCAL_LIST}";then
	if [[ ${TYPE_ONLY} != 'false' ]];then
		exit_leave $(msg_exit W "No file types matched:${TYPE_ONLY}")
	else
		exit_leave $(msg_exit W "No known file types found")
	fi
fi

# Summary only (filtered for type if specified)
if [[ ${_SUMMARY_ONLY} == 'true' ]];then
	NDX=0
	LONGEST=0
	for L in ${_LOCAL_LIST};do
		((NDX++))
		TYPE=$(cut -d'|' -f2 <<<${L})
		[[ ${#TYPE} -gt ${LONGEST} ]] && LONGEST=${#TYPE}
		if [[ -z ${_SUMMARY[${TYPE}]} ]];then
			_SUMMARY[${TYPE}]=1
		else
			_SUMMARY[${TYPE}]=$(( ${_SUMMARY[${TYPE}]} +1 ))
		fi
	done

	printf "\n\n%13s ${BOLD}${CYAN_FG}%9s %-5s${RESET}\n" "" "File Type" "Count"
	printf "%13s ${WHITE_FG}%9s %-5s${RESET}\n" "" "---------" "-----"
	for K in ${(ok)_SUMMARY};do
		printf "%35s:${WHITE_FG}%-5d${RESET}\n" "$(type_color ${K} E)" ${_SUMMARY[${K}]}
	done
	printf "\nPress any key to continue..."
	read -sk1

	exit_leave 
fi

# Set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize file ${#_LIST}) Path:${WHITE_FG}%-*s${RESET} ${_PG}" ${#_LIST} ${#PATHLBL} "${PATHLBL}"'
list_set_header 'printf " "'
list_set_header 'printf "%*s %-*s  %-*s" 5 "" ${MAX_FN_LEN} "File" ${MAX_DESC_LEN} "Type"'
list_set_header 'printf "%*s ${MAGENTA_FG}%-*s  %*s${RESET}" 5 "" ${MAX_FN_LEN} "$(str_unicode_line ${MAX_FN_LEN})" ${MAX_DESC_LEN} "$(str_unicode_line ${MAX_DESC_LEN})"'

# Set line item
list_set_line_item '
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${BAR}%-*s  %*s${RESET}\n" ${_LIST_NDX} ${MAX_FN_LEN} "$(get_fn ${_LIST_NDX})" ${MAX_DESC_LEN} "$(item_decorate ${_LIST_NDX})"
'
list_set_key_msg '
printf "Press ${WHITE_FG}Home End PgUp PgDn, <${GREEN_FG}Enter${RESET}>${RESET} or <${WHITE_FG}q${RESET}>uit${RESET}"
'
list_set_key_msg '
printf "Press ${WHITE_FG}Home End PgUp PgDn, <${GREEN_FG}Enter${RESET}>${RESET} or <${WHITE_FG}q${RESET}>uit${RESET}, <${WHITE_FG}s${RESET}>ort columns"
'
list_set_prompt " "
list_set_action_msgs delete file
list_set_barlines true
list_set_selectable false
list_set_sortable true
list_set_max_sort_col 2

while true;do
	# Get selection
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break
done

exit_leave
