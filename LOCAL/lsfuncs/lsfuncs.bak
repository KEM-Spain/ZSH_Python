#!/usr/bin/zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
BOLD="\033[1m"

# Constants
_LIB_DIR=/usr/local/lib
FUNC_REGEX='^\S*\s() {$\|^function\s*\S*\s{$'
GREP_BLACKLIST='usage\|parse_opts\|opt_type'

# Declarations
typeset -aU _LOCAL_LIST
typeset -a _BLACKLIST=(usage\|parse_opts\|opt_type)
typeset -aU _FUNC_MATCH

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local -a MARKED=(${@})
	local -a FUNCTIONS
	local F
	local M
	local NDX=0

	for M in ${(on)MARKED};do
		((NDX++))
		for F in ${_FUNC_MATCH};do
			grep -q ${F} ${_LIST[${M}]}
			[[ ${?} -eq 0 ]] && FUNCTIONS+=$(cut -d '(' -f1 <<<${F})
		done
		if [[ ${NO_PROMPTS} == 'true' ]];then
			for F in ${FUNCTIONS};do
				func_print ${_LIST[${M}]} ${F}
			done | less -S -P "Viewing functions within\:$(sed 's/\./\\./' <<<${_LIST[${M}]})" # Less hides dots in prompt - must escape
		else
			[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Calling msg_box with: ${#FUNCTIONS} lines"
			msg_box -H2 -P"Show function code (y/n)?" -cp "File:<w>${_LIST[${M}]}<N> (<w>${NDX}<N> of <w>${#MARKED}<N>)|Functions:<w>${#FUNCTIONS}<N>|$(msg_list ${(o)FUNCTIONS})"
			if [[ ${_MSG_KEY} == 'y' ]];then
				for F in ${FUNCTIONS};do
					func_print ${_LIST[${M}]} ${F}
				done | less -S -P "Viewing functions within\:$(sed 's/\./\\./' <<<${_LIST[${M}]})" # Less hides dots in prompt - must escape
			fi
			FUNCTIONS=()
		fi
	done
 
	for M in ${MARKED};do
		MARKED[${M}]=0
		list_set_selected ${M} ${_GHOST_ROW} # Mark as complete
	done
}

str_rep () {
	local CHAR=${1}
	local LENGTH=${2}
	local X
	local LINE

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} ${WHITE_FG}\nEntered${RESET}:${0} with [${@}]"

	LINE=''
	for ((X=0;X < ${LENGTH};X++));do
		LINE=${LINE}''${CHAR}
	done
	echo ${LINE}
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Displays functions within script file(s)
\t<PATH> can be fully qualified
\tIf <PATH> is only a file name, current dir will be assumed
\t<SEARCHTERM> - limit to function names containing <SEARCHTERM>
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		p) echo "<PATH>";;
		s) echo "<SEARCHTERM>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type p)] [$(opt_type s)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-n${RESET} no prompting"
	echo -e "${WHITE_FG}-a${RESET} no ansi (pertains to print options only)"
	echo -e "${WHITE_FG}-l${RESET} print list of files/functions (<SEARCHTERM> may apply)"
	echo -e "${WHITE_FG}-f${RESET} print functions in files (<SEARCHTERM> may apply)"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HDanlf"

OPTIND=0

PRINT_LIST=false
PRINT_FUNCS=false
NO_PROMPTS=false
NO_ANSI=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     a) NO_ANSI=true;;
     n) NO_PROMPTS=true;;
     l) PRINT_LIST=true;;
     f) PRINT_FUNCS=true;;
     :) print -u2 "${_SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${_SCRIPT}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FPATH=${FPATH:q}
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
PATHLBL=$(path_get_label 40)

[[ ${#} -ge 1 ]] && ARG_1=${1} || ARG_1=''
[[ ${#} -ge 2 ]] && ARG_2=${2} || ARG_2=''

# Verify path/file if passed
if [[ ${#} -eq 0 ]];then # No args - PWD
	HDR_MSG="Showing all files in:${WHITE_FG}${PWD}${RESET}"
elif [[ ${#} -ge 1 ]];then # Either a path, file, or searchterm
	PATH_ARG=''
	if [[ -d ${ARG_1} ]];then # Dir?
		PATH_ARG=${1}
		HDR_MSG="Showing all files in path:${WHITE_FG}$(realpath ${PATH_ARG})${RESET}"
		FPATH=${PATH_ARG:q}
	fi

	FEXE=''
	FILE_ARG=''
	if [[ -z ${PATH_ARG} ]];then # File?
		[[ -f ${ARG_1} ]] && FILE_ARG=${ARG_1} && FPATH=${FILE_ARG:h} && FGLOB="-name ${FILE_ARG:t}" && PATHLBL=${FPATH}
		[[ -z	${FILE_ARG} ]] && FEXE=$(fut findexe ${ARG_1}) # Possible file but not in PWD
		[[ -f ${FEXE} ]] && FILE_ARG=${FEXE} && FPATH=${FILE_ARG:h} && FGLOB="-name ${FILE_ARG:t}" && PATHLBL=${FPATH}
		[[ -n ${FILE_ARG} ]] && HDR_MSG="Showing functions in file:${WHITE_FG}${FILE_ARG:t}${RESET}"
	fi

	SEARCHTERM=''
	if [[ -z ${PATH_ARG} && -z ${FILE_ARG} ]];then # Searchterm?
		SEARCHTERM=${1}
		HDR_MSG="Showing files in:${WHITE_FG}${PWD}${RESET} with functions matching:${WHITE_FG}${SEARCHTERM}${RESET}"
	fi
fi

if [[ -n ${ARG_2} ]];then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ARG_2:${ARG_2}"

	[[ -z ${PATH_ARG} && -z ${FILE_ARG} ]] && usage "Invalid file or path:${ARG_1}" # Abort

	SEARCHTERM=${ARG_2} # Searchterm following a valid path or file

	if [[ -n ${PATH_ARG} ]];then
		HDR_MSG="Showing files in path:${WHITE_FG}$(realpath ${PATH_ARG})${RESET} with functions matching:${WHITE_FG}${SEARCHTERM}${RESET}"
	elif [[ -n ${FILE_ARG} ]];then
		HDR_MSG="Showing functions matching:${WHITE_FG}${SEARCHTERM}${RESET} in file:${WHITE_FG}${FILE_ARG}${RESET}"
	fi
fi

if [[ ${_DEBUG} -gt 0 ]];then
	dbg "${0}:${LINENO} ARG_1:${ARG_1}"
	dbg "${0}:${LINENO} PATH_ARG:${PATH_ARG}"
	dbg "${0}:${LINENO} FILE_ARG:${FILE_ARG}"
	dbg "${0}:${LINENO} FEXE:${FEXE}"
	dbg "${0}:${LINENO} SEARCHTERM:${SEARCHTERM}"
	dbg "${0}:${LINENO} FPATH:${FPATH}"
	dbg "${0}:${LINENO} FGLOB:${FGLOB}"
fi

[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Searching FPATH:${FPATH}"
[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} find ${FPATH} -maxdepth 1 -type f ${FGLOB} ! -path ${FPATH}"

[[ ! -e ${FPATH} ]] && exit_leave $(msg_exit E "PATH:${FPATH} not found")

RAWLIST=("${(f)$(eval "find ${FPATH} -maxdepth 1 -type f ${FGLOB} ! -path ${FPATH}")}")
[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} RAWLIST:${#RAWLIST}"

if ! arr_is_populated "${RAWLIST}";then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} empty RAWLIST - no files found - exit"
	exit_leave $(msg_exit E "File not found: RAWPATH:${RAWPATH} FPATH:${FPATH} FGLOB:${FGLOB}")
fi

HIT=false
for R in ${(o)RAWLIST};do
	[[ ! $(file ${R}) =~ 'script' && ${R:e} != 'zsh' ]] && continue # Only zsh script files
	HIT=true
	[[ ${R:h} == \. ]] && FN=${R:t} || FN=${R} # Cut path for pwd

	FUNC_LIST=("${(f)$(grep -P '^\S*\s\(\) {' ${FN})}")
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} FUNC_LIST:${#FUNC_LIST}"
	
	for F in ${FUNC_LIST};do
		[[ ${F} =~ ${_BLACKLIST} ]] && continue
		if [[ ${SEARCHTERM:=null} != 'null' ]];then
			if [[ ${F} =~ ${SEARCHTERM} ]];then
				_FUNC_MATCH+=${F} # Matching <SEARCHTERM>
				_LOCAL_LIST+=${FN}
			fi
		else
			_FUNC_MATCH+=${F} # All functions
			_LOCAL_LIST+=${FN}
		fi
	done
done

[[ ${HIT} == 'false' ]] && usage "No eligible files found"

[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _LOCAL_LIST:${#_LOCAL_LIST}"

if ! arr_is_populated "${_LOCAL_LIST}";then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} empty _LOCAL_LIST - exit"
	if [[ -n ${SEARCHTERM} ]];then
		exit_leave $(msg_exit I "No function matches:${SEARCHTERM}")
	elif [[ -n ${FILE_ARG} ]];then
		exit_leave $(msg_exit I "No functions found in:${FILE_ARG}")
	fi
fi

if [[ ${NO_ANSI} == 'true' ]];then
	C='' && R=''
else
	C=${WHITE_FG} && R=${RESET}
fi

if [[ ${PRINT_LIST} == 'true' ]];then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} PRINT_LIST - print list of functions - exit"
	[[ ${_SMCUP} == 'true' ]] && do_rmcup
	for L in ${_LOCAL_LIST};do
		echo "File:${C}${L}${R}"
		for M in ${_FUNC_MATCH};do
			grep -q ${M} ${L}
			if [[ ${?} -eq 0 ]];then
				echo "	Function:${C}${M}${R}"
			fi
		done
	done
	exit_leave
fi

if [[ ${PRINT_FUNCS} == 'true' ]];then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} PRINT_FUNCS - print function text - exit"
	[[ ${_SMCUP} == 'true' ]] && do_rmcup
	for L in ${_LOCAL_LIST};do
		for M in ${_FUNC_MATCH};do
			grep -q ${M} ${L}
			if [[ ${?} -eq 0 ]];then
				FUNC=$(cut -d '(' -f1 <<<${M})
				func_print ${L} ${FUNC}
			fi
		done
	done
	exit_leave
fi

[[ ${_DEBUG} -eq 0 ]] && do_smcup

if [[ -n ${FILE_ARG} ]];then # Process a single file arg directly
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} FILE_ARG:${FILE_ARG} process file - exit"
	_LIST=(${_LOCAL_LIST})
	action_do 1
	exit_leave
fi

# set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize file ${#_LIST})  Path:${WHITE_FG}%-*s${RESET} Selected:${WHITE_FG}%-d${RESET}  ${_PG}" ${#_LIST} ${#PATHLBL} "${PATHLBL}" ${SELECTED_COUNT}'
list_set_header 'printf "${CYAN_FG}%s${RESET}" ${HDR_MSG}'
list_add_header_break

# set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${_LIST_NDX} ${_LIST[${_LIST_NDX}]}
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select file(s) then <${GREEN_FG}ENTER${RESET}> to view function(s) ${ITALIC}or exit if none selected${RESET}"
list_set_clear_ghosts true
list_set_client_warn true

while true;do
	# Input selections
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break

	# Store selections
	MARKED=($(list_get_selected))
	
	# Process selections
	[[ ${#MARKED} -ne 0 ]] && action_do ${MARKED}
done

exit_leave
