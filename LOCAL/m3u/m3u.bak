#!/usr/bin/zsh

# Declarations
typeset -a LIST
typeset -a PLAYLIST
typeset -Z 3 NDX 

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/ARRAY.zsh
source ${_LIB_DIR}/TPUT.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Generate m3u playlist
Input has 3 forms:
1) Piped input of fully qualified file names
2) File containing fully qualified file names
3) Directory containing files
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[A-Za-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<TRACK_DIR>";;
		t) echo "<TRACK_FILE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${OPTS}\n"
   echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-d${RESET} directory to locate tracks. Default is PWD"
	echo -e "${WHITE_FG}-t${RESET} file containing file names of playlist tracks"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

#--Execution--
# Read file names stdin
PIPED=false
if [[ ! -t 0 ]];then
	PIPED=true
	while read LINE;do
		LIST+="${LINE}"
	done
	if arr_is_populated "${LIST}";then
		for L in ${LIST};do
			if [[ $(file ${L}) =~ '(media|audio)' ]];then # Supplied name is fully qualified and valid
				[[ ${L:e} == 'jpg' ]] && continue # No cover files
				PLAYLIST+=${L}
			fi
		done
	else
		exit_leave "${_SCRIPT_TAG} ${RED_FG}No valid tracks found${RESET}:${TRACK_FN}"
	fi
fi

if [[ ${PIPED} == 'false' ]];then
	if [[ -n ${TRACK_FN} ]];then
		if [[ -e ${TRACK_FN} ]];then # Read file names from file
			echo "Reading file names from:${WHITE_FG}${TRACK_FN}${RESET}"
			while read LINE;do
				LIST+="${LINE}"
			done < ${TRACK_FN}
		else
			exit_leave "${_SCRIPT_TAG} ${RED_FG}File not found${RESET}:${TRACK_FN}"
		fi
		if arr_is_populated "${LIST}";then
			for L in ${LIST};do
				if [[ $(file ${L}) =~ '(media|audio)' ]];then # Supplied name is fully qualified and valid
					[[ ${L:e} == 'jpg' ]] && continue # No cover files
					PLAYLIST+=${L}
				fi
			done
		else
			exit_leave "${_SCRIPT_TAG} ${RED_FG}No valid tracks found${RESET}:${TRACK_FN}"
		fi
	else
		LIST=("${(f)$(find ${TRACK_DIR} -maxdepth 1 -type f)}")
		for L in ${LIST};do
			if [[ $(file ${L}) =~ '(media|audio)' ]];then # Supplied name is fully qualified and valid
				[[ ${L:e} == 'jpg' ]] && continue # No cover files
				PLAYLIST+=${L}
			fi
		done
	fi
fi

if [[ -z ${PLAYLIST} ]];then
	if [[ ${PIPED} == 'true' ]];then
		echo "${_SCRIPT_TAG} ${BOLD}${RED_FG}No valid track files found${RESET} - ${WHITE_FG}no playlist generated${RESET}."
		echo "${_SCRIPT_TAG} Supplied tracks must be fully qualified file names"
		echo "${_SCRIPT_TAG} <TRACK_DIR>:${WHITE_FG}${TRACK_DIR}${RESET}"
		echo "${_SCRIPT_TAG} Ensure <TRACK_DIR> is pointing to the proper location"
		usage
	fi
fi

if arr_is_populated "${PLAYLIST}";then
	echo "#EXTM3U" # Generate m3u playlist
	NDX=0
	for P in ${PLAYLIST};do
		((NDX++))
		echo "#EXTINF:${NDX},${P:t:r}"
		echo ${P} 
	done
else
	usage
fi

exit_leave
