#!/usr/bin/zsh
REVERSE="\033[7m"
RESET="\033[m"
BOLD="\033[1m"
BLACK_FG="\033[30m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
STRIKE="\033[9m"
ITALIC="\033[3m"
UNDER="\033[4m"

# Constants
_LIB_DIR=/usr/local/lib
_DEPTH=1

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/ARRAY.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/STR.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
depth_set_level () {
	((_DEPTH++))
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Find files and/or directories in or below the current directory
\tNOTE: -r is a convenience regex and accepts one or more plain 
\tchars to find files in the current dir. It can also 
\tcontain additional regex syntax (quoted) but is still limited 
\tto files in the current dir. -R is a generic regex and is unlimited.
\tIf regex -[rR] not passed then <SEARCHTERM> is used to match files
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		s) echo "<SEARCHTERM>";;
		t) echo "<OBJ_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type s)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug; when repeated increases level"
	echo -e "${WHITE_FG}-d${RESET} depth; when repeated increases depth"
	echo -e "${WHITE_FG}-f${RESET} path (default pwd)"
	echo -e "${WHITE_FG}-l${RESET} add listing detail"
	echo -e "${WHITE_FG}-r${RESET} arg is a 'regex' (PWD)"
	echo -e "${WHITE_FG}-R${RESET} arg is a 'regex' (ANY)"
	echo -e "${WHITE_FG}-t $(opt_type t)${RESET} (f)ile|(d)ir  Default:${WHITE_FG}both${RESET}"
	echo -e "${WHITE_FG}\nDesc${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_err ${PENDING_MSGS})
}

typeset -a OPTIONS

LISTING=false
TYPE="f"
OPTIND=0
REGEX=''
FIND_PATH=${PWD}

OPTSTR=":HDdp:lr:t:"

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     d) depth_set_level;;
     l) LISTING=true;;
     p) FIND_PATH=${OPTARG};;
     r) REGEX="${OPTARG}";;
     t) TYPE="${OPTARG}";;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
MAXDEPTH=${_DEPTH}

INAME=${1}
INAME="${INAME}*"
INAME=${(qqq)INAME}
REGEX=${REGEX:='.*'}
REGEX=${(qqq)REGEX}

[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} LISTING:${LISTING}\nMAXDEPTH:${MAXDEPTH}\nREGEX:${REGEX}\nOBJ_TYPE:${OBJ_TYPE:-both}"
CMD="sudo find ${FIND_PATH} -maxdepth ${MAXDEPTH} -iname ${INAME} -regex ${REGEX} -type ${TYPE}"
echo "${WHITE_FG}Command${RESET}: sudo find ${WHITE_FG}${FIND_PATH}${RESET} -maxdepth ${WHITE_FG}${MAXDEPTH}${RESET} -iname ${WHITE_FG}${INAME}${RESET} -regex ${WHITE_FG}${REGEX}${RESET} -type ${WHITE_FG}${TYPE}${RESET}"

LIST=("${(f)$(eval ${CMD})}")
if ! arr_is_populated "${LIST}" ;then
	exit_leave $(msg_warn "No results for query")
fi

[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} CMD:${CMD}"
[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} LIST COUNT:${#LIST}"

if [[ ${LISTING} == 'true' ]];then
	ls -lAdrt ${LIST}
else
	for L in ${LIST};do
		echo ${L}
	done
fi

exit_leave
