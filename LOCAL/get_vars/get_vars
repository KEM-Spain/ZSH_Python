#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"
BLACK_BG="\033[40m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"
CSR_OFF="\033[?25l"
CSR_ON="\033[?25h"
WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Declarations
typeset -a COLORS=(BOLD ITALIC RESET REVERSE STRIKE UNDER BLACK BLUE CYAN GREEN MAGENTA RED WHITE YELLOW CSR WHITE_ON_GREY)
typeset -aU _ALL_VARS=()
typeset -aU _DECL_VARS=()
typeset -aU _REFD_VARS=()
typeset -aU _ASGN_VARS=()
typeset -aU _UNSD_VARS=()
typeset -a _TMP=()

g_UNUSED_VAR_1="nothing"
g_UNUSED_VAR_2=$g_UNUSED_VAR_1

# Functions
custom_sort () {
	local CHAR=${1[1,1]}

	case ${CHAR} in
		_) echo 0;;
		g) echo 1;;
		*) echo 2;;
	esac
}

var_filter () {
	local ARG=${1}

	ARG=$(sed -E "s/(^E_|_FG$|_BG$)//g" <<<${ARG})

	[[ ${COLORS[(i)${ARG}]} -le ${#COLORS} ]] && echo 'true' || echo 'false'
}

# Execute
clear

[[ -z ${1} ]] && echo "${_SCRIPT_TAG} ${RED_FG}Missing argument${RESET}:<ZSH_SCRIPT>" && exit
TARGET_SCRIPT=${1}
TYPE=$(file -b ${TARGET_SCRIPT})
[[ ! ${TYPE} =~ 'zsh' ]] && echo "${_SCRIPT_TAG} ${RED_FG}Unsupported file type${RESET}:${TARGET_SCRIPT} (zsh scripts only!)" && exit

_ALL_VARS=("${(f)$(sed 's/\-\-[^\x27]*=//' ${TARGET_SCRIPT} | grep -o -P '(\w+=|\$\w+|\${\w+})' | sed -E -e 's/(=|\+=)//' -e 's/[\${}]//g')}")
_ASGN_VARS=("${(f)$(grep --color=never -o -P '(^| )\w+(=|\+=)' ${TARGET_SCRIPT} | sed -E -e 's/[[:space:]]*//' -e 's/(=|\+=)$//')}")
_DECL_VARS=("${(f)$(sed 's/[[:space:]]*//' ${TARGET_SCRIPT} | grep --color=never -P '^(typeset|local)' | sed -E -e 's/(typeset|local) //' -e 's/^[-]\w+ //' -e 's/=.*//')}")
_DECL_VARS=(${=_DECL_VARS}) # Verticalize any linear declarations

for V in ${_ALL_VARS};do
	[[ $(var_filter ${V}) == 'true' ]] && continue
	_TMP+=${V}
done
_ALL_VARS=(${_TMP}) # Apply filter

#_TMP=()
#for V in ${_ASGN_VARS};do
#	[[ $(var_filter ${V}) -eq 0 ]] && continue
#	_TMP+=${V}
#done
#_ASGN_VARS=(${_TMP}) # Apply filter
#
#for V in ${_ALL_VARS};do
#	#[[ ${_ASGN_VARS[(i)${V}]} -lt ${#_ASGN_VARS} ]] && continue
#	#[[ ${_DECL_VARS[(i)${V}]} -lt ${#_DECL_VARS} ]] && continue
#	_REFD_VARS+=${V} # Not in declared = referenced vars
#done
#
#for V in ${_ALL_VARS};do
#	[[ ${_REFD_VARS[(i)${V}]} -lt ${#_REFD_VARS} ]] && continue
#	_UNSD_VARS+=${V} # Collect unused vars
#done

# TODO: get unused vars

(
echo "ALL VARS"
echo "--------"
for L in ${_ALL_VARS};do
	printf "%d %s\n" $(custom_sort ${L}) ${L}
done | sort -n | sed 's/[0-9] //'
echo "--------\n"

#HDR="Declared, Assigned, Referenced, Unused vars for app"
#echo "${CYAN_FG}${HDR}${RESET}:${WHITE_ON_GREY}${TARGET_SCRIPT}${RESET}"
#echo $(str_unicode_line ${#HDR})
#
#HDR="Declared Variables"
#echo "\n${WHITE_ON_GREY}${HDR}${RESET}"
#echo $(str_unicode_line ${#HDR})
#for L in ${(o)_DECL_VARS};do
#	printf "%d %s\n" $(custom_sort ${L}) ${L}
#done | sort -n | sed 's/[0-9] //'
#
#HDR="Assigned Variables"
#echo "\n${WHITE_ON_GREY}${HDR}${RESET}"
#echo $(str_unicode_line ${#HDR})
#for L in ${(o)_ASGN_VARS};do
#	printf "%d %s\n" $(custom_sort ${L}) ${L}
#done | sort -n | sed 's/[0-9] //'
#
#HDR="Referenced Variables"
#echo "\n${WHITE_ON_GREY}${HDR}${RESET}"
#echo $(str_unicode_line ${#HDR})
#for L in ${(o)_REFD_VARS};do
#	printf "%d %s\n" $(custom_sort ${L}) ${L}
#done | sort -n | sed 's/[0-9] //'

#HDR="Unused Variables"
#echo "\n${WHITE_ON_GREY}${HDR}${RESET}"
#echo $(str_unicode_line ${#HDR})
#for L in ${(o)_UNSD_VARS};do
#	printf "%d %s\n" $(custom_sort ${L}) ${L}
#done | sort -n | sed 's/[0-9] //'
) | mypager
