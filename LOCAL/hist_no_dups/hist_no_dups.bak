#!/usr/bin/zsh

#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

typeset -a HIST=()
typeset -a HIST_BUILD=()
typeset -a RAW_HIST=()
typeset -aU RAW_CMDS=()
typeset -a CMDS=()
typeset -a LOCATE_OPTS=()

#HIST_DIR=./testing
#HIST_TMP=./testing
 
HIST_DIR=~
HIST_TMP=/tmp
HIST_FILE=${HIST_DIR}/.zsh_history
HIST_BAK=${HIST_DIR}/.zsh_history.bak
HIST_TAB=$(mktemp ${HIST_TMP}/hist.table.XXXXXX)
HIST_NEW=$(mktemp ${HIST_TMP}/hist.new.XXXXXX)
HIST_REJECTS=$(mktemp ${HIST_TMP}/hist.rejects.XXXXXX)
HIST_HOLD=${HIST_FILE}.$(date +"%s")
LOCATE_OPTS+=("--prunepaths=/media/${USER}") # No external drives

# Execution
[[ ${1} == '-p' ]] && _PROD=true || _PROD=false

[[ ${_PROD} == 'false' ]] && echo "${WHITE_ON_GREY}Backing up current history...${RESET}"
cp ${HIST_FILE} ${HIST_HOLD}

#[[ ${_PROD} == 'false' ]] && echo "${BOLD}${RED_FG}Updating locate db${RESET}"
echo -n "${ITALIC}Updating locate...${RESET}" >&2
sudo updatedb ${LOCATE_OPTS} 2>/dev/null

[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Reading history...${RESET}"

BLANK_CMDS=("${(f)$(grep -P ';$' ${HIST_FILE})}")
if [[ -n ${BLANK_CMDS} ]];then
	for B in ${BLANK_CMDS};do
		sed -in "/${B}/d" ${HIST_FILE}
	done
	[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Removing blank command lines:${WHITE_FG}${#BLANK_CMDS}${RESET}"
else
	BLANK_CMDS=()
fi

while read LINE;do
	TS=$(cut -d';' -f1 <<<${LINE} | cut -d':' -f2)
	CMD=$(cut -d';' -f2 <<<${LINE} | cut -d' ' -f1 | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
	ARGS=$(cut -d';' -f2 <<<${LINE} | cut -s -d' ' -f2-)
	RAW_HIST+="${TS}|${CMD}|${ARGS}"
	RAW_CMDS+=${CMD}
done < ${HIST_FILE}

[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Current History Lines:${WHITE_FG}${#RAW_HIST}${RESET}"

RAW_CMDS=(${(o)RAW_CMDS}) # Sorted, unique commands
[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Unique History Lines:${WHITE_FG}${#RAW_CMDS}${RESET}"

[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Filtering garbage...${RESET}"

# Filter typos and bogus
LOC=0
MYA=0
WCH=0
NDX=0
for L in ${(o)RAW_CMDS};do
	((NDX++))
	printf "\rFiltering garbage ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} lines ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#RAW_CMDS} $(( NDX * 100. / ${#RAW_CMDS} )) >&2
	VALID='false'
	which -s ${L} >/dev/null
	if [[ ${?} -eq 0 ]];then
		VALID='true'
		((WCH++))
	fi
	if [[ ${VALID} == 'false' ]];then
		mya -q ${L}
		if [[ ${?} -eq 0 ]];then
			VALID='true'
			((MYA++))
		fi
	fi
	if [[ ${VALID} == 'false' ]];then
		run_locate -e ${L} >/dev/null
		if [[ ${?} -eq 0 ]];then
			VALID='true'
			((LOC++))
		fi
	fi
	if [[ ${VALID} == 'false' ]];then
		echo ${L} >> ${HIST_REJECTS}
	else
		CMDS+=${L}
	fi
done
echo

[[ ${_PROD} == 'false' ]] && echo " WHICH found:${WHITE_FG}${WCH}${RESET}"
[[ ${_PROD} == 'false' ]] && echo "   MYA found:${WHITE_FG}${MYA}${RESET}"
[[ ${_PROD} == 'false' ]] && echo "LOCATE found:${WHITE_FG}${LOC}${RESET}"

[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Command history:${WHITE_FG}${#CMDS}${RESET}"
[[ ${_PROD} == 'false' ]] && echo "        ${MAGENTA_FG}Rejects:${WHITE_FG}${#HIST_REJECTS}${RESET}"

[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Finding last unique command/arg combination...${RESET}"

# Sort history placing most recent first
for L in ${RAW_HIST};do
	printf "%s\n" ${L}
done | sort -t'|' -k1rn -k2 >${HIST_TAB}

[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Command history sorted:${WHITE_FG}${#HIST_TAB}${RESET}"

[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Rebuilding history file...${RESET}"
for L in ${CMDS};do
	LINE=$(grep -m1 -I "|${L:q}|" ${HIST_TAB})
	TS=$(cut -d '|' -f1 <<<${LINE})
	CMD=$(cut -d '|' -f2 <<<${LINE})
	ARGS=$(cut -s -d '|' -f3 <<<${LINE})
	if [[ -n ${TS} ]];then
		HIST_BUILD+=":${TS}:0;${CMD} ${ARGS}"
	fi
done

# Create new history file
# TODO: Keeps cycling through the same statistics - 2nd run should detect no dups.
for L in ${HIST_BUILD};do
	echo ${L}
done | uniq | sort -nr -o ${HIST_NEW}
HIST_CNT=$(wc -l ${HIST_NEW} | cut -d' ' -f1)

[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Retained Commands:${WHITE_FG}${HIST_CNT}${RESET}"
[[ ${_PROD} == 'false' ]] && echo "${WHITE_ON_GREY}Done.${RESET}\n"

[[ ${_PROD} == 'false' ]] && printf "%10s ${WHITE_FG}%-4d${RESET}\n" "Original:" $(wc -l ${HIST_FILE} | cut -d' ' -f1)
[[ ${_PROD} == 'false' && ${#BLANK_CMDS} -ne 0 ]] && printf "%10s ${WHITE_FG}%-4d${RESET}\n" "  Blank:" ${#BLANK_CMDS}
[[ ${_PROD} == 'false' ]] && printf "%10s ${WHITE_FG}%-4d${RESET}\n" " Unique:" ${#CMDS}
[[ ${_PROD} == 'false' ]] && printf "%10s ${WHITE_FG}%-4d${RESET}\n" "Rejects:" ${#HIST_REJECTS}
[[ ${_PROD} == 'false' ]] && printf "%10s ${WHITE_FG}%-4d${RESET}\n" "Cleaned:" ${HIST_CNT}

if [[ ${_PROD} == 'true' ]];then
	cp ${HIST_HOLD} ${HIST_BAK}
	cp ${HIST_NEW} ${HIST_FILE}
	/bin/rm -f ${HIST_HOLD}
	printf "Clean History (${WHITE_FG}%d${RESET})\n" ${HIST_CNT}
	fc -R # Refresh history
	/bin/rm -f ${HIST_TAB} ${HIST_NEW} ${HIST_REJECTS}
fi
