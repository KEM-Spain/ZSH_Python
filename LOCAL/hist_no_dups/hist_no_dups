#!/usr/bin/zsh

#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/STR.zsh
source ${_LIB_DIR}/ARRAY.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Declarations
typeset -A _CMDS=()
typeset -a _HIST_BUILD=()
typeset -a _HIST_IN=()
typeset -a _LOCATE_OPTS=()
typeset -a _LOW_PRIORITY_CMDS=()

# Constants
#_HIST_DIR=./testing
#_HIST_TMP=./testing
#_CACHE_DIR=./testing/${0:t:r}
_HIST_DIR=~
_HIST_TMP=/tmp
_CACHE_DIR=~/.local/share/${0:t:r}

_CACHE_W=${_CACHE_DIR}/.which.cache
_CACHE_L=${_CACHE_DIR}/.locate.cache
_CACHE_M=${_CACHE_DIR}/.mya.cache
_HIST_FILE=${_HIST_DIR}/.zsh_history
_HIST_BAK=${_HIST_DIR}/.zsh_history.bak
_HIST_NEW=$(mktemp ${_HIST_TMP}/hist.new.XXXXXX)
_LOCATE_OPTS+=("--prunepaths=/media/${USER}") # No external drives

_LOW_PRIORITY_CMDS=(
doit
for
g
git
google
grep
peip
sed
testit
while
)

# Vars
_PROD=?
_DEEP=?
_FREQ=?

got_opt () {
	local OPT=${1}
	local -a ARGS=(${@})
	local A

	for A in ${ARGS};do
		case ${A} in
			-${OPT}) echo 0 && return 0;;
		esac
	done
	echo 1 && return 1
}

cmd_filter () {
	local ARRAY=${1}
	local VALID=false
	local WCH=0
	local LOC=0
	local CMD_TGT=''
	local CMD_IN=''
	local CMD_MSK=''
	local CMD_OUT=''
	local MYA=0
	local RJT=0
	local NDX=0
	local ROWS=${#${(P)ARRAY}}
	local K

	[[ ! -e ${_CACHE_DIR} ]] && md ${_CACHE_DIR}
	[[ ! -e ${_CACHE_W} ]] && touch ${_CACHE_W}
	[[ ! -e ${_CACHE_L} ]] && touch ${_CACHE_L}
	[[ ! -e ${_CACHE_M} ]] && touch ${_CACHE_M}

	for K in ${(k)${(P)ARRAY}};do
		((NDX++))
		printf "\rFiltering garbage ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} lines ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${ROWS} $(( NDX * 100. / ${ROWS} )) >&2
		VALID=false
		CMD_IN=$(cut -d';' -f2 <<<${K})
		CMD_TGT=$(cut -d' ' -f1 <<<${CMD_IN})
		[[ -z ${CMD_TGT} ]] && CMD_TGT=${CMD_IN} # If args are present strip them off
		if grep -Fq ${CMD_TGT} ${_CACHE_W};then
			VALID='true'
			((WCH++))
			printf '%s\n' "${K}"
		else
			which -s ${CMD_TGT} >/dev/null
			if [[ ${?} -eq 0 ]];then
				VALID='true'
				((WCH++))
				printf '%s\n' "${K}"
				printf '%s\n' "${CMD_TGT}">>${_CACHE_W}
			fi
		fi

		if [[ ${VALID} == 'false' ]];then
			if grep -Fq ${CMD_TGT} ${_CACHE_M};then
				VALID='true'
				((MYA++))
				printf '%s\n' "${K}"
			else
				mya -q ${CMD_TGT} >/dev/null
				if [[ ${?} -eq 0 ]];then
					VALID='true'
					((MYA++))
					printf '%s\n' "${K}"
					printf '%s\n' "${CMD_TGT}">>${_CACHE_M}
				fi
			fi
		fi

		if [[ ${VALID} == 'false' ]];then
			if grep -Fq ${CMD_TGT} ${_CACHE_L};then
					VALID='true'
					((LOC++))
					printf '%s\n' "${K}"
			else
				CMD_MSK="[${CMD_TGT[1]}]${CMD_TGT[2,-1]}" # Weird locate trick to match exact name / not substring
				CMD_OUT=$(locate -b -e ${CMD_MSK})
				if [[ ${?} -eq 0 ]];then
					if [[ $(file ${CMD_OUT}) =~ 'executable' ]];then
						VALID='true'
						((LOC++))
						printf '%s\n' "${K}"
						printf '%s\n' "${${(P)ARRAY}[${K}]}">>${_CACHE_L}
					fi
				fi
			fi
		fi

		if [[ ${VALID} == 'false' ]];then
			((RJT++))
		fi
	done
	echo "${WCH}|${LOC}|${MYA}|${RJT}" > ${_CACHE_DIR}/accumulators
	[[ ${_PROD} == 'false' ]] && echo >&2 # Clear progress
}

hist_parse () {
	local ARRAY=${1}
	local -A RECENT=()
	local CMD
	local CMD_ONLY
	local L
	local LINE
	local TS
	local TS_NDX

	for L in ${(on)${(P)ARRAY}};do
		[[ -z ${L} ]] && continue # Blank hist line
		[[ ${L} =~ ';\[\[' ]] && continue # test commands

		LINE=$(tr -d '\n' <<<${L})
		TS=$(cut -d';' -f1 <<<${LINE})
		TS_NDX=$(cut -d':' -f2 <<<${TS} | str_trim)
		if [[ ${_DEEP} == 'true' ]];then
			CMD=$(cut -d';' -f2- <<<${LINE}) # With args
			CMD_ONLY=$(cut -d' ' -f1 <<<${CMD}) # Omit args
			CMD=${CMD_ONLY}
		elif [[ ${_FREQ} == 'true' ]];then
			CMD=$(cut -d';' -f2- <<<${LINE}) # With args
			CMD_ONLY=$(cut -d' ' -f1 <<<${CMD}) # Omit args
			if $(arr_in_array "_LOW_PRIORITY_CMDS" ${CMD_ONLY:gs/ //});then
				CMD=${CMD_ONLY}
			fi
		else
			CMD=$(cut -d';' -f2- <<<${LINE}) # With args
		fi
		RECENT[${CMD}]="${TS_NDX}|${L}" # Rows are processed in order of timestamp; successive commands receive latest time key as they are hit
	done

	for K in ${(onk)RECENT};do
		LINE=$(cut -d'|' -f2 <<<${RECENT[${K}]})
		printf "%s\n" ${LINE}
	done
}

build_hist () {
	local ARRAY=${1}
	local -a _CMD_LIST
	local -a _VALID_CMDS
	local K

	#echo "ARRAY:${ARRAY} ${#${(P)ARRAY}}" >&2

	_CMD_LIST=("${(f)$(hist_parse ${ARRAY})}") # Order unique commands by timestamp

	_VALID_CMDS=("${(f)$(cmd_filter _CMD_LIST)}") # Eliminate nonsense commands

	for L in ${_VALID_CMDS};do
		printf "%s\n" "${L}"
	done | sort -n # Print valid commands in time order
}

# Execution
[[ $(got_opt p ${@}) -eq 0 ]] && _PROD=true || _PROD=false
[[ $(got_opt d ${@}) -eq 0 ]] && _DEEP=true || _DEEP=false
[[ $(got_opt f ${@}) -eq 0 ]] && _FREQ=true || _FREQ=false

[[ ${_PROD} == 'false' ]] && echo "${WHITE_ON_GREY}Backing up current history...${RESET}"
for F in ${_HIST_BAK}*;do
	/bin/rm -f ${F}
done
cp ${_HIST_FILE} ${_HIST_BAK}.$(date +"%s")

echo -n "${ITALIC}Updating locate...${RESET}" >&2
sudo updatedb ${_LOCATE_OPTS} 2>/dev/null

_HIST_IN=("${(f)$(sort -t';' -k2 <${_HIST_FILE} | sort -t':' -k1)}")
[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Current History Lines:${WHITE_FG}${#_HIST_IN}${RESET}"

[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Rebuilding history file...${RESET}"
_VALID_HIST=("${(f)$(build_hist _HIST_IN)}")

if ! arr_is_populated "_VALID_HIST";then
	echo "No valid history found"
	exit_leave
fi
 
read ACC <${_CACHE_DIR}/accumulators
[[ ${_PROD} == 'false' ]] && echo "  WHICH:${WHITE_FG}$(cut -d'|' -f1 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo " LOCATE:${WHITE_FG}$(cut -d'|' -f3 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo "    MYA:${WHITE_FG}$(cut -d'|' -f2 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo "REJECTS:${WHITE_FG}$(cut -d'|' -f4 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Retained Commands:${WHITE_FG}${#_VALID_HIST}${RESET}"
[[ ${_PROD} == 'false' ]] && echo "${WHITE_ON_GREY}Done.${RESET}\n"

NDX=0
for L in ${_VALID_HIST};do
	((NDX++))
	printf "%s\n" "${L}" >> ${_HIST_NEW}
done
cp ${_HIST_NEW} ${_HIST_FILE}
fc -R # Refresh history

[[ ${_PROD} == 'true' ]] && printf "Clean History (${WHITE_FG}%d${RESET})\n" ${NDX}

exit_leave
