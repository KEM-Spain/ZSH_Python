#!/usr/bin/zsh

#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _ARGS=()
typeset -A _CMDS=()
typeset -a _HIST_BUILD=()
typeset -a _HIST_IN=()
typeset -a _LOCATE_OPTS=()

# Constants
#_HIST_DIR=./testing
#_HIST_TMP=./testing
_HIST_DIR=~
_HIST_TMP=/tmp
_CACHE_DIR=~/.local/share/${0:t:r}

_CACHE_W=${_CACHE_DIR}/.which.cache
_CACHE_L=${_CACHE_DIR}/.locate.cache
_CACHE_M=${_CACHE_DIR}/.mya.cache
_HIST_FILE=${_HIST_DIR}/.zsh_history
_HIST_BAK=${_HIST_DIR}/.zsh_history.bak
_HIST_NEW=$(mktemp ${_HIST_TMP}/hist.new.XXXXXX)
_HIST_SAVE=${_HIST_FILE}.$(date +"%s")
_LOCATE_OPTS+=("--prunepaths=/media/${USER}") # No external drives

cmd_filter () {
	local ARRAY=${1}
	local VALID=false
	local WCH=0
	local LOC=0
	local MYA=0
	local RJT=0
	local NDX=0
	local ROWS=${#${(P)ARRAY}}
	local K

	[[ ! -e ${_CACHE_DIR} ]] && md ${_CACHE_DIR}
	[[ ! -e ${_CACHE_W} ]] && touch ${_CACHE_W}
	[[ ! -e ${_CACHE_L} ]] && touch ${_CACHE_L}
	[[ ! -e ${_CACHE_M} ]] && touch ${_CACHE_M}

	for K in ${(k)${(P)ARRAY}};do
		((NDX++))
		printf "\rFiltering garbage ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} lines ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${ROWS} $(( NDX * 100. / ${ROWS} )) >&2
		VALID=false
		if grep -Fq ${${(P)ARRAY}[${K}]} ${_CACHE_W};then
			VALID='true'
			((WCH++))
			printf '%s\n' "${K}"
		else
			which -s ${${(P)ARRAY}[${K}]} >/dev/null
			if [[ ${?} -eq 0 ]];then
				VALID='true'
				((WCH++))
				printf '%s\n' "${K}"
				printf '%s\n' "${${(P)ARRAY}[${K}]}">>${_CACHE_W}
			fi
		fi

		if [[ ${VALID} == 'false' ]];then
			if grep -Fq ${${(P)ARRAY}[${K}]} ${_CACHE_M};then
				VALID='true'
				((MYA++))
				printf '%s\n' "${K}"
			else
				mya -q ${${(P)ARRAY}[${K}]} >/dev/null
				if [[ ${?} -eq 0 ]];then
					VALID='true'
					((MYA++))
					printf '%s\n' "${K}"
					printf '%s\n' "${${(P)ARRAY}[${K}]}">>${_CACHE_M}
				fi
			fi
		fi

		if [[ ${VALID} == 'false' ]];then
			if grep -Fq ${${(P)ARRAY}[${K}]} ${_CACHE_L};then
					VALID='true'
					((LOC++))
					printf '%s\n' "${K}"
			else
				run_locate -e ${${(P)ARRAY}[${K}]} >/dev/null
				if [[ ${?} -eq 0 ]];then
					VALID='true'
					((LOC++))
					printf '%s\n' "${K}"
					printf '%s\n' "${${(P)ARRAY}[${K}]}">>${_CACHE_L}
				fi
			fi
		fi

		if [[ ${VALID} == 'false' ]];then
			((RJT++))
		fi
	done
	echo "${WCH}|${LOC}|${MYA}|${RJT}" > ${_CACHE_DIR}/accumulators
	[[ ${_PROD} == 'false' ]] && echo >&2 # Clear progress
}

parse_hist () {
	local ARRAY=${1}
	local -A SEEN_1=()
	local -A SEEN_2=()
	local -A RECENT=()
	local -a STREAM=()
	local L
	local LINE

	for L in ${(on)${(P)ARRAY}};do
		[[ -z ${L} ]] && continue # Blank hist line

		LINE=$(tr -d '\n' <<<${L})
		TS=$(cut -d';' -f1 <<<${LINE} | cut -d':' -f2)
		CMD=$(cut -d';' -f2 <<<${LINE} | cut -d' ' -f1 | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
		ARGS=$(cut -d';' -f2 <<<${LINE} | cut -s -d' ' -f2-)

		#echo "LINE:${LINE}" >&2
		#echo "TS:${TS}" >&2
		#echo "CMD:${CMD}" >&2
		#echo "ARGS:${ARGS}" >&2

		[[ ${CMD} =~ '\[' ]] && continue # eliminate test commands

		if [[ -z ${SEEN_1[${CMD}]} ]];then
			SEEN_1[${CMD}]=1
		else
			SEEN_1[${CMD}]=$(( SEEN_1[${CMD}] + 1 ))
			RECENT[${CMD}]=${TS}
		fi
		STREAM+=("${(f)$(printf '%s\n' "${TS}|${CMD}|${ARGS}")}")
	done

	for L in ${STREAM};do
		CMD=$(cut -d'|' -f2 <<<${L})
		[[ ${SEEN_2[${CMD}]} -eq 1 ]] && continue
		if [[ ${SEEN_1[${CMD}]} -gt 1 ]];then
			ARGS=$(cut -d'|' -f3 <<<${L})
			LINE=$(printf '%s\n' "${RECENT[${CMD}]}|${CMD}|${ARGS}")
		else
			LINE=$(printf '%s\n' "${L}")
		fi
		printf '%s\n' "${LINE}"
		SEEN_2[${CMD}]=1
	done
}

collate_hist () {
	local ARRAY=${1}

	_CMDS=()
	_ARGS=()

	for L in ${(P)ARRAY};do
		TS=$(cut -d'|' -f1 <<<${L})
		CMD=$(cut -d'|' -f2 <<<${L})
		ARGS=$(cut -d'|' -f3 <<<${L})
		_CMDS[${TS}]=${CMD}
		_ARGS[${TS}]=${ARGS}
	done
}

# TODO: Investigate why commands are not being placed in their original chronological order 
build_hist () {
	local ARRAY=${1}
	local -a _CMD_LIST
	local -a _VALID_CMD_KEYS
	local K

	#echo "ARRAY:${ARRAY} ${#${(P)ARRAY}}" >&2

	_CMD_LIST=("${(f)$(parse_hist ${ARRAY})}")
	#echo "_CMD_LIST:${#_CMD_LIST}" >&2

	collate_hist _CMD_LIST
	#echo "_CMDS:${#_CMDS}" >&2
	#echo "_ARGS:${#_ARGS}" >&2

	_VALID_CMD_KEYS=("${(f)$(cmd_filter _CMDS)}")
	#echo "_VALID_CMD_KEYS:${#_VALID_CMD_KEYS}" >&2

	for K in ${_VALID_CMD_KEYS};do
		printf "%s\n" ":${K}:0;${_CMDS[${K}]} ${_ARGS[${K}]}"
	done | sort -n
}

# Execution
[[ ${1} == '-p' ]] && _PROD=true || _PROD=false

[[ ${_PROD} == 'false' ]] && echo "${WHITE_ON_GREY}Backing up current history...${RESET}"
cp ${_HIST_FILE} ${_HIST_SAVE}

echo -n "${ITALIC}Updating locate...${RESET}" >&2
sudo updatedb ${_LOCATE_OPTS} 2>/dev/null

_HIST_IN=("${(f)$(sort -t';' -k2 <${_HIST_FILE} | sort -t':' -k1)}")
[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Current History Lines:${WHITE_FG}${#_HIST_IN}${RESET}"

[[ ${_PROD} == 'false' ]] && echo "\n${MAGENTA_FG}Rebuilding history file...${RESET}"
_VALID_HIST=("${(f)$(build_hist _HIST_IN)}")
 
read ACC <${_CACHE_DIR}/accumulators
[[ ${_PROD} == 'false' ]] && echo "  WHICH:${WHITE_FG}$(cut -d'|' -f1 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo " LOCATE:${WHITE_FG}$(cut -d'|' -f3 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo "    MYA:${WHITE_FG}$(cut -d'|' -f2 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo "REJECTS:${WHITE_FG}$(cut -d'|' -f4 <<<${ACC})${RESET}"
[[ ${_PROD} == 'false' ]] && echo "${MAGENTA_FG}Retained Commands:${WHITE_FG}${#_VALID_HIST}${RESET}"
[[ ${_PROD} == 'false' ]] && echo "${WHITE_ON_GREY}Done.${RESET}\n"

NDX=0
for L in ${_VALID_HIST};do
	((NDX++))
	printf "%s\n" "${L}" >> ${_HIST_NEW}
done
cp ${_HIST_NEW} ${_HIST_FILE}
fc -R # Refresh history

[[ ${_PROD} == 'true' ]] && printf "Clean History (${WHITE_FG}%d${RESET})\n" ${NDX}
