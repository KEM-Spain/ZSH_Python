#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -a LINES_IN
typeset -a PF_VALS

# Constants
_LIB_DIR=/usr/local/lib

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/VALIDATE.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Defaults
NUM_COLS=7
COL_WIDTH=20
HEADER=''

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Columnize output filter
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<TEXT>";;
		i) echo "<INT>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-c $(opt_type i)${RESET} number of columns"
	echo -e "${WHITE_FG}-w $(opt_type i)${RESET} column width"
	echo -e "${WHITE_FG}-h $(opt_type t)${RESET} header"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HDc:w:h:"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     c) NUM_COLS=${OPTARG};;
     w) COL_WIDTH=${OPTARG};;
     h) HEADER=${OPTARG};;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
if ! validate_is_integer ${NUM_COLS};then
	usage "Invalid $(opt_type i) Number of Columns:${NUM_COLS}"
elif ! validate_is_integer ${COL_WIDTH};then
	usage "Invalid $(opt_type i) Column Width:${COL_WIDTH}"
elif [[ ${NUM_COLS} -le 0 ]];then
	usage "Invalid $(opt_type i) Number of Columns:${NUM_COLS}"
elif [[ ${COL_WIDTH} -le 0 ]];then
	usage "Invalid $(opt_type i) Column Width:${COL_WIDTH}"
fi

# Generate printf
PF_FMT='printf "'
for ((C=1; C<=NUM_COLS; C++ ));do
	PF_FMT+=' %-'${COL_WIDTH}'.'${COL_WIDTH}'s'
done
PF_FMT+='\\n"'

# Get lines
LINES_IN=("${(f)$(
	while read -t -r LINE;do
		ansi2txt <<<${LINE} | col -b
	done 
)}")
[[ -z ${LINES_IN} ]] && exit_leave $(msg_exit E 'No input provided')

# Header
if [[ -n ${HEADER} ]];then
	TW=$(( (NUM_COLS * COL_WIDTH) ))
	LH=${#HEADER}
	LS=$(( (TW/2) - (LH/2) ))
	printf "%${LS}s%s\n\n" "" "${(C)HEADER}"
fi

# Format into columns
NDX=0
for L in ${(o)LINES_IN};do
	((NDX++))
	PF_VALS+=${(qqq)L}
	if [[ ${NDX} -eq ${NUM_COLS} ]];then
		PF="${PF_FMT} ${PF_VALS}"
		eval ${PF}
		PF_VALS=()
		NDX=0
	fi
done
PF="${PF_FMT} ${PF_VALS}"
[[ ${NDX} -ne 0 ]] && eval ${PF}

exit_leave
