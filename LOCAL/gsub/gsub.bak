#!/usr/bin/zsh
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Declarations
typeset -a _LOCAL_LIST
typeset -a _RAWLIST

# Constants
_BAK_DIR=./.gsub_bak_$(date +%s)

# Globals
g_FROM_TEXT=?
g_TO_TEXT=?

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local M
	local L
	local -a MATCHES
	local RC
	local APPROVE_ALL=false
	local MBOX_OPTS

	[[ ! -e ${_BAK_DIR} ]] && mkdir ${_BAK_DIR} && RC=${?}
	[[ ${RC} -ne 0 ]] && exit_leave $(msg_warn "Unable to create backup directory: ${_BAK_DIR} (RC=${RC})")

	for M in ${_MARKED};do
		MATCHES=("${(f)$(perl -ne "if (/${g_FROM_TEXT}/) { print }" ${_LOCAL_LIST[${M}]})}")
		if ! arr_is_populated "${MATCHES}";then
			msg_box -p -PK "Nothing matches <w>${(qq)g_FROM_TEXT}<N>| |in File:<w>${_LOCAL_LIST[${M}]}<N>"
			list_set_selected ${M} 3 # Mark as missing match
		else
			if [[ ${APPROVE_ALL} == 'false' && ${#_MARKED} -gt 1 ]];then
				msg_box -p -PN "Substituting <w>${(qq)g_FROM_TEXT}<N> with <w>${(qq)g_TO_TEXT}<N>| |$(msg_list ${MATCHES})| |in File:<w>${_LOCAL_LIST[${M}]}<N>"
				if [[ ${_MSG_KEY} == "n" ]];then
					list_clear_selected ${M}
					continue
				elif [[ ${_MSG_KEY} == "a" ]];then
					APPROVE_ALL=true
				fi
			fi
		fi

		sudo perl -i.bak -pe "s/${g_FROM_TEXT}/${g_TO_TEXT}/g" ${_LOCAL_LIST[${M}]}

		if [[ ${?} -ne 0 ]];then
			msg_box -p -PK "Substitution <r>failed<N> for <w>${(qq)g_FROM_TEXT}<N>| |in file:<w>${_LOCAL_LIST[${M}]}<N>"
			list_set_selected ${M} 4 # Mark as failed
		else
			[[ -e ${_LOCAL_LIST[${M}]}.bak ]] && sudo mv ${_LOCAL_LIST[${M}]}.bak ${_BAK_DIR}
			[[ ${APPROVE_ALL} == 'false' ]] && MBOX_OPTS='-p -PK' && MBOX_OPTS=''
			msg_box ${MBOX_OPTS} "Substituted <w>${(qq)g_FROM_TEXT}<N> with <w>${(qq)g_TO_TEXT}<N>| |in file:<w>${_LOCAL_LIST[${M}]}<N>| |A backup file:${_BAK_DIR}/${_LOCAL_LIST[${M}]:t}.bak was created"
			sudo chmod 664 ${_BAK_DIR}/${_LOCAL_LIST[${M}]:t}.bak
			list_set_selected ${M} ${_GHOST_ROW} # Mark as complete
		fi
	done
}

action_warn () {
	local M

	msg_box -p -PP "Substituting <w>${(qq)g_FROM_TEXT}<N> with <w>${(qq)g_TO_TEXT}<N>| |in <w>${#_MARKED}<N> $(str_pluralize file ${#_MARKED})"

	if [[ ${_MSG_KEY} != "y" ]];then
		for M in ${_MARKED};do
			list_clear_selected ${M}
		done
	fi
}

item_decorate () {
	local NDX=$1

	case ${_LIST_SELECTED[${NDX}]} in
		${_GHOST_ROW}) echo -n "${E_STRIKE}${E_RED_FG}${_LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}completed${E_RESET}";;
		3) echo -n "${E_STRIKE}${E_RED_FG}${_LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}no match${E_RESET}";;
		4) echo -n "${E_STRIKE}${E_RED_FG}${_LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}command failed${E_RESET}";;
		*)	tput el;echo -n "${_LIST[${NDX}]:t}"
	esac
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FROM_TEXT>";;
		t) echo "<TO_TEXT>";;
	esac
}

read -r -d '' DESC<<EOF
Make the same text substituion in mulitple files
\tPass args: $(opt_type f) and $(opt_type t) and a list of files 
\twill be shown to select from
EOF

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f) $(opt_type t)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-i${RESET} case insensitive"
	echo -e "${WHITE_FG}\nDesc${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_err ${PENDING_MSGS})
}

OPTSTR=":HDi"

CASE=''

OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     i) CASE=i;;
     :) print -u2 "${_SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${_SCRIPT}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${#} -ne 2 ]] && usage "2 arguments required:$(opt_type f) ${WHITE_FG}${ITALIC}$(opt_type t)${RESET}"

g_FROM_TEXT=${1}
g_TO_TEXT=${2}

[[ ${_DEBUG} -eq 0 ]] && do_smcup

RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FPATH=${FPATH:q}
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
PATHLBL=$(path_get_label 40)

_RAWLIST=("${(f)$(eval "find ${FPATH} -maxdepth 1 -type f" 2>/dev/null )}")
[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${GREEN_FG}LIST COUNT${RESET}:${#_RAWLIST}"

if ! arr_is_populated "${_RAWLIST}";then
	exit_leave $(msg_warn "No files match:${@}")
fi

for R in ${(o)_RAWLIST};do
	[[ ! $(file ${R}) =~ 'text' ]] && continue
	grep -q${CASE} "${g_FROM_TEXT}" ${R}
	[[ ${?} -ne 0 ]] && continue
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} FOUND ${(qq)g_FROM_TEXT} in ${R}"
	_LOCAL_LIST+=${R}
done

if ! arr_is_populated "${_LOCAL_LIST}";then
	exit_leave $(msg_warn "No ${ITALIC}text${RESET} files contain candidates:${WHITE_FG}${(qq)g_FROM_TEXT}${RESET}")
fi

[[ ${CASE} == 'i' ]] && CASE_MSG="Case insensitive" || CASE_MSG="Case sensitive"
# Set headings
list_set_header 'printf "${RED_FG}Substituting${RESET}:${WHITE_FG}%s${RESET} with ${WHITE_FG}%s${RESET}" ${(qq)g_FROM_TEXT} ${(qq)g_TO_TEXT}'
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize file ${#_LIST})  Search:${WHITE_FG}${CASE_MSG}${RESET}  Path:${WHITE_FG}%-*s${RESET}  Selected:${WHITE_FG}%-d${RESET}  ${_PG}" ${#_LIST} ${#PATHLBL} "${PATHLBL}" ${SELECTED_COUNT}'
list_add_header_break

# Set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})" 
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select file(s) <${GREEN_FG}ENTER${RESET}> to process (${ITALIC}or exit if none selected${RESET})."

while true;do
	# Get selection
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break

	# Get selections
	_MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -ne 0 ]];then
		action_warn
		if [[ ${_MSG_KEY} == "y" ]];then
			action_do
		fi
	fi
done

# Cleanup
BAK_DIR_FILES=$(find ${_BAK_DIR} -type f | wc -l)
[[ ${BAK_DIR_FILES} -eq 0 ]] && rm -rf ${_BAK_DIR}

exit_leave
