do_info () {
	local -A DESC
	local -R MON
	local C=$'\u2501'
	local LAST_CMD
	local M
	local STATUS_FILE=/tmp/mon_status

	[[ -f ${STATUS_FILE} ]] && LAST_CMD=$(<${STATUS_FILE})
	 
	printf "\n${WHITE_FG}%10s    "'%-18s'" "'%12s'" "'%12s'"${RESET}\n" "Monitor" "Description" "Status" "State"
	printf "${CYAN_FG}%10s    "'%-18s'" "'%12s'" "'%12s'"${RESET}\n" $(ec 7 ${C}) $(ec 18 ${C}) $(ec 12 ${C}) $(ec 12 ${C})

	for M in ${(k)MONS};do
		printf "%10s -> "'%-18s'" "'%12s'" "'%12s'"${RESET}\n" ${M} ${MONS[${M}]} "Connected" $(get_mon_state ${M})
	done

	echo

	[[ -z ${LAST_CMD} ]] && return
}

ec () {
	local LEN=${1}
	local CHAR=${2}
	local X

	for ((X=0;X<${LEN};X++)) echo -n ${CHAR}
}

get_mon_state () {

local MON_ARG=${1:l}
local -A MONITORS

MONITORS[${HDMI}]="DP-1"
MONITORS[${LCD}]="eDP-1"

local MON=${MONITORS[${1}]}
[[ -z ${MON} ]] && echo "${0} - Invalid arg:$1" >&2 && exit

#echo "Scanning fo ${MON}"

local LIST=("${(f)$(xrandr --verbose | grep -iw 'connected\|brightness')}")

local HIT=false
for L in ${LIST};do
	[[ ${L:l} =~ "^${MON:l}" ]] && HIT=true && continue
	if [[ ${HIT} == 'true' ]];then
		STATE=$(echo ${L} | cut -d: -f2-)
		break
	fi
done

[[ -z ${STATE} ]] && echo "Failed to get state of ${MON}" >&2 && exit
[[ ${STATE} =~ "0.0" ]] && echo "off" || echo "on"

}

set_mon_state () {
	local MON=${1}
	local ACTION=${2}

	for M in ${(k)MONS};do
		[[ ${(L)M}	!= "${(L)MON}" ]] && continue
		case ${ACTION} in
			on)	xrandr --output ${M} --brightness 1
					echo "Activating display ${M}" >&2
					;;
			off)	xrandr --output ${M} --brightness 0
					echo "De-activating display ${M}" >&2
					;;
		esac
	done
}

