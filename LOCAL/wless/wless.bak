#!/usr/bin/zsh
#vim: syntax off
RESET="\033[m"
BOLD="\033[1m"
ITALIC="\033[3m"
UNDER="\033[4m"
REVERSE="\033[7m"
STRIKE="\033[9m"

BLACK_FG="\033[30m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"

#Declarations
typeset -i QPCT 
typeset -F NUMERATOR 
typeset -F DENOMINATOR 
typeset -g DEFAULT_SSID=MOVISTAR_134D
typeset -a SSIDS
typeset -A SSID_SIGNAL

#Constants
IWCONFIG=/sbin/iwconfig
IWLIST=/sbin/iwlist
LIB=/usr/local/lib
NMCLI=/usr/bin/nmcli
TIMEOUT=10
WIFI_STATE=$(nmcli -t -f WIFI radio)
WLESS_DEV=wlo1

#Globals
_BEST_SIGNAL=0
_ACTIVE_SSID="Not connected"

#Imports
source ${LIB}/common.zsh

#Functions
connection_off () {
	local SSID=${1}

	[[ ${WIFI_STATE} != "enabled" ]] && exit_leave "${_THIS_FILE}: Wifi is not enabled"
	sudo nmcli con down id ${SSID} > /dev/null 2>&1
	return $?
}

connection_on () {
	local SSID=${1}

	[[ ${WIFI_STATE} != "enabled" ]] && exit_leave "${_THIS_FILE}: Wifi is not enabled"
	sudo nmcli --wait ${TIMEOUT} con up ${SSID} >/dev/null 2>&1
	return $?
}

connection_try () {
	local SSID=${1}
	local TRYS=3
	local T

	connection_on ${SSID}
	set_current_ssid

	for T in {1..${TRYS}};do
		if [[ "${_ACTIVE_SSID}" == "${SSID}" ]];then
			return 0
		fi
		sleep 1
		set_current_ssid
	done
	set_current_ssid
	[[ "${_ACTIVE_SSID}" != "${SSID}" ]] && return 1 || return 0
}

load_ssid_signals () {
	local -a RAWLIST=("${(f)$(nmcli -c no -t -e yes -f IN-USE,SSID,SIGNAL dev wifi)}")
	local ACTIVE
	local S
	local SIGNAL
	local SSID
	local BEST=0

	for S in ${RAWLIST};do
		ACTIVE=$(cut -d: -f1 <<<${S})
		SSID=$(cut -d: -f2 <<<${S})
		SIGNAL=$(cut -d: -f3 <<<${S})
		SSID_SIGNAL[${SSID}]=${SIGNAL}
		[[ ${ACTIVE} == '*' ]] && _ACTIVE_SSID=${SSID}
	done

	for S in ${(k)SSID_SIGNAL};do
		[[ ${SSID_SIGNAL[${S}]} -gt ${BEST} ]] && BEST=${SSID_SIGNAL[${S}]} && _BEST_SIGNAL=${S}
	done
}

set_current_ssid () {
	_ACTIVE_SSID=$(nmcli | grep -i 'connected to' | tr -s '[:space:]' | cut -d' ' -f4-)
}

ssid_best () {
	local S

	for S in ${(k)SSID_SIGNAL};do
		[[ "${S}" != "${_BEST_SIGNAL}" ]] && continue
		if $(connection_try ${S});then 
			return 0
		else
			return 1
		fi
	done
}

is_active () {
	local NDX=${1}

	set_current_ssid
	[[ ${_LIST[${NDX}]} == ${_ACTIVE_SSID} ]] && echo 'active' || echo ''
}

ssid_choose () {
	local -a LIST
	local SELECTED
	local SSID
	local LONGEST
	
	LIST=(${(k)SSID_SIGNAL})

	if ! arr_is_populated ${LIST};then
		exit_leave "${RED_FG}No SSIDs found"
	fi

	LONGEST=$(str_longest_len ${LIST})

	list_set_header 'printf "List of %-*d detected SSIDs" ${#${#_LIST}} ${#_LIST}'
	list_set_header 'printf "\n"'
	list_set_header 'printf "%5s %-*s %-7s" "" ${LONGEST} "SSID" "Quality"'
	list_set_header 'printf "%5s ${MAGENTA_FG}%-*s %7s${RESET}" "" ${LONGEST} "$(str_unicode_line ${LONGEST})" "$(str_unicode_line 7)"'

	#set line item
	list_set_line_item ' 
	printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%-*s${RESET} ${SHADE}${BAR}%7d${RESET} ${GREEN_FG}%s${RESET}\n" ${ARRAY_NDX} ${LONGEST} ${_LIST[${ARRAY_NDX}]} ${SSID_SIGNAL[${_LIST[${ARRAY_NDX}]}]} $(is_active ${ARRAY_NDX})
	'

	list_set_prompt "Hit <SPACE> to select SSID then <ENTER> to connect (or exit if none selected)."
	list_set_action_msgs connect "to SSID"
	list_set_selection_limit 1
	list_set_client_warn true

	list_cursor_select ${LIST}

	if [[ ${?} -ne 0 ]];then
		SELECTED=$(list_get_selected)
		SSID=${_LIST[${SELECTED}]}
		msg_box -p -PP "Connect to ${SSID}"
		if [[ ${_MSG_KEY} == 'y' ]];then
			msg_box "<w>Connecting...<N>"
			if $(connection_try ${SSID});then
				return 0
			else
				return 1
			fi
		fi
	fi
}

ssid_validate () {
	local SSID=${1}
	local S

	for S in ${(k)SSID_SIGNAL};do
		[[ ${SSID} == ${S} ]] && return 0
	done

	return 1
}

status_print () {
	local STATE_COLOR=${RED_FG}

	[[ ${WIFI_STATE} == 'enabled' ]] && STATE_COLOR=${GREEN_FG}
	echo "${WHITE_FG}WIFI_STATE${RESET}:${STATE_COLOR}${WIFI_STATE}${RESET}" >&2
}

status_show () {
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)
	local NET_ENABLED=$(nmcli -t -f NETWORKING networking)
	local STATE_COLOR

	echo "Wifi Status..."

	[[ ${NET_ENABLED} == 'enabled' ]] && STATE_COLOR=${GREEN_FG} || STATE_COLOR=${RED_FG}
	echo "${WHITE_FG}Network${RESET}:${STATE_COLOR}${NET_ENABLED}${RESET}"

	if [[ ${WIFI_ENABLED} == 'enabled' ]];then
		STATE_COLOR=${GREEN_FG}
		echo "${WHITE_FG}Wireless${RESET}:${STATE_COLOR}${WIFI_ENABLED}${RESET}\n"
	else
		STATE_COLOR=${RED_FG}
		echo "${WHITE_FG}Wireless${RESET}:${STATE_COLOR}${WIFI_ENABLED}${RESET}\n"
		return 1
	fi

	nmcli -c yes dev wifi

	if [[ ${_ACTIVE_SSID:=null} == "null" ]];then
		echo "\n${RED_FG}No connection${RESET}"
	else
		echo "\nCurrent connection: ${WHITE_FG}${_ACTIVE_SSID}${RESET} Quality: ${GREEN_FG}${SSID_SIGNAL[${_ACTIVE_SSID}]}%${RESET}"
	fi
}

wifi_off () {
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)

	if [[ ${WIFI_ENABLED} == "enabled" ]];then
		nmcli radio wifi off
		return 0
	else
		return 1
	fi
}

wifi_on () {
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)

	if [[ ${WIFI_ENABLED} != "enabled" ]];then
		nmcli radio wifi on 
		return 0
	else
		return 1
	fi
}

#Getopts 
OPTSTR=":DHbcsg"
OPTIND=0
FIND_BEST=false
CHOOSE_SSID=false
DISABLE=false
ENABLE=false
SPEEDTEST=false
GET_CURRENT_SSID=false

SCRIPT=${0:t}
usage () {
	local -a PENDING_MSGS=(${@})
   echo -e "\n${WHITE_FG}Usage:${RESET} ${SCRIPT} ${OPTSTR:s/:/-/} [off/on] [SSID]\n"
   echo -e "-H help"
   echo -e "-D Debug"
	echo -e "-b find best connection based on strength"
	echo -e "-c choose connection from list"
	echo -e "-g get current SSID"
	echo -e "-s do speedtest"
	echo -e "\n${WHITE_FG}DESC:${RESET}Wireless connection manager.  Default action:current wifi status.\nIf an SSID is passed (and wifi on) a connection will be attempted"
	exit_leave ${PENDING_MSGS}
}

while getopts ${OPTSTR} opts;do
	case $opts in
    H) usage;;
    D) dbg_set_level;;
	 b) FIND_BEST=true;;
	 c) CHOOSE_SSID=true;;
	 g) GET_CURRENT_SSID=true;;
	 s) SPEEDTEST=true;;
    :) print -u2 "$0: option: -$OPTARG requires an argument"; usage;;
   \?) print -u2 "$0: unknown option $OPTARG"; usage;;
	esac
done
shift $(($OPTIND - 1))

#Execution 
[[ ! -e ${NMCLI} ]] && exit_leave "Required application: ${NMCLI} not found"

load_ssid_signals
echo "\n${GREEN_FG}Best signal is${RESET}: ${WHITE_FG}${_BEST_SIGNAL}${RESET}\n"

#No arguments, no options
if [[ ${#} -eq 0 && ${OPTIND} -eq 1 ]];then
	MSG=$(
	status_show
	)
	exit_leave ${MSG}
else
	if ssid_validate ${SSID_ARG};then
		SSID_ARG=${1} #arg was SSID
	fi
fi

#Execute indicated command
if [[ ${1:l} == "off" ]];then #switch wifi off
	if wifi_off;then
		exit_leave "Turning off wireless"
	else
		exit_leave "${RED_FG}Error${RESET}: turning off wireless"
	fi
elif [[ ${1:l} == "on" ]];then #switch wifi on
	if wifi_off;then
		exit_leave "Turning on wireless"
	else
		exit_leave "${RED_FG}Error${RESET}: turning on wireless"
	fi
elif [[ -n ${SSID_ARG} ]];then #connect to SSID
	echo "Connecting to ${WHITE_FG}${SSID_ARG}${RESET}..."
	if [[ "${_ACTIVE_SSID}" != "${SSID_ARG}" ]];then
		connection_off ${_ACTIVE_SSID}
		if connection_try ${SSID_ARG};then
			set_current_ssid
			echo "${GREEN_FG}Connected${RESET} to ${WHITE_FG}${_ACTIVE_SSID}${RESET}"
		else
			echo "${RED_FG}Error${RESET}: connecting to ${WHITE_FG}${_ACTIVE_SSID}${RESET}"
		fi
	fi
elif [[ ${GET_CURRENT_SSID} == "true" ]];then #echo current SSID
	set_current_ssid
	exit_leave ${_ACTIVE_SSID}
elif [[ ${FIND_BEST} == "true" ]];then #connect to best signal
		echo "Finding best SSID..."
		if ssid_best;then
			set_current_ssid
			echo "${GREEN_FG}Connected${RESET} to ${WHITE_FG}${_ACTIVE_SSID}${RESET}"
		else
			echo "${RED_FG}Error${RESET}: connecting to ${WHITE_FG}${_ACTIVE_SSID}${RESET}"
		fi
elif [[ ${CHOOSE_SSID} == "true" ]];then #choose a connection
		ssid_choose
		case ${?} in
			0) set_current_ssid
				msg_box -c -p -PK "<g>Connected<N> to <w>${_ACTIVE_SSID}<N>"
				;;
			1) msg_box -c -p -PK "<r>Error<N>: connecting to <w>${_ACTIVE_SSID}<N>"
				;;
		esac
		tput clear
elif [[ ${SPEEDTEST} == "true" ]];then #run a speedtest
	speedtest
fi

exit_leave
