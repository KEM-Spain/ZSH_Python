#!/usr/bin/zsh
#vim: syntax off
RESET="\033[m"
BOLD="\033[1m"
ITALIC="\033[3m"
UNDER="\033[4m"
REVERSE="\033[7m"
STRIKE="\033[9m"

BLACK_FG="\033[30m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"

#Declarations
typeset -i QPCT 
typeset -F NUMERATOR 
typeset -F DENOMINATOR 
typeset -g DEFAULT_SSID=MOVISTAR_134D
typeset -g CUR_SSID=none
typeset -a SSIDS

#Constants
TIMEOUT=10
BEST_SSID=?
BEST_LINK=0
NMCLI=/usr/bin/nmcli
IWCONFIG=/sbin/iwconfig
IWLIST=/sbin/iwlist
WLESS_DEV=wlo1
WIFI_STATE=$(nmcli -t -f WIFI radio)
LIB=/usr/local/lib

#Imports
source ${LIB}/common.zsh

#Functions
to_int () {
	local NUM=${1}
	printf "%.0f\n" ${NUM}
}

connection_off () {
	[[ ${WIFI_STATE} != "enabled" ]] && status_print
	sudo ${NMCLI} con down id $1 > /dev/null 2>&1
	sleep 2
}

connection_on () {
	[[ ${WIFI_STATE} != "enabled" ]] && status_print
	sudo ${NMCLI} --wait ${TIMEOUT} con up $1 >/dev/null 2>&1
	return $?
}

connection_try () {
	local SSID=${1}
	local RC=0
	local RETVAL=0
	local TRYS=3
	local T


	for T in {1..${TRYS}};do
		connection_on ${SSID};RC=$?
		if [[ ${RC} -eq 0 ]];then
			QPCT=$(ssid_link_quality)
			RETVAL=0
			break
		else
			RETVAL=1
		fi
	done

	if [[ ${_DEBUG} -ne 0 ]];then
		if [[ ${RETVAL} -eq 0 ]];then
			echo "${GREEN_FG}Connected to:${WHITE_FG}${SSID}${RESET}. Quality:${WHITE_FG}${QPCT}%${RESET}" | dbg
		else
			echo "${RED_FG}Connection to ${WHITE_FG}${SSID}${RED_FG} failed${RESET}" | dbg
		fi
	fi

	return ${RETVAL}
}

ssid_link_quality () {
	local LINK_QUALITY

	[[ ${WIFI_STATE} != "enabled" ]] && status_print

	CUR_SSID=$(ssid_get_current)
	[[ ${CUR_SSID} == none ]] && echo 0

	LINK_QUALITY=$(${IWCONFIG} ${WLESS_DEV} | grep -i quality | cut -d= -f2 | sed 's/ .*//g')
	NUMERATOR=$(echo ${LINK_QUALITY} | cut -d/ -f1)
	DENOMINATOR=$(echo ${LINK_QUALITY} | cut -d/ -f2)
	QPCT=$((NUMERATOR/DENOMINATOR * 100))
	echo $(to_int ${QPCT})
}

ssid_best () { 
	local BEST_LINK
	local BEST_SSID
	local LAST_SSID
	local S
	local CUR_SSID=$(ssid_get_current)

	if [[ ${CUR_SSID} == "none" ]];then
		echo "Currently disconected."
	else
		echo "Current SSID:${WHITE_FG}${CUR_SSID}${RESET}"
		BEST_LINK=$(ssid_link_quality)

		BEST_SSID=${CUR_SSID}
		LAST_SSID=${CUR_SSID}
		connection_off ${CUR_SSID}
	fi

	for S in ${SSIDS};do
		[[ ${CUR_SSID} == ${S} ]] && continue
		if $(connection_try ${S});then
			QPCT=$(ssid_link_quality)
		else
			QPCT=0
		fi

		[[ ${QPCT} -ge ${BEST_LINK} ]] && BEST_LINK=${QPCT} && BEST_SSID=${S}
		[[ ${S} != ${BEST_SSID} ]] && connection_off ${S}
		LAST_SSID=${SSID}
	done
	
	if [[ ${BEST_LINK} -ne 0 ]];then
		echo "Using highest quality link:${WHITE_FG}${BEST_SSID}${RESET} - Quality:${GREEN_FG}${BEST_LINK}%${RESET}"
		[[ ${LAST_SSID} != ${BEST_SSID} ]] && connection_on ${BEST_SSID} 
		logger -p local0.notice "$0: chose SSID:${BEST_LINK} - Quality:${GREEN_FG}${BEST_SSID}%${RESET}"
		if ! $(connection_try ${BEST_SSID});then
			echo "Unable to connect to ${BEST_SSID}"
			exit_leave
		fi
	else
		echo "${RED_FG}No wireless connection was successful${RESET}"
	fi
}

ssid_choose () {
	local RESPONSE
	local NDX=0
	local COLOR
	local MSG
	local S

	ssid_set_list
	[[ -z ${SSIDS[1]} ]] && echo "Unable to find any available SSIDS" && exit_leave

	echo "Found ${#SSIDS} active SSID's"
	for S in ${SSIDS};do
		((NDX++))
		if [[ ${CUR_SSID} == ${S} ]];then
			QPCT=$(ssid_link_quality)
			COLOR=${GREEN_FG}
			MSG="${RESET}${ITALIC}connected${RESET} - quality:${WHITE_FG}${QPCT}%${RESET}"
		else
			COLOR=''
			MSG=''
		fi
		echo "${NDX}) ${COLOR}${S} ${RESET}${MSG}${RESET}"
	done

	echo -n "Select SSID (1-${#SSIDS}):"
	read RESPONSE
	[[ -z ${RESPONSE} ]] && return 1

	if ! validate_is_integer ${RESPONSE};then
		echo "Invalid selection"
		return 1
	fi

	if list_is_within_range ${RESPONSE} 1 ${#SSIDS};then
		if $(connection_try ${SSIDS[${RESPONSE}]});then
			CUR_SSID=${S}
			return 0
		else
			return 1
		fi
	else
		echo "Invalid selection"
		return 1
	fi
}

ssid_get_current () {
	local SSID

	if [[ ${WIFI_STATE} != "enabled" ]];then
		echo "none"
	else
		SSID=$(${IWCONFIG} ${WLESS_DEV} | grep -i ssid | cut -d: -f2 | sed 's/\"//g' | tr -d '[:blank:]')
		if $(echo ${SSID} | grep -q off);then
			echo "none"
		else
			echo "${SSID}"
		fi
	fi
}

ssid_set_list () {
	if [[ ${CUR_SSID} == "none" ]];then
		[[ ${_DEBUG} -ne 0 ]] && echo "Getting SSIDS..."
		SSIDS=("${(f)$(sudo ${IWLIST} ${WLESS_DEV} scan | grep ESSID | cut -d: -f2 | tr -d '"')}")
		CUR_SSID=$(ssid_get_current)
	fi
}

ssid_validate () {
	local SSID=${1}
	local S

	ssid_set_list

	for S in ${SSIDS};do
		[[ ${SSID} == ${S} ]] && return 0
	done

	return 1
}

status_print () {
	local STATE_COLOR=${RED_FG}
	[[ ${WIFI_STATE} == 'enabled' ]] && STATE_COLOR=${GREEN_FG}
	echo "${WHITE_FG}WIFI_STATE${RESET}:${STATE_COLOR}${WIFI_STATE}${RESET}" >&2
}

status_show () {
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)
	local NET_ENABLED=$(nmcli -t -f NETWORKING networking)
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)
	local STATE_COLOR
	local CUR_SSID=$(ssid_get_current)

	echo "Wifi Status..."

	[[ ${NET_ENABLED} == 'enabled' ]] && STATE_COLOR=${GREEN_FG} || STATE_COLOR=${RED_FG}
	echo "${WHITE_FG}Network${RESET}:${STATE_COLOR}${NET_ENABLED}${RESET}"

	if [[ ${WIFI_ENABLED} == 'enabled' ]];then
		STATE_COLOR=${GREEN_FG}
		echo "${WHITE_FG}Wireless${RESET}:${STATE_COLOR}${WIFI_ENABLED}${RESET}"
	else
		STATE_COLOR=${RED_FG}
		echo "${WHITE_FG}Wireless${RESET}:${STATE_COLOR}${WIFI_ENABLED}${RESET}"
		return 1
	fi

	nmcli dev wifi

	if [[ ${CUR_SSID} == "none" ]];then
		echo "${RED_FG}No connection${RESET}"
	else
		QPCT=$(ssid_link_quality)
		echo "\nCurrent connection:${WHITE_FG}${CUR_SSID}${RESET}. Quality is ${GREEN_FG}${QPCT}%${RESET}\n"
	fi
}

wifi_off () {
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)
	[[ ${WIFI_ENABLED} == "enabled" ]] && ${NMCLI} radio wifi off
	return 0
}

wifi_on () {
	local WIFI_ENABLED=$(nmcli -t -f WIFI radio)
	[[ ${WIFI_ENABLED} != "enabled" ]] && ${NMCLI} radio wifi on 
	return 0
}

#Getopts 
OPTSTR=":DHbcs"
OPTIND=0
FIND_BEST=false
CHOOSE_SSID=false
DISABLE=false
ENABLE=false
SPEEDTEST=false

SCRIPT=${0:t}
usage () {
   echo -e "\n${WHITE_FG}Usage:${RESET} ${SCRIPT} ${OPTSTR:s/:/-/} [off/on] [SSID]\n"
   echo -e "-H help"
   echo -e "-D Debug"
	echo -e "-b find best connection based on strength"
	echo -e "-c choose connection from list"
	echo -e "-s do speedtest"
	echo -e "\n${WHITE_FG}DESC:${RESET}Wireless connection manager.  Default action:current wifi status.\nIf SSID is passed (and wifi on) a connection will be attempted"
	exit_leave
}

while getopts ${OPTSTR} opts;do
	case $opts in
    H) usage;;
    D) dbg_set_level;;
	 b) FIND_BEST=true;;
	 c) CHOOSE_SSID=true;;
	 s) SPEEDTEST=true;;
    :) print -u2 "$0: option: -$OPTARG requires an argument"; usage;;
   \?) print -u2 "$0: unknown option $OPTARG"; usage;;
	esac
done
shift $(($OPTIND - 1))

#Execution 
[[ ${_DEBUG} -eq 0 ]] && do_smcup

#No arguments, no options
if [[ ${#} -eq 0 && ${OPTIND} -eq 1 ]];then
	MSG=$(
	status_show
	)
	exit_leave ${MSG}
fi

if [[ ${VALID_ARG} == 'false' ]];then
	if ! ssid_validate ${SSID_ARG};then
		exit_leave "Invalid parameter:${1}"
	fi
fi

#Switch wifi on/off and exit_leave
[[ ${1:l} == "off" ]] && wifi_off && exit_leave "Turning off wireless"
[[ ${1:l} == "on" ]] && wifi_on && exit_leave "Turning on wireless" 

[[ $# -ne 0 ]] && SSID_ARG=${1} #arg was SSID

if [[ -n ${SSID_ARG} ]];then
	echo "Connecting to ${SSID_ARG}..."
	CUR_SSID=$(ssid_get_current)
	if [[ ${CUR_SSID} == ${SSID_ARG} ]];then
		connection_off ${CUR_SSID}
	fi
elif [[ ${FIND_BEST} == "true" ]];then
		echo "Finding best SSID..."
		ssid_best
elif [[ ${CHOOSE_SSID} == "true" ]];then
		ssid_choose
elif [[ ${SPEEDTEST} == "true" ]];then
	speedtest
fi

exit_leave
