#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"
BLACK_BG="\033[40m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"
CSR_OFF="\033[?25l"
CSR_ON="\033[?25h"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/VALIDATE.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Constants
_SCRIPT=${0:t}
_SCRIPT_TAG="${WHITE_FG}[${RESET}${_SCRIPT}${WHITE_FG}]${RESET}"
_TERM_WIDTH=$(tput cols)
_TERM_HEIGHT=$(tput lines)

get_center () {
	local WIDTH=${1}
	local CENTER=0
	local REM=0

	CENTER=$(( WIDTH / 2 ))
	REM=$(( WIDTH % 2 ))
	[[ ${REM} -ne 0 ]] && (( CENTER++ ))

	echo ${CENTER}
}

test_horz () {
	local CONT_REF=${1}
	local CONT_WIDTH=${2}
	local NDX=0
	local MARK=0
	local X

	clear
	cursor_off
	tcup 0 ${CONT_REF};echo -n "|"
	NDX=1
	MARK=1
	for X in {1..$(( CONT_WIDTH - 2 ))};do
		[[ ${MARK} -ge 9 ]] && MARK=0 || ((MARK++))
		echo -n ${MARK}
		((NDX++))
	done
	((NDX++))
	tcup 0 $(( CONT_REF + CONT_WIDTH - 1 ));echo -n "|"
	tcup 0 0;echo -n "CONTAINER WIDTH:${NDX}"
	read
	cursor_on
	clear
}

test_vert () {
	local CONT_REF=${1}
	local CONT_HEIGHT=${2}
	local NDX=0
	local MARK=0
	local CSR=${CONT_REF}
	local X

	clear
	cursor_off
	tcup ${CSR} 80;echo -n "---"
	NDX=1
	MARK=1
	for X in {1..$(( CONT_HEIGHT - 2 ))};do
		((CSR++))
		[[ ${MARK} -ge 9 ]] && MARK=0 || ((MARK++))
		tcup ${CSR} 80;echo -n ${MARK}
		((NDX++))
	done
	((NDX++))
	tcup $(( CONT_REF + CONT_HEIGHT - 1 )) 80;echo "---"
	tcup 0 0;echo -n "CONTAINER HEIGHT:${NDX}"
	read
	cursor_on
	clear
}


test_text () {
	local CONT_REF=${1}
	local CONT_WIDTH=${2}
	local TEXT_REF=${3}
	local TEXT=${4}
	local NDX=0
	local X

	clear
	cursor_off
	tcup 0 ${CONT_REF};echo -n "|"
	NDX=1
	for X in {1..$(( CONT_WIDTH - 2 ))};do
		((NDX++))
	done
	((NDX++))
	tcup 0 $(( CONT_REF + CONT_WIDTH - 1 ));echo -n "|"
	tcup 0 0;echo -n "CONTAINER WIDTH:${NDX}"
	tcup 0 ${TEXT_REF};echo -n ${TEXT}
	read
	cursor_on
	clear
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
This script does...
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[A-Za-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		h) echo "<INT>";;
		o) echo "<INT>";;
		s) echo "<STRING>";;
		t) echo "<INT>";;
		v) echo "<INT>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [ <CONTENT_TEXT> ]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-X${RESET} returns region horizontal center"
	echo -e "${WHITE_FG}-Y${RESET} returns region vertical center"
	echo -e "${WHITE_FG}-T${RESET} test mode"
	echo -e "${WHITE_FG}-h$(opt_type h)${RESET} Horizontal center - expects container width"
	echo -e "${WHITE_FG}-o$(opt_type o)${RESET} Offset - expects width or height offset (+/-)"
	echo -e "${WHITE_FG}-t$(opt_type t)${RESET} $(opt_type s) Text center - expects container width and $(opt_type s)"
	echo -e "${WHITE_FG}-v$(opt_type v)${RESET} Vertical center - expects container height"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HDXYTh:o:t:v:"
OPTIND=0

REGION_X=false
REGION_Y=false
HORZ=false
VERT=false
TEXT=false
TEST_MODE=false
OFFSET=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     X) REGION_X=true;;
     Y) REGION_Y=true;;
     T) TEST_MODE=true;;
	  h) HORZ=true;CONTAINER_WIDTH=${OPTARG};;
	  o) OFFSET=true;OFFSET_VALUE=${OPTARG};;
	  t) TEXT=true;CONTAINER_WIDTH=${OPTARG};;
	  v) VERT=true;CONTAINER_HEIGHT=${OPTARG};;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${#} -eq 0 && ${#OPTIONS} -eq 0 ]] && usage
if [[ ${TEXT} == 'true' ]];then
	if validate_is_integer ${CONTAINER_WIDTH};then
		[[ -n ${1} ]] && TEXT_ARG=${1} || exit_leave $(err_msg_exit E "Missing argument:<TEXT>")
	else
		exit_leave $(err_msg_exit E "Invalid argument:<CONTAINER_WIDTH>:non integer")
	fi
fi

TERM_HORZ_CTR=$(get_center ${_TERM_WIDTH})
TERM_HORZ_CTR=$(( TERM_HORZ_CTR + OFFSET_VALUE ))
if [[ ${REGION_Y} == 'true' ]];then
	echo ${TERM_HORZ_CTR} && return
fi

TERM_VERT_CTR=$(get_center ${_TERM_HEIGHT})
TERM_VERT_CTR=$(( TERM_VERT_CTR + OFFSET_VALUE ))
if [[ ${REGION_X} == 'true' ]];then
	echo ${TERM_VERT_CTR} && return
fi

CONT_HORZ_CTR=$(get_center ${CONTAINER_WIDTH})
CONT_HORZ_REF=$(( TERM_HORZ_CTR - CONT_HORZ_CTR ))
CONT_HORZ_REF=$(( CONT_HORZ_REF + OFFSET_VALUE ))
if [[ ${HORZ} == 'true' ]];then
	[[ ${TEST_MODE} == 'true' ]] && test_horz ${CONT_HORZ_REF} ${CONTAINER_WIDTH} && exit_leave
	echo ${CONT_HORZ_REF} && return
fi

CONT_VERT_CTR=$(get_center ${CONTAINER_HEIGHT})
CONT_VERT_REF=$(( TERM_VERT_CTR - CONT_VERT_CTR ))
CONT_VERT_REF=$(( CONT_VERT_REF + OFFSET_VALUE ))
if [[ ${VERT} == 'true' ]];then
	[[ ${TEST_MODE} == 'true' ]] && test_vert ${CONT_VERT_REF} ${CONTAINER_HEIGHT} && exit_leave
	echo ${CONT_VERT_REF} && return
fi

if [[ ${TEXT} == 'true' ]];then
	TEXT_CTR=$(get_center ${#TEXT_ARG})
	TEXT_REF=$(( CONT_HORZ_CTR - TEXT_CTR ))
	TEXT_REF=$(( CONT_HORZ_REF + TEXT_REF ))
	[[ ${TEST_MODE} == 'true' ]] && test_text ${CONT_HORZ_REF} ${CONTAINER_WIDTH} ${TEXT_REF} ${TEXT_ARG} && exit_leave
	echo ${TEXT_REF} && return
fi
