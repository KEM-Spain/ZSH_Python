#!/usr/bin/zsh

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Constants
_LOG=/tmp/${0:t}.log
_SYS_APPS=/usr/local/bin/system/launchers

# Declarations
typeset -a _APPS_TO_SCAN=()
typeset -a _APPS_NON_DOCK=(chrome enpass)
typeset -a _BLACKLIST=(pyts org.gnome.terminal libreoffice)
typeset -A _WAITTIMES=(haruna 10 musescore 4 audacity 12 viber 4)

# Functions
apps_to_scan () {
	local -a APPS=()
	local STR
	local L

	STR=$(gsq -l favorite-apps) # Grab gsettings for dock apps
	STR=${STR:gs/,//}
	STR=$(perl -pe 's/^.*\[//;s/\]//;s/\x27//g' <<<${STR})

	APPS=(${STR})

	for L in ${=APPS};do
		echo ${L}
	done
}

get_val () {
	local KEY=${1};shift
	local VAR=${1};shift
	local SEARCHTERM=${1};shift
	local LINE=${@}
	local VAL=''
	local L

	for L in ${=LINE};do
		if [[ ${L} =~ '[=]' && ${L:l} =~ ${VAR:l} ]];then
			VAL=$(cut -d= -f2 <<< ${L})
			[[ ! ${VAL:l} =~ ${SEARCHTERM:l} ]] && continue # Ignore non SEARCHTERM
			logit ${_LOG} "KEY:${KEY} VAR:${VAR} VAL:${VAL}"
		fi
	done

	echo ${VAL}
}

has_waittime () {
	local APP=${1}
	local A
	local WT=0

	for A in ${(k)_WAITTIMES};do
		if [[ ${A:l} =~ ${APP:l} ]];then
			WT=${_WAITTIMES[${A}]}
			break
		fi
	done

	echo ${WT}
}

is_blacklisted () {
	local APP=${1}
	local A

	for A in ${_BLACKLIST};do
		[[ ${APP:l} =~ ${A:l} ]] && return 0 
	done

	return 1
}

scan_string () {
	local LINE=${@}
	local F

	for F in ${_APPS_TO_SCAN};do
		grep -q -i ${F:l} <<<${LINE:l}
		if [[ ${?} -eq 0 ]];then
			echo ${F:s/.desktop//}
		fi
	done
}

win_focus () {
	local APP=${1}
	local WIN_INFO=''
	local WID=''

	WIN_INFO=$(win_id ${APP})

	if [[ -n ${WIN_INFO} ]];then
		WID=$(cut -d '|' -f1 <<<${WIN_INFO})
		logit ${_LOG} "Setting focus to ${APP} window:${WID}"
		wmctrl -i -a ${WID}
	else
		logit ${_LOG} "Unable to get WIN_INFO for ${APP}"
	fi
}

win_maximize () {
	local APP=${1}

	win_max ${APP}
	if [[ ${?} -eq 0 ]];then
		logit ${_LOG} "Maximized ${APP} window"
	else
		logit ${_LOG} "Unable to maximize ${APP}"
	fi
}

# Execution
_APPS_TO_SCAN=("${(f)$(apps_to_scan)}")
_APPS_TO_SCAN+=${_APPS_NON_DOCK}

logit ${_LOG} "Started scan for new windows"

GOT_SIG=false
VAL=''
STR=''
while IFS= read -ru3 LINE;do
	[[ ${LINE:l} =~ 'signal' ]] && GOT_SIG=true

	if [[ ${GOT_SIG} == 'true' && ${LINE:l} =~ 'array of bytes' ]];then
		STR=$(scan_string ${LINE})
		GOT_SIG=false
	fi

	[[ ${LINE:l} =~ 'method' ]] && VAL=$(get_val method path window ${LINE})

	if [[ ${VAL:l} =~ 'terminal' && ${VAL:l} =~ 'window' ]];then
		logit ${_LOG} "GOT NEW TERMINAL WINDOW"
		win_maximize terminal
		win_focus terminal
		VAL=''
	else
		if [[ -n ${STR} ]];then
			APP=${STR}
			logit ${_LOG} "GOT APP:${APP}"

			if is_blacklisted ${APP};then
				logit ${_LOG} "APP:${APP} is blacklisted"
				STR=''
			else
				WT=$(has_waittime ${APP})
				if [[ ${WT} -ne 0 ]];then
					logit ${_LOG} "Waiting ${WT} for APP:${APP} to launch"
					sleep ${WT}
				fi

				win_maximize ${APP}
				win_focus ${APP}
				STR=''
			fi
		fi
	fi
done 3< <(dbus-monitor)
