#!/usr/bin/zsh

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Constants
_LOG=/tmp/${0:t}.log
_SYS_APPS=/usr/local/bin/system/launchers

# Declarations
typeset -a _APPS_TO_SCAN=()
typeset -a _BLACKLIST=(pyts org.gnome.Terminal libreoffice)
typeset -A _ALT_PIDS=(musescore mscore4portable pyts pyscripts brave brave/brave audacity bin/audacity)
typeset -A _WAITTIMES=(haruna 6 musescore 4 audacity 12 viber 4)

# Functions
apps_to_scan () {
	local -a APPS=()
	local STR
	local L

	STR=$(gsq -l favorite-apps) # Grab gsettings for dock apps
	STR=${STR:gs/,//}
	STR=$(perl -pe 's/^.*\[//;s/\]//;s/\x27//g' <<<${STR})

	APPS=(${STR})

	for L in ${=APPS};do
		echo ${L}
	done
}

get_val () {
	local KEY=${1};shift
	local VAR=${1};shift
	local SEARCHTERM=${1};shift
	local LINE=${@}
	local VAL=''
	local L

	for L in ${=LINE};do
		if [[ ${L} =~ '[=]' && ${L:l} =~ ${VAR:l} ]];then
			VAL=$(cut -d= -f2 <<< ${L})
			[[ ! ${VAL:l} =~ ${SEARCHTERM:l} ]] && continue # Ignore non SEARCHTERM
			logit ${_LOG} "KEY:${KEY} VAR:${VAR} VAL:${VAL}"
		fi
	done

	echo ${VAL}
}

get_wid () {
	local APP=${1}
	local PID
	local TRY
	local RETRIES=20
	local WID=''
	local PGREP_MAX=15 # pgrep max is 15 chars

	logit "Attempting to get PID and WID for:${APP}..."
	while true;do
		((TRY++))
		if [[ ${TRY} -gt ${RETRIES} ]];then
			logit "Failed to get PID for:${APP} - exceeded retries:${RETRIES}" 
			break
		fi
		if [[ -n ${_ALT_PIDS[${APP}]} ]];then
			PID=$(ps aux | grep -- ${${_ALT_PIDS[${APP}]}[1,${PGREP_MAX}]} | head -1 | tr -s '[:space:]' | cut -d' ' -f2)
		else
			PID=$(pgrep -in ${APP[1,${PGREP_MAX}]})
		fi
		if [[ -n ${PID} ]];then
			logit "Got ${APP} PID:${PID}"
			while true;do
				((TRY++))
				if [[ ${TRY} -gt ${RETRIES} ]];then
					logit "Failed to get WID for:${APP} - exceeded retries:${RETRIES}" 
					break 2
				fi
				WID=$(wmctrl -lp | sort -r | grep -m1 ${PID} | cut -d' ' -f1) # Most recent
				if [[ -n ${WID} ]];then
					logit "Got ${APP} WID:${WID}"
					break 2
				fi
				sleep 1 
			done
		fi
		sleep .1
	done
	
	echo ${WID}
}

scan_string () {
	local LINE=${@}
	local F

	for F in ${_APPS_TO_SCAN};do
		grep -q -i ${F:l} <<<${LINE:l}
		if [[ ${?} -eq 0 ]];then
			echo ${F:s/.desktop//}
		fi
	done
}

win_focus () {
	local APP=${1}
	local WID=''

	WID=$(get_wid ${APP})
	if [[ -n ${WID} ]];then
		logit ${_LOG} "Setting focus to ${APP} window"
		wmctrl -i -a ${WID}
	else
		logit ${_LOG} "Unable to focus ${APP} window"
	fi
}

win_maximize () {
	local APP=${1}

	logit ${_LOG} "Maximizing ${APP} window"
	win_max ${APP}
}

# Execution
_APPS_TO_SCAN=("${(f)$(apps_to_scan)}")

logit ${_LOG} "Started scan for new windows"

GOT_SIG=false
VAL=''
STR=''
while IFS= read -ru3 LINE;do
	[[ ${LINE:l} =~ 'signal' ]] && GOT_SIG=true

	if [[ ${GOT_SIG} == 'true' && ${LINE:l} =~ 'array of bytes' ]];then
		STR=$(scan_string ${LINE})
		GOT_SIG=false
	fi

	[[ ${LINE:l} =~ 'method' ]] && VAL=$(get_val method path window ${LINE})

	if [[ ${VAL:l} =~ 'terminal' ]];then
		logit ${_LOG} "GOT TERMINAL"
		win_maximize terminal
		win_focus terminal
		VAL=''
	else
		if [[ -n ${STR} ]];then
			if [[ ${STR} =~ [_-] ]];then # Parse app string
				logit ${_LOG} "Parsing APP:${STR}"
				if [[ ${STR} =~ '_' ]];then
					APP=$(cut -d'_' -f1 <<<${STR}) # Underscore
				elif [[ ${STR} =~ '-' ]];then
					APP=$(cut -d'-' -f1 <<<${STR}) # Hyphen
				fi
			else
				APP=${STR}
			fi

			if [[ -n ${APP} ]];then
				logit ${_LOG} "GOT APP:${APP}"
				if [[ ${_BLACKLIST[(i)${APP}]} -le ${#_BLACKLIST} ]];then
					logit ${_LOG} "${APP} is blacklisted - skipping"
				else
					if [[ -n ${_WAITTIMES[${APP}]} ]];then
						logit ${_LOG} "Waiting ${_WAITTIMES[${APP}]} seconds for ${APP} to launch"
						sleep ${_WAITTIMES[${APP}]}
					fi
					win_maximize ${APP}
					win_focus ${APP}
				fi
			else
				logit ${_LOG} "Missing value for APP:${APP}"
			fi
			STR=''
		fi
	fi
done 3< <(dbus-monitor)
