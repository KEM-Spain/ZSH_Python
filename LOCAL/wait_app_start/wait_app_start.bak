#!/usr/bin/zsh

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Constants
_LOG=/tmp/${0:t}.log
_SCRIPT=${0:t}
_SYS_APPS=/usr/local/bin/system/launchers

# Declarations
typeset -A _APP_TAGS=(brave-browser brave com.obsproject.studio obs firefox_firefox firefox haruna_haruna haruna simple-scan "document scanner")
typeset -A _FLD_LIST=(WID 1 DID 2 PID 3 CLIENT 4 TITLE 5)
typeset -A _SCAN=()
typeset -A _SEEN=()
typeset -A _WAITTIMES=(haruna 10 musescore 4 audacity 12 viber 3)
typeset -a _APPS_NON_DOCK=(chrome enpass vlc losslesscut)
typeset -a _APPS_TO_SCAN=()
typeset -a _BLACKLIST=(enpass pyts libreoffice org.gnome.terminal)
typeset -aU _WIN_LIST=()

# Functions
apps_to_scan () {
	local -a APPS=()
	local STR
	local L

	STR=$(gsq -l favorite-apps) # Grab gsettings for dock apps
	STR=${STR:gs/,//}
	STR=$(perl -pe 's/^.*\[//;s/\]//;s/\x27//g' <<<${STR})

	APPS=(${STR})

	for L in ${=APPS};do
		echo ${L:l:s/.desktop//}
	done
}

clear_idle_apps () {
	local APP
	local PIDS
	local S
	local -a APPS_TO_REMOVE=()

	[[ ${#_SEEN} -eq 0 ]] && return

	for S in ${(k)_SEEN};do
		APP=$(get_app_tag ${S})
		PIDS=$(pgrep -ic ${APP})
		[[ ${PIDS} -eq 0 ]] && APPS_TO_REMOVE+=${APP}
	done

	for S in ${APPS_TO_REMOVE};do
		logit ${_LOG} "Clearing any idle applications"
		unset "_SEEN[${S}]"
		logit ${_LOG} "${S} NOT RUNNING - CLEARED FROM SEEN"
	done
}

get_app_tag () {
	local APP=${1:l} # Lowercase
	local APP_TAG=''

	# Handle any alternate tags
	if [[ -n ${_APP_TAGS[${APP}]} ]];then
		APP_TAG=${_APP_TAGS[${APP}]}
	else
		APP_TAG=${APP}
	fi

	echo ${APP_TAG:l}
}

get_cur_win () {
	local -a CUR_WIN=()
	local F1 F2 F3 F4 F5 MAX
	local L

	sleep 1 # Wait for windows to settle

	_WIN_LIST=()

	CUR_WIN=("${(f)$(wmctrl -lp | tr -s '[:space:]')}")

	for L in ${CUR_WIN};do
		F1=$(cut -d' ' -f${_FLD_LIST[WID]} <<<${L})
		F2=$(cut -d' ' -f${_FLD_LIST[DID]} <<<${L})
		F3=$(cut -d' ' -f${_FLD_LIST[PID]} <<<${L})
		F4=$(cut -d' ' -f${_FLD_LIST[CLIENT]} <<<${L})
		F5=$(cut -d' ' -f${_FLD_LIST[TITLE]}- <<<${L})

		[[ ${F2} == '-1' ]] && continue # Eliminate invisible

		_WIN_LIST+="${F1}|${F2}|${F3}|${F4}|${F5}"
	done
}

get_val () {
	local KEY=${1};shift 
	local VAR=${1};shift
	local SEARCHTERM=${1};shift
	local LINE=${@}
	local VAL=''
	local L

	for L in ${=LINE};do
		if [[ ${L} =~ '[=]' && ${L:l} =~ ${VAR:l} ]];then
			VAL=$(cut -d= -f2 <<< ${L})
			[[ ! ${VAL:l} =~ ${SEARCHTERM:l} ]] && continue # Ignore non SEARCHTERM
		fi
	done

	echo ${VAL}
}

get_wid () {
	local APP=${1}
	local TITLE=''
	local WID=''
	local W

	for W in ${_WIN_LIST};do
		TITLE=$(cut -d'|' -f${_FLD_LIST[TITLE]} <<<${W})
		grep -qi ${APP} <<<${TITLE}
		[[ ${?} -eq 0 ]] && WID=$(cut -d'|' -f${_FLD_LIST[WID]} <<<${W}) && break
	done

	echo ${WID}
}

has_waittime () {
	local APP=${1}
	local WT=0
	local A

	for A in ${(k)_WAITTIMES};do
		[[ ${A:l} =~ ${APP:l} ]] && WT=${_WAITTIMES[${A}]} && break
	done

	[[ -z ${WT} ]] && echo 0 || echo ${WT}
}

is_blacklisted () {
	local APP=${1}
	local A

	for A in ${_BLACKLIST};do
		[[ ${APP:l} =~ ${A:l} ]] && return 0 
	done

	return 1
}

is_maximized () {
	local APP=${1}
	local WID=''

	get_cur_win 

	WID=$(get_wid ${APP})
	[[ -z ${WID} ]] && return 2

	xwininfo -wm -id ${WID} 2>/dev/null | grep -qi 'maximized'
	return ${?}
}

scan_apps () {
	local APP=''
	local RC=0
	local S
	local WT

	if [[ -n ${_SEEN} ]];then
		clear_idle_apps
	fi

	for S in ${(k)_SCAN};do
		if [[ ${_APPS_TO_SCAN[(i)${S:l}]} -le ${#_APPS_TO_SCAN} ]];then
			if [[ ${_BLACKLIST[(i)${S:l}]} -le ${#_BLACKLIST} ]];then
				logit ${_LOG} "BLACKLISTED ${S}"
			else
				logit ${_LOG} "SEEKING:${S:l}"
				APP=$(get_app_tag ${S})

				is_maximized ${APP}
				RC=${?}

				if [[ -z ${_SEEN[${APP}]} ]];then
					case ${RC} in
						0) logit ${_LOG} "${APP} ALREADY MAXIMIZED"
							_SEEN[${APP}]=1
							logit ${_LOG} "ADDED ${APP} TO SEEN"
							;;
						1) WT=$(has_waittime ${APP})
							logit ${_LOG} "${APP} has ${WT} second waittime, waiting..."
							[[ ${WT} -ne 0 ]] && sleep ${WT}
							logit ${_LOG} "MAXIMIZING ${APP}";win_max ${APP}
							_SEEN[${APP}]=1
							logit ${_LOG} "ADDED ${APP} TO SEEN"
							;;
						2) logit ${_LOG} "${APP} NO WINDOW EXISTS";;
					esac
				else
					logit ${_LOG} "NO ACTION - ALREADY SEEN:${APP}"
				fi
			fi
		else
			logit ${_LOG} "MONITORING APPS"
		fi
	done

	_SCAN=()
}

# Execution
_APPS_TO_SCAN=("${(f)$(apps_to_scan)}")
_APPS_TO_SCAN+=(${_APPS_NON_DOCK})

logit ${_LOG} "Started scan for new windows"
logit ${_LOG} "_APPS_TO_SCAN:\n$(for A in ${(o)_APPS_TO_SCAN};do echo "DBUS:${A} TAG:$(get_app_tag ${A})";done)"

while IFS= read -ru3 LINE;do
	if [[ ${LINE:l} =~ 'method' ]];then
		VAL=$(get_val method path window ${LINE})
		if [[ ${VAL:l} =~ 'terminal' && ${VAL:l} =~ 'window' ]];then
			logit ${_LOG} "GOT TERMINAL - Calling win_max"
			win_max terminal
		fi
	else
		if [[ (${LINE:l} =~ 'string' || ${LINE:l} =~ 'array') && ${LINE:l} =~ '\.desktop' ]];then
			STR=$(grep --color=never -o -E '["].*.desktop["]' <<<${LINE} | tr -d '["]' | sed 's/.desktop//')
			_SCAN[${STR:t}]=1
			scan_apps
		fi
	fi
done 3< <(dbus-monitor)
