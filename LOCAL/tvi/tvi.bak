#!/usr/bin/zsh
REVERSE="\033[7m"
RESET="\033[m"
BOLD="\033[1m"
BLACK_FG="\033[30m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"

#Constants
ADD_PATH=/usr/local/bin/system/launchers
CACHE=~/.${0:t}/cached_targets
EDITABLE='ascii\|text\|script'
EDITOR_CMD=/usr/local/bin/system/launchers/run_vi
FUNCTIONS=/etc/zsh/system_wide/functions
GAL=/usr/local/bin/gal
LIB=/usr/local/lib
SCRIPT=${0:t}

#Globals
_TARGET=''

#Declarations
typeset -a FILES
typeset -aU CANDIDATES
typeset -a BLOCKED_DIRS=(snap flatpak)
typeset -A CACHED__TARGETS=()

#Imports
source ${LIB}/common.zsh

#Functions
is_blocked_dir () {
	local DIR=${1}
	local D

	[[ ${_DEBUG} -ne 0 ]] && dbg "Checking if ${DIR} is blocked"

	for D in ${BLOCKED_DIRS};do
		[[ ${DIR} =~ ".*\/${D}\/.*" ]] && return 0 || return 1
	done
}

is_editable () {
	FILE=${1}

	[[ ${_DEBUG} -ne 0 ]] && dbg "Checking 'file -L ${FILE}' for ${EDITABLE}"
	file -L ${FILE} 2>/dev/null | grep -qi ${EDITABLE} #filter editable result
	[[ $? -eq 0 ]]	&& return 0 || return 1
}

write_cache () {
	local FILE_ARG=${1}
	local _TARGET=${2}

	[[ ! -d ${CACHE:h} ]] && mkdir ${CACHE:h}

	sed -i "/${FILE_ARG}|/d" ${CACHE}

	_TARGET=$(realpath ${_TARGET})

	echo "${FILE_ARG}|${_TARGET}" >> ${CACHE}
	sort -t'|' -k1,1 -u -o ${CACHE} ${CACHE} 
}

read_cache () {
	local LINE
	local _TARGET
	local TPATH

	[[ ! -e ${CACHE} ]] && return

	while read LINE;do
		_TARGET=$(cut -d'|' -f1 <<<${LINE})
		TPATH=$(cut -d'|' -f2 <<<${LINE})
		CACHED__TARGETS[${_TARGET}]=${TPATH}
	done < ${CACHE}
}

validate_fn () {
		local FN=${1}

		if [[ ! ${FN:t:l} =~ ${FILE_ARG:l} ]];then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${RED_FG}${FN}${RESET} no match for cmdline arg"
			return 1 #not an arg match
		fi
		if is_blocked_dir ${FN};then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${RED_FG}${FN}${RESET} is blocked..."
			return 1 #is blocked
		fi
		if [[ $(file ${FN}) =~ 'compressed' ]];then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${RED_FG}Ignoring compressed files...${RESET}"
			return 1 #omit compressed
		fi
		if [[ ${FN:h} == "." ]];then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${RED_FG}Ignoring hidden files...${RESET}"
			return 1 #omit hidden files
		fi
		if [[ ${FN:e} == "bak" ]];then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${RED_FG}Ignoring if .bak files...${RESET}"
			return 1 #omit bak files
		fi
		if ! is_editable ${FN};then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${RED_FG}${FN} not editable${RESET}"
			return 1 #not editable
		else
			[[ ${_DEBUG} -ne 0 ]] && dbg "${GREEN_FG}${FN}${RESET} is editable"
			return 0 #editable
		fi
}

try_whereis () {
	local ARG=${1}
	local L

	echo "Searching with whereis..."

	[[ ${_DEBUG} -ne 0 ]] && dbg "Invoking whereis..."

	LIST=($(whereis ${ARG} | cut -d: -f2 | sed 's/^[ \t]*//g'))
	LIST+=($(whereis -B ${ADD_PATH} -f ${ARG} | cut -d: -f2 | sed 's/^[ \t]*//g'))

	[[ ${_DEBUG} -ne 0 ]] && dbg "${0} found ${#LIST} possible candidates"

	for L in ${LIST};do
		if ! validate_fn ${L};then
			continue
		else
			CANDIDATES+=${L}
		fi
	done

	if [[ ${_DEBUG} -ne 0 ]];then
		[[ -z ${CANDIDATES[1]} ]] && dbg "${0} is returning ${RED_FG}0${RESET} valid candidates" || dbg "${0} will return ${GREEN_FG}${#CANDIDATES}${RESET} candidates"
	fi
}

try_locate () {
	local ARG=${1}
	local L

	echo "Searching with locate..."

	[[ ${_DEBUG} -ne 0 ]] && dbg "Invoking locate..."

	echo "Updating locate database..."
	sudo updatedb 2>/dev/null
	LIST=("${(f)$(sudo locate -r "\/${ARG:q}$")}") 

	[[ ${_DEBUG} -ne 0 ]] && dbg "${0} found ${#LIST} possible candidates"

	for L in ${LIST};do
		if ! validate_fn ${L};then
			continue
		else
			CANDIDATES+=${L}
		fi
	done

	if [[ ${_DEBUG} -ne 0 ]];then
		[[ -z ${CANDIDATES[1]} ]] && dbg "${0} is returning ${RED_FG}0${RESET} valid candidates" || dbg "${0} will return ${GREEN_FG}${#CANDIDATES}${RESET} candidates"
	fi
}

try_alias () {
	local ARG=${1}
	local RC=1
	local ALIAS

	echo "Searching aliases..."

	[[ ${_DEBUG} -ne 0 ]] && dbg "Invoking gal..."

	ALIAS=$(${GAL} -axe ${ARG} 2>/dev/null)

	if [[ ${_DEBUG} -ne 0 ]];then
		[[ -n ${ALIAS} ]] && dbg "${0}:gal returned:${ALIAS}" || dbg "${0}:gal was null"
	fi

	if [[ ${ALIAS:l} != 'no matches found' ]];then
		[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${WHITE_FG}${1}${RESET} is an alias for:${WHITE_FG}${ALIAS}${RESET}"

		TOKEN=$(echo ${ALIAS} | cut -d' ' -f1) #grab first token
		if [[ ${TOKEN} =~ "sudo" ]];then #check for sudo
			TOKEN=$(echo ${ALIAS} | cut -d' ' -f2) #grab second token
		fi

		ALIAS=${TOKEN}

		if [[ -h ${ALIAS} ]];then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${ALIAS} is a link. Getting realpath..."
			LINK_F=$(realpath ${ALIAS})
			if is_blocked_dir ${LINK_F};then
				continue
			fi
			[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:realpath returned:${LINK_F}"
			if [[ -e ${LINK_F} ]];then #validate
				if is_editable ${ALIAS};then
					CANDIDATES+=${ALIAS}
					RC=0
					[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${WHITE_FG}Found (alias to link)${RESET}:${ALIAS}, ${GREEN_FG}Added to list of candidates${RESET}"
				else
					[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:LINK:${LINK_F} is ${RED_FG}invalid${RESET}"
				fi
			fi
		elif [[ -e ${ALIAS} ]];then #validate
			if is_blocked_dir ${ALIAS};then
				continue
			fi
			if is_editable ${ALIAS};then
				CANDIDATES+=${ALIAS}
				RC=0
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${WHITE_FG}Found (alias to file)${RESET}:${ALIAS}, ${GREEN_FG}Added to list of candidates${RESET}"
			else
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:ALIAS:${ALIAS} does NOT exist"
			fi
		fi
	fi

	[[ ${_DEBUG} -ne 0 && -z ${CANDIDATES[1]} ]] && dbg "${0}:gal returned no valid candidates"
	return ${RC}
}

set_target () {
	local ARG=$@
	local TOKEN
	local -a LIST
	local -a FILE FILES
	local RPATH
	local MATCHES
	local NDX
	local FN

	MATCHES=0
	try_alias ${ARG}
	MATCHES=${#CANDIDATES}
	echo "${MATCHES} alias matches"

	try_whereis ${ARG}
	echo "$((${#CANDIDATES}-${MATCHES})) whereis matches"
	((MATCHES+=${#CANDIDATES}))

	try_locate ${ARG}
	echo "$((${#CANDIDATES}-${MATCHES})) locate matches"

	_TARGET=''

	#Process candidates
	if [[ -n ${CANDIDATES} ]];then
		echo "${MAGENTA_FG}Evaluating candidates...${RESET}" >&2

		[[ ${_DEBUG} -ne 0 ]] && dbg "Prioritizing candidates..." >&2

		local -a PRIORITIZE
		local -a PFILES

		for C in ${CANDIDATES};do
			if [[ -e ${C} && ${C} == $(realpath ${C:t}) ]];then
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:LOCAL CANDIDATE:${WHITE_FG}${C}${RESET} added"
				PRIORITIZE+="1|${C}"
			elif [[ -e ${C} && ${C} =~ '/usr/local/bin' ]];then
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:PRIORITY CANDIDATE:${WHITE_FG}${C}${RESET} added"
				PRIORITIZE+="2|${C}"
			elif [[ -e ${C} && ${C} =~ 'bin' ]];then
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:MEDIUM CANDIDATE:${WHITE_FG}${C}${RESET} added"
				PRIORITIZE+="3|${C}"
			elif [[ -e ${C} ]];then
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:LOW CANDIDATE:${WHITE_FG}${C}${RESET} added"
				PRIORITIZE+="4|${C}"
			fi
		done

		#Prioritize multiple candidates
		if [[ ${#PRIORITIZE} -eq 1 ]];then
			_TARGET=$(echo ${PRIORITIZE[1]} | cut -d'|' -f2) #only 1 match; take it
		else
			echo "${WHITE_FG}${ARG}${RESET} matched multiple files..." #prompt for selection if multiple hits
			while true;do
				NDX=0
				for P in ${(on)PRIORITIZE};do
					((NDX++))
					FN=$(echo ${P} | cut -d'|' -f2)
					echo "${NDX}) ${FN}"
				done
				echo -n "Choose a file [${WHITE_FG}1..${#PRIORITIZE}${RESET}] or ${WHITE_FG}<ENTER>${RESET} to skip:"
				read PFN
				[[ -z ${PFN} ]] && break
				if [[ ${PFN} -ge 1 && ${PFN} -le ${#PRIORITIZE} ]];then
					_TARGET=$(echo ${PRIORITIZE[${PFN}]} | cut -d'|' -f2)
					break
				else
					continue
				fi
			done
		fi
	fi
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}
parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	tabs 5
	echo -e "\n${WHITE_FG}Usage${RESET}: ${SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-a${RESET} force search to use all available methods"
	echo -e "${WHITE_FG}-i${RESET} ignore cached edits"
	echo -e "${WHITE_FG}-w${RESET} warn if local file"
	echo -e "\n${WHITE_FG}DESC${RESET}:Searches for files to edit based on predefined or derived locations in the system\n\tOption -a(ll) will invoke locate even if matches have already been found by other more rapid methods.\n\tUpdating of the locate DB is time consuming and is avoided by default.\n"
	exit_leave
}

OPTSTR=":HDadiw"

IGNORE_CACHE=false
WARN=false
SEARCH_ALL=false
OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     a) SEARCH_ALL=true;;
     i) IGNORE_CACHE=true;;
     w) WARN=true;;
     :) print -u2 "${SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${SCRIPT}: unknown option -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--

#--Execution--
fc -R
RAW_CMD_LINE=($(fc -lnr | head -1)) #unexpanded command line

#Validate editor
if [[ ! -x ${EDITOR_CMD} ]];then
	exit_leave "${WHITE_FG}EDITOR_CMD${RESET}:${EDITOR_CMD} is not a valid executable${RESET}."
fi

#Catch missing argument
[[ $# -eq 0 ]] && exit_leave "${WHITE_FG}${SCRIPT}${RESET}:missing $(opt_type f)"

#Catch excessive arguments
if [[ $# -gt 1 ]];then
	try_alias ${RAW_CMD_LINE[-1]}
	if [[ $? -ne 0 ]];then
		FILE_ARG="${RAW_CMD_LINE[-1]}" #override alias
	else
		exit_leave echo "${RED_FG}Only one argument allowed${RESET}, Args received (${#}):${@}"
	fi
fi

#Set filename
[[ -z ${FILE_ARG} ]] && FILE_ARG=${1:t}

echo "Searching for ${FILE_ARG}..."

#Local file takes precedence
if	[[ -e ./${FILE_ARG} && -f ./${FILE_ARG} ]];then
	[[ ${_DEBUG} -ne 0 ]] && dbg "Found local file:${FILE_ARG}"
	#Set candidate
	CANDIDATES+=$(realpath ${FILE_ARG})
fi

#Search for matching cache entries
if [[ ${IGNORE_CACHE} == "false" ]];then
	[[ ${_DEBUG} -ne 0 ]] && dbg "Inspecting cached edits..."
	read_cache
	for T in ${(k)CACHED__TARGETS};do
		[[ ${_DEBUG} -ne 0 && ${FILE_ARG} == ${T} ]] && dbg "Using cached edit: ${CACHED__TARGETS[${T}]}"
		if [[ ${FILE_ARG} == ${T} && -e ${CACHED__TARGETS[${T}]} ]];then
			if [[ ${_DEBUG} -ne 0 ]];then
				${EDITOR_CMD} ${CACHED__TARGETS[${T}]}
				exit_leave
			else
				exec ${EDITOR_CMD} ${CACHED__TARGETS[${T}]}
				exit_leave
			fi
		fi
	done
fi

#Find a suitable candidate
set_target ${FILE_ARG}
FN=${_TARGET}

[[ ${_DEBUG} -ne 0 && -n ${_TARGET} ]] && dbg "main:set_target returned:${_TARGET}"

#Verify candidate exists and is editable; reject fail
if [[ -e ${FN} ]];then
	if ! is_editable ${FN};then
		msg_box -p  "<w>File<N>:${FN}<I><r> not editable<N>|$(file -b ${FN} | fold -s -w50)| |<w>Press any key...<N>"
		exit_leave
	fi

	[[ ${_DEBUG} -ne 0 ]] && dbg "FN:${FN} is editable, calling ${FUNCTIONS}/run_vi for editing..."

	#Cache this edit
	write_cache "${FILE_ARG}" "${FN}"
	[[ ${_DEBUG} -ne 0 ]] && ${EDITOR_CMD} ${FN} || exec ${EDITOR_CMD} ${FN}
else
	msg_box -p "<r>No candidate found<N> for:<w>${FILE_ARG}<N>"
fi

exit_leave
