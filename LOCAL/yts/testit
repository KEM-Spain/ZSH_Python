#!/usr/bin/zsh
 # Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/PATH.zsh
source ${_LIB_DIR}/DATE.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SELECT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Declarations
typeset -A _COORDS=(X 10 Y 33 H 10 W 86)
typeset -A _ALERT_COORDS=(X $(( _COORDS[X] + 5 )) Y $(( _COORDS[Y] + _COORDS[W] -25 )))
typeset -A _BREAK_COORDS=(X $((_COORDS[X]+3)) Y $((_COORDS[Y]+3)) W $((_COORDS[W]-6)))
typeset -A _DISPLAY_KEYS=()
typeset -A _DOWNLOADS=()
typeset -A _FAILED=()
typeset -A _FAVORITE_ENGINE=()
typeset -A _FAVORITE_OPTS=()
typeset -A _FIELD_LEN=()
typeset -A _FUTURE=()
typeset -A _PARTIALS=()
typeset -A _REJECTS=()
typeset -A _SEEN=()
typeset -A _SORT_TABLE=()
typeset -A _STATUS_MSGS=()
typeset -a _ACRONYMS=()
typeset -a _LOCAL_LIST=()

# Constants
_ACRONYMS_FN=/usr/local/etc/acronyms.txt
_YTS_DIR=~/.yts
_SRC_DIR=/usr/local/src
_ACTION=download
_ALERT_TM=.2
_CMD_LINE_ARGS=false
_DOWNLOAD_DIR=~/Downloads/Torrents/Library/web
#_DOWNLOAD_LOG=${_YTS_DIR}/yts.downloads
_DOWNLOAD_LOG=./yts.downloads
_ERROR_LIMIT=5
_ERROR_LOG=/tmp/yts.err
_FIELD_LEN[age]=30
_FIELD_LEN[agetime]=40
_FIELD_LEN[author]=26
_FIELD_LEN[title]=80
_JS_SCRIPT=/usr/local/etc/yts.js
_MAX_ERRORS=10
_MAX_FLEN=85
_MAX_HDR=65
_MAX_TITLE=75
_OBJECT=video
_PAUSE_TM=2
_SORT_DEFAULT=(youtube 1:a rumble 1:a)
_UPD_MARKER=${_YTS_DIR}/yts-upd.lastrun
_YTS_DBG_LOG=/tmp/yt.dbg.log
_YTS_FAVORITES=${_YTS_DIR}/yts_favorites
_YTS_URL_LOG=/tmp/yts.url.log

# Globals
g_CUSTOM_LIST=false
g_DISPLAY_KEY=''
g_ENGINE_KEY=''
g_GOT_URL=false
g_LAST_CODE_UPD=?
g_LAST_MASK_Y=0
g_LIVE=''
g_LIVE_OPT=''
g_PID=?
g_PROXY_CMD=''
g_QRY_ENGINE=''
g_QUERY_KEY=''
g_SEARCH_TYPE=''
g_STRICT=false
g_STRICT_MSG=''
g_YTS_LOG=''
g_WHEN=''

log_update () {
	local -A SEEN=()
	local FN_HIT=''
	local HAS_NEW_LOG=false
	local INODE=''
	local LINE=''
	local LOG_LINE=''
	local NEW_LOG=/tmp/log.new
	local L

	{
		[[ -e /tmp/log.new ]] && /bin/rm -f ${NEW_LOG}
		echo "${0}: LOG lines BEFORE update:$(wc -l ${_DOWNLOAD_LOG})" >> ${_YTS_DBG_LOG}

		HAS_NEW_LOG=false
		while read -u3 LINE;do
			echo "========================================="
			INODE=$(cut -d'|' -f1 <<<${LINE})
			echo "LOG INODE:${INODE}"
			if [[ ${SEEN[${INODE}]} -eq 1 ]];then
				echo "${0}: ERROR Got duplicate inode:${INODE} - skipping duplicates" >> ${_YTS_DBG_LOG}
				continue
			fi
			SEEN[${INODE}]=1
			FN_HIT=$(find ${_DOWNLOAD_DIR} -maxdepth 1 -inum ${INODE})
			if [[ -n ${FN_HIT} ]];then
				echo "FILE INODE:${INODE}"
				HAS_NEW_LOG=true
				LOG_LINE=$(grep -m1 ${INODE} ${_DOWNLOAD_LOG} 2>/dev/null)
				echo "LOG LINE:${LOG_LINE}"
				[[ ${?} -eq 0 ]] && echo ${LOG_LINE} >> ${NEW_LOG}
			else
				echo "EXPIRED INODE:${INODE}"
				echo "${0}: Skipping expired inode:${INODE}" >> ${_YTS_DBG_LOG}
				SEEN[${INODE}]=1
				continue
			fi
			read "Waiting"
		done 3< ${_DOWNLOAD_LOG}

		if [[ ${HAS_NEW_LOG} == 'true' ]];then
			cp ${_DOWNLOAD_LOG} ${_DOWNLOAD_LOG}.bak
			mv -f ${NEW_LOG} ${_DOWNLOAD_LOG}
			echo "${0}: LOG lines AFTER update:$(wc -l ${_DOWNLOAD_LOG})" >> ${_YTS_DBG_LOG}
		else
			/bin/rm -f ${_DOWNLOAD_LOG} && touch ${_DOWNLOAD_LOG} # No files present - initialize new log
			echo "${0}: Empty log - initializing new log" >> ${_YTS_DBG_LOG}
		fi
	} 2>/dev/null
}

log_update
