#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"
BLACK_BG="\033[40m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Constants
_COL_MAX=140

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/DURABLE.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Declarations
typeset -a LIST
typeset -a RAWLIST
typeset -a GREP_OPTS=()
typeset LINE_LIMIT=100

read -r -d '' DESC<<EOF
Find files containing <SEARCHTERM> in or below the current directory
\tunless an alternate <PATH> is given
EOF

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[A-Za-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		O) echo "<FILE>";;
		P) echo "<PATH>";;
		i) echo "<INT>";;
		m) echo "<MATCHES>";;
		s) echo "<SEARCHTERM>";;
		t) echo "<TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type s)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-B${RESET} allow scanning of .bak files (default: skip)"
	echo -e "${WHITE_FG}-A${RESET} disallow ansi color"
	echo -e "${WHITE_FG}-I${RESET} case sensitive"
	echo -e "${WHITE_FG}-L${RESET} list files on one line"
	echo -e "${WHITE_FG}-O $(opt_type O)${RESET} redirect output to $(opt_type O)"
	echo -e "${WHITE_FG}-P $(opt_type P)${RESET} alternate path (default: PWD)"
	echo -e "${WHITE_FG}-h${RESET} suppress file name in output (only for use with option O)"
	echo -e "${WHITE_FG}-l${RESET} list files"
	echo -e "${WHITE_FG}-m $(opt_type m)${RESET} max matches to process (default: all)"
	echo -e "${WHITE_FG}-n${RESET} line numbers"
	echo -e "${WHITE_FG}-o${RESET} only matched"
	echo -e "${WHITE_FG}-r${RESET} recurse"
	echo -e "${WHITE_FG}-t $(opt_type t)${RESET} files limited to $(opt_type t) (zsh,media,etc.)"
	echo -e "${WHITE_FG}-v${RESET} inverted search"
	echo -e "${WHITE_FG}-w${RESET} whole word match"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HDABILFO:P:lLhm:nort:vw"

GREP_OPTS=(-P -I -d skip)

FILELIST=false
FILE_OUT=''
FTYPE=''
ONE_LINE=false
PATH_ARG=${PWD}

GR_OPT_BAK=false
GR_OPT_CASE='--ignore-case'
GR_OPT_COLOR='--color=always'
GR_OPT_FN='--with-filename'
GR_OPT_INVERT=''
GR_OPT_LINE=''
GR_OPT_LIST=''
GR_OPT_LITERAL=''
GR_OPT_MAX_MATCH=''
GR_OPT_ONLY=''
GR_OPT_RECURSE=''
GR_OPT_WORD=''

OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case ${OPTION} in
     H) usage;;
	  D) dbg_set_level;;
     A) GR_OPT_COLOR='--color=never';;
	  B) GR_OPT_BAK=true;;
     F) GR_OPT_LITERAL=-F;;
     I) GR_OPT_CASE='--no-ignore-case';;
     L) GR_OPT_LIST='-l';FILELIST=true;ONE_LINE=true;;
     O) FILE_OUT=${OPTARG};;
     P) PATH_ARG=${OPTARG};;
     h) GR_OPT_FN='--no-filename';;
     l) GR_OPT_LIST=-l;FILELIST=true;;
     m) GR_OPT_MAX_MATCH="-m${OPTARG}";;
     n) GR_OPT_LINE='-n';;
     o) GR_OPT_ONLY='-o';;
     r) GR_OPT_RECURSE='-r';;
     t) FTYPE=${OPTARG};;
     v) GR_OPT_INVERT='-v';;
     w) GR_OPT_WORD='-w';;
     :) print -u2 "${_SCRIPT_TAG} ${BOLD}${RED_FG}Option error${RESET}: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${_SCRIPT_TAG} ${BOLD}${RED_FG}Unknown option${RESET} - ${OPTARG}"; usage;;
	esac
done
shift $(( OPTIND - 1 ))
#--End GetOpts--
SEARCHTERM=${@} 

# Execution
[[ ${_DEBUG} -eq 0 && FILELIST == 'false' ]] && do_smcup

# Arg validation
[[ -z ${SEARCHTERM} ]] && usage "${_SCRIPT_TAG} ${RED_FG}Missing argument${RESET}:<SEARCHTERM>"
[[ ! -t 0 ]] && exit_leave $(err_msg_exit W "No support for piped input")
[[ ${GR_OPT_FN} == '--no-filename' && -z ${FILE_OUT} ]] && exit_leave "${_SCRIPT_TAG} Option:-h is only valid in combination with option:-O"

# Set grep options
GREP_OPTS+=${GR_OPT_CASE}
GREP_OPTS+=${GR_OPT_COLOR}
GREP_OPTS+=${GR_OPT_FN}
GREP_OPTS+=${GR_OPT_INVERT}
GREP_OPTS+=${GR_OPT_LINE}
GREP_OPTS+=${GR_OPT_LIST}
GREP_OPTS+=${GR_OPT_LITERAL}
GREP_OPTS+=${GR_OPT_MAX_MATCH}
GREP_OPTS+=${GR_OPT_ONLY}
GREP_OPTS+=${GR_OPT_RECURSE}
GREP_OPTS+=${GR_OPT_WORD}

# Limit to file type if specified
FTYPE_MSG='all'
if [[ -n ${FTYPE} ]];then
	FLIST="${PATH_ARG}/*${FTYPE}"
	[[ ${FTYPE} == 'bak' ]] && GR_OPT_BAK=true
	FTYPE_MSG=${FTYPE}
#	typeset -a FLIST=()
#	FLIST=("${(f)$(find ${PATH_ARG} -maxdepth 1 -type f ! -path ${PATH_ARG} | xargs file | grep --color=never -i ${FTYPE} | cut -d: -f1)}")
#	if [[ -n ${FLIST} ]];then
#		FTYPE_MSG="type:${FTYPE}"
#	else
#		exit_leave $(err_msg_exit E "No files qualified for type:${FTYPE}")
#	fi
else
	FLIST="${PATH_ARG}/(*|.*)"
fi

# Build CMD
CMD="grep ${GREP_OPTS} '"${SEARCHTERM}"' ${FLIST} 2>/dev/null"
CMD_MSG="grep ${GREP_OPTS} '"${SEARCHTERM}"' 2>/dev/null"

# Execute CMD
[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} CMD:${CMD}"
RAWLIST=("${(f)$(eval ${CMD})}")
[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} RAWLIST:${RAWLIST}" || dbg "${0}:${LINENO} RAWLIST:${#RAWLIST}"

# Output to file if specified
if [[ -n ${FILE_OUT} ]];then
	[[ -e ${FILE_OUT} ]] && /bin/rm -f ${FILE_OUT}
	if arr_is_populated "${RAWLIST}";then
		for L in ${RAWLIST};do
			FN=$(cut -d: -f1 <<<${L})
			LN=$(cut -d: -f2- <<<${L} | str_trim)
			echo "${FN}: ${LN}" >>${FILE_OUT}
		done
		exit_leave "Output saved in:${FILE_OUT}"
	else
		exit_leave "No results for $(opt_type s):${WHITE_FG}${SEARCHTERM}${RESET}"
	fi
fi

# Marshall terminal output
LONGEST_FN=0
LONGEST_LN=0
NDX=0
for L in ${(uo)RAWLIST};do
	((NDX++))
	if [[ ${FILELIST} == 'false' ]];then
		clear
		tput cup 0 0; tput el; printf "\rProcessing line ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} lines ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#RAWLIST} $(( NDX * 100. / ${#RAWLIST} ))
	fi
	FN=$(str_no_ansi ${L})
	FN=$(cut -d: -f1 <<<${FN})
	[[ ${GR_OPT_BAK} == 'false' && ${FN:e} == 'bak' ]] && continue
	FTYPE=$(file -L ${FN})
	[[ ${_DEBUG} -gt 0 && (! ${FTYPE} =~ 'text') ]] && dbg "${0}:${LINENO} File:${FN} rejected - not text:${FTYPE}" 
	[[ ! ${FTYPE} =~ 'text' ]] && continue
	LN=$(cut -d: -f2- <<<${L})
	LN=${LN[1,${_COL_MAX}]} # Limit line length
	LN=$(tr -d '\012\015' <<<${LN})
	LN=$(tr -s '[:space:]' <<<${LN})
	LN=$(sed 's/[\t\n]/ /' <<<${LN})
	LN=$(sed 's/\x2a//g' <<<${LN})
	LN=$(str_trim <<<${LN})
	if [[ ${GR_OPT_COLOR} =~ 'always' ]];then
		LN=$(perl -pe 's/^\x1b\x5b\x6d\x1b\x5b\x4b\x20/\x1b\x5b\x6d\x1b\x5b\x4b/' <<<${LN}) # Kill the space after 1st seq for even margin
	fi
	if [[ ${FN:h} != ${PWD} ]];then
		FNP=$(pathabv -l15 <<<${FN})
	else
		FNP=${FN:t}
	fi
	[[ ${#FNP} -gt ${LONGEST_FN} ]] && LONGEST_FN=${#FNP}
	[[ ${#LN} -gt ${LONGEST_LN} ]] && LONGEST_LN=${#LN}
	LIST+="${FNP}|${LN}"
done
echo "\n" >&2

((LONGEST_FN++))
[[ ${LONGEST_FN} -lt 5 ]] && LONGEST_FN=4

if ! arr_is_populated "${LIST}";then
	echo "${WHITE_FG}Grep command${RESET}:${CMD_MSG}" | tr -s '[:space:]'
	exit_leave $(err_msg_exit W "No files (${FTYPE_MSG}) found containing:${SEARCHTERM}")
fi

if [[ ${FILELIST} == 'true' ]];then
	UNIQ=("${(f)$(
	for L in ${LIST};do
		FN=$(cut -d'|' -f1 <<<${L})
		echo ${FN}
	done | sort -u
	)}")
	for L in ${UNIQ};do
		[[ -h ${L} ]] && continue
		[[ ${ONE_LINE} == 'true' ]] && echo -n "${L} " || echo ${L}
	done
else
	{
	tput cup 1 0; echo "${WHITE_FG}CMD${RESET}:${CMD_MSG}" | tr -s '[:space:]'
	[[ ${RECURSE} == 'true' ]] && RECURSE_MSG=" (recursive)" || RECURSE_MSG=''
	[[ ${GR_OPT_CASE} =~ '--ignore-' ]] && CASE_MSG=" ${RESET}(${ITALIC}${CYAN_FG}case insensitive${RESET})" || CASE_MSG=" ${RESET}(${ITALIC}${BOLD}${CYAN_FG}case sensitive${RESET})"
	echo "Path:${WHITE_FG}${PATH_ARG}${RECURSE_MSG}${RESET}, Files:${WHITE_FG}${FTYPE_MSG}${RESET}, Search:${WHITE_FG}${SEARCHTERM}${CYAN_FG}${CASE_MSG}${RESET}, Result:${WHITE_FG}${#RAWLIST}${RESET} lines\n\n"
	if [[ -n ${LINENUM_OPT} ]];then
		[[ ${LONGEST_LN} -gt $(( _COL_MAX - LONGEST_FN )) ]] && LONGEST_LN=$(( (_COL_MAX - LONGEST_FN) - 7 ))
		REM=$(( (_COL_MAX - LONGEST_FN) - 8))
		printf "${WHITE_FG}%-*s %5s %-*s${RESET}\n" ${LONGEST_FN} "File" "Line" ${LONGEST_LN} "Text"
		echo -n "${MAGENTA_FG}$(str_unicode_line $(( LONGEST_FN-- )))  ${MAGENTA_FG}$(str_unicode_line 4)${RESET} ${MAGENTA_FG}$(str_unicode_line $(( LONGEST_LN - 4 )))${RESET}"
		echo
	else
		[[ ${LONGEST_LN} -gt $(( _COL_MAX - LONGEST_FN )) ]] && LONGEST_LN=$(( (_COL_MAX - LONGEST_FN) - 4 ))
		REM=$(( (_COL_MAX - LONGEST_FN) - 4))
		printf "${WHITE_FG}%-*s %-*s${RESET}\n" ${LONGEST_FN} "File" ${LONGEST_LN} "Text"
		echo -n "${MAGENTA_FG}$(str_unicode_line $(( LONGEST_FN-- ))) ${MAGENTA_FG}$(str_unicode_line $(( LONGEST_LN-- )))${RESET}"
		echo
	fi

	NDX=0
	for L in ${LIST};do
		((NDX++))
		[[ $(( NDX % 2 )) -ne 0 ]] && BAR=${BLACK_BG} || BAR=''
		FN=$(cut -d'|' -f1 <<<${L})
		LN=$(cut -d'|' -f2- <<<${L})
		if [[ -n ${LINENUM_OPT} ]];then
			LNUM=$(cut -d: -f1 <<<${LN})
			LN=$(cut -d: -f2- <<<${LN})
			LN=$(tr -d '\012\015' <<<${LN})
			LN=$(tr -s '[:space:]' <<<${LN})
			LN=$(sed 's/[\t\n]/ /' <<<${LN})
			LN=$(sed 's/\x2a//g' <<<${LN})
			LN=$(str_trim <<<${LN})
			printf "${BAR}${WHITE_FG}%-*s ${CYAN_FG}%5s ${RESET}${BAR}%-*.${REM}s${RESET}\n" ${LONGEST_FN} ${FN} ${LNUM} ${LONGEST_LN} ${LN}
		else
			printf "${BAR}${WHITE_FG}%-*s ${RESET}${BAR}%-*.${REM}s${RESET}\n" ${LONGEST_FN} ${FN} ${LONGEST_LN} ${LN}
		fi
		echo -n ${RESET}
	done
	} | mypager
fi

exit_leave

