#!/usr/bin/env zsh
 
#Declarations
typeset -A APP_TO_USE
typeset -a APP_DIRS
typeset -a LOOP_LIST
typeset -a RAWLIST
typeset -a VIEWED
typeset -aU LIST

#Constants
CFGDIRS=(
/home/kmiller \
/home/kmiller/.local/share \
/home/kmiller/.local/share/flatpak/exports/share/applications \
/home/kmiller/.config \
/etc \
/etc/xdg \
/etc/systemd \
/opt \
/usr/share/applications \
/var/lib/snapd/desktop/applications\
)
THIS_FILE=${0:t}

EXCLUDE=" \
! -iname '*arb' \
! -iname '*bak' \
! -iname '*dll*' \
! -iname '*dtd' \
! -iname '*fx' \
! -iname '*gir' \
! -iname '*glsl' \
! -iname '*gz' \
! -iname '*hlsl' \
! -iname '*html' \
! -iname '*ico' \
! -iname '*jpg' \
! -iname '*js' \
! -iname '*json' \
! -iname '*local*' \
! -iname '*log' \
! -iname '*map' \
! -iname '*mount' \
! -iname '*png' \
! -iname '*sql' \
! -iname '*svg' \
! -iname '*swp' \
! -iname '*sys' \
! -iname '*torrent*' \
! -iname '*txt' \
! -iname '*ui' \
! -iname '*undo*' \
! -iname '*virtio' \
! -iname '*xsd' \
! -iname '*zwc' \
! -iname '*~'"
LIB=/usr/local/lib

#Imports
source ${LIB}/common.zsh

#Functions
action_do () {
	local -a MARKED=(${@})
	local M
	local APP
	local ARGS

	APP=/usr/bin/vim
	ARGS=$(echo "${APP} $(list_quote_marked_elements ${MARKED})")
	eval "${ARGS}"
	[[ ${?} -ne 0 ]] && msg_box -p "<B><I>${0}: ${APP} returned an error<N>| |Press any key..."

	for M in ${MARKED};do
		[[ ${M} -eq 0 ]] && continue
		MARKED[${M}]=0
		list_set_selected ${M} ${_GHOST_ROW}
	done
}

item_decorate () {
	local NDX=$1

	case ${_LIST_SELECTED[${NDX}]} in
		2) echo -n "${E_STRIKE}${E_RED_FG}${LIST[${NDX}]}${E_RESET} ${E_ITALIC}viewed${E_RESET}";;
		*)	tput el;echo -n ${LIST[${NDX}]};;
	esac
}

#--Begin GetOpts--
parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local O

	for O in {1..${#OPTS}};do
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+="<PARAM>" && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	exit_visible
	echo -e "\n${WHITE_FG}Usage${RESET}: ${THIS_FILE} ${WHITE_FG}[${RESET} ${OPTS} ${WHITE_FG}]${RESET} <SEARCHTERM>\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-d${RESET} deeper search (additional dirs:/usr/share /usr/lib)"
	echo -e "\n${WHITE_FG}DESC${RESET}:Search for system settings files based on search phrase\n"
	exit_leave
}

OPTSTR=":HDd"
DEBUG=false
OPTIND=0
DEEP=false
while getopts ${OPTSTR} OPTION;do
	case ${OPTION} in
     H) usage;;
     D) DEBUG=true;;
     d) DEEP=true;;
     :) exit_leave "${THIS_FILE}: option: -${OPTARG} requires an argument";;
    \?) exit_leave "${THIS_FILE}: unknown option -${OPTARG}";;
	esac
done
shift $((${OPTIND} - 1))
#--End GetOpts--

#---Execution---
[[ ${DEBUG} == 'false' ]] && do_smcup

SEARCHTERM=${@}
[[ -z ${SEARCHTERM} ]] && exit_leave "${RED_FG}Missing arg ${WHITE_FG}<APP>${RESET}: search phrase to locate configuration files for application"

DEPTH=2
[[ ${DEEP} == "true" ]] && CFGDIRS+=(/usr/share /usr/lib) && ((DEPTH++))
 
#Search
echo "Finding candidates..."
RAWLIST=$(eval "sudo zsh -c \"find ~ -maxdepth 1 -iname '.*${SEARCHTERM}*'"\") #home
if arr_is_populated ${RAWLIST};then
	APP_DIRS=(${RAWLIST})
fi

RAWLIST=$(eval "sudo zsh -c \"find ~/.config -maxdepth 2 -iname '*${SEARCHTERM}*'"\") #home .config
if arr_is_populated ${RAWLIST};then
	APP_DIRS+=(${RAWLIST})
fi

RAWLIST=$(eval "sudo zsh -c \"find ~/.local/share -maxdepth 2 -iname '*${SEARCHTERM}*'"\") #home .local/share
if arr_is_populated ${RAWLIST};then
	APP_DIRS+=(${RAWLIST})
fi

RAWLIST=$(eval "sudo zsh -c \"find /usr/share -maxdepth 2 -iname '*${SEARCHTERM}*'"\") #usr/share
if arr_is_populated ${RAWLIST};then
	APP_DIRS+=(${RAWLIST})
fi

RAWLIST=("${(f)$(echo ${RAWLIST})}") #break array on newline
APP_DIRS=("${(f)$(echo ${APP_DIRS})}") #break array on newline

[[ ${DEBUG} == 'true' ]] && echo "CFGDIRS:${CFGDIRS}" | dbg

ONCE=true
for D in ${CFGDIRS};do
	[[ -n $(arr_in_array ${D} ${APP_DIRS}) ]] && INAME='' || INAME="-iname '*${SEARCHTERM}*'"

	CMD="sudo find ${D} -maxdepth ${DEPTH} \( -type f -o -type l \) ${INAME} ${EXCLUDE}"
	[[ ${DEBUG} == 'true' && ${ONCE} == 'true' ]] && echo "CMD:${CMD}" | dbg && ONCE=false

	LOOP_LIST=("${(f)$(eval "${CMD}" 2>/dev/null)}")
	[[ ${DEBUG} == 'true' ]] && echo "Searching ${D}..found ${#LOOP_LIST}" | dbg

	[[ -n ${LOOP_LIST} ]] && RAWLIST+=(${LOOP_LIST}) #build LIST
	unset LOOP_LIST #clear list
done

[[ ${DEBUG} == 'true' ]] && echo "RAWLIST:${#RAWLIST} ${=RAWLIST[1,20]} ...truncated" | dbg

if ! arr_is_populated ${RAWLIST};then
	exit_leave "No cfg file(s) found for ${SEARCHTERM}"
fi

#Only include files that can be edited or viewed
LIST=()
for F in ${RAWLIST};do
	TYPE=$(file -b $(sudo realpath ${F})) #eliminate known unwanted
	[[ ${F:l} =~ "license$" ]] && continue
	[[ ${F:l} =~ "log$" ]] && continue
	[[ ${F:l} =~ ".py$" ]] && continue
	[[ ${F:l} =~ ".rst$" ]] && continue
	[[ ${F:l} =~ "readme$" ]] && continue
	[[ ${F:l} =~ "git$" ]] && continue
	case ${TYPE:l} in
	  *text*) [[ ${F:e} =~ "md" ]] && APP_TO_USE[${F}]="mdless" || APP_TO_USE[${F}]="vi";;
	  *sql*) APP_TO_USE[${F}]="sqlite3";;
	  *pdf*) APP_TO_USE[${F}]="evince";;
	  *) continue;;
	esac
	[[ ${DEBUG} == 'true' ]] && echo "F:${F}" | dbg
	LIST+=${F}
done

#Sort by tail
LIST=($(for L in ${LIST};do
	echo ${L:h}:${L:t}
done | sort -t: -k2 | sed 's!:!/!g'))

if ! arr_is_populated ${LIST};then
	exit_leave "No editable cfg file(s) found for ${SEARCHTERM}"
fi

[[ ${DEBUG} == 'true' ]] && echo "LIST:${#LIST} ${=LIST[1,20]} ...truncated" | dbg

#Set headings
list_set_header 'printf "Found (${WHITE_FG}%s${RESET}) configuration file(s) found for:${WHITE_FG}%s${RESET}\tPage:${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET}" ${#LIST} ${SEARCHTERM} ${PAGE} ${MAX_PAGES}'
list_add_header_break

#Set line item
list_set_line_item ' 
printf "${BOLD}${GREEN_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${ARRAY_NDX} "$(item_decorate ${ARRAY_NDX})"
'
list_set_prompt "Select configuration file(s):"
list_set_action_msgs edit config
list_set_clear_ghosts true

while true;do
	#get selection
	list_cursor_select ${LIST}
	[[ ${?} -eq 0 ]] && break

	#get selections
	MARKED=($(list_get_selected))

	if [[ $(list_get_selected_count) -gt 1 ]];then
		action_warn ${MARKED} #warn if more than 1 selected
	fi

	if [[ ${_MSG_KEY} == "y" || $(list_get_selected_count) -eq 1 ]];then
		action_do ${MARKED}
	fi
done

exit_leave
