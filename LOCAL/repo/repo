#!/usr/bin/zsh
# TODO impose limits on cp commands to modified files only
 
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
[[ -z ${ZSH_LIB} ]] && _LIB=/usr/local/lib || _LIB=${ZSH_LIB}
source ${_LIB}/LIB_INIT.zsh # Must be first
source ${_LIB}/UTILS.zsh
source ${_LIB}/STR.zsh
source ${_LIB}/LIB_DEPS.zsh # Must be last

# Constants
_REPO=~/Code/REPO
_REPO_LOCAL_ETC=${_REPO}/LOCAL_ETC
_REPO_LOCAL=${_REPO}/LOCAL
_REPO_NON_ZSH_UTILS=${_REPO}/NON_ZSH_UTILS
_REPO_PYTHON=${_REPO}/PYTHON
_REPO_SYSTEM=${_REPO}/SYSTEM
_REPO_USER=${_REPO}/USER
_REPO_VIM_CFG=${_REPO}/VIM_CFG
_REPO_VIM_CFG_USER=${_REPO}/VIM_CFG/USER
_REPO_ZSH_CFG=${_REPO}/ZSH_CFG
_REPO_ZSH_CFG_USER=${_REPO}/ZSH_CFG/USER
_REPO_ZSH_LIB=${_REPO}/ZSH_LIB
_REPO_ZSH_LIB_UTILS=${_REPO}/ZSH_LIB_UTILS
_REPO_ZSH_NON_LIB_UTILS=${_REPO}/ZSH_NON_LIB_UTILS

_SRC_BIN=/usr/local/bin
_SRC_BIN_CONV=${_SRC_BIN}/conversion
_SRC_BIN_PYSCRIPTS=${_SRC_BIN}/__pyscripts__
_SRC_BIN_SYS=${_SRC_BIN}/system
_SRC_CODE=${HOME}/Code/LOCAL
_SRC_LIB=/usr/local/lib
_SRC_LOCAL_ETC=/usr/local/etc
_SRC_PYTHON=${HOME}/Code/LANG/Python/PROJECTS/ts
_SRC_VIM_CFG=${HOME}/.vim
_SRC_ZSH_CFG=/etc/zsh
_SRC_ZSH_CFG_USER=${HOME}/.zsh

_REPO_UTILS=${_SRC_BIN}/system/repo_utils

# Declarations
typeset -a _BIN=()
typeset -a _ETC=()
typeset -a _LOCAL=()
typeset -a _PYTHON=()
typeset -a _USER=()
typeset -a _ZSH_UTILS=()
typeset -a _NON_ZSH_UTILS=()
typeset -a _ZSH_CFG=()
typeset -a _ZSH_LIB_UTILS=()
typeset -a _ZSH_NON_LIB_UTILS=()
typeset -a _MODIFIED=()

# Functions
copy_conv_files () {
	echo "${GREEN_FG}CONVERSION UTILITY FILES${RESET}" >&2
	rsync -a ${_SRC_BIN_CONV} ${_REPO_ZSH_LIB_UTILS}
}

copy_dev_files () {
	local -A DEV_LIST=()
	local -a DEV_DIRS=()
	local -a BIN_LIST=()
	local D

	echo "${GREEN_FG}DEVELOPMENT FILES${RESET}" >&2

	BIN_LIST=("${(f)$(find /usr/local/bin -type f ! -path /usr/local/bin)}")
	DEV_DIRS=("${(f)$(find ${_SRC_CODE} -maxdepth 1 -type d)}")

	for D in ${DEV_DIRS};do
		DEV_LIST[${D:t}]=1
	done

	for D in ${BIN_LIST};do
		[[ ${DEV_LIST[${D:t}]} -eq 1 ]] && cp -r ${_SRC_CODE}/${D:t} ${_REPO_LOCAL} # Copy source for active development
	done
 
	cp -r ${_SRC_CODE}/LIBS/scratch ${_REPO_LOCAL}
	cp -r ${_SRC_CODE}/spanish_quiz ${_REPO_LOCAL}
	cp -r ${_SRC_CODE}/takeout ${_REPO_LOCAL}
	cp -r ${_SRC_CODE}/manage_db ${_REPO_LOCAL}
}

copy_etc_files () {
	local -a LOCAL_ETC_FILES=("${(f)$(find ${_SRC_LOCAL_ETC} -maxdepth 1 -type f)}")
	local L

	echo "${GREEN_FG}ETC SUPPORT FILES${RESET}" >&2

	for L in ${LOCAL_ETC_FILES};do
		cp "${L}" ${_REPO_LOCAL_ETC}
	done

	cp -r ${_SRC_LOCAL_ETC}/tips ${_REPO_LOCAL_ETC}
}

copy_non_zsh_utils () {
	echo "${GREEN_FG}NON ZSH UTILS${RESET}" >&2
	for L in ${_NON_ZSH_UTILS};do
		cp "${L}" ${_REPO_NON_ZSH_UTILS}
	done
}

copy_pyscript_files () {
	echo "${GREEN_FG}PYTHON SCRIPT FILES${RESET}" >&2
	rsync -a ${_SRC_BIN_PYSCRIPTS} ${_REPO_ZSH_LIB_UTILS}
}

copy_python_dev_files () {
	local -a RS_EXCL=()

	RS_EXCL+=(--exclude='lib')
	RS_EXCL+=(--exclude='bin')
	RS_EXCL+=(--exclude='.git')
	RS_EXCL+=(--exclude='.idea')

	echo "${GREEN_FG}PYTHON PROJECT FILES${RESET}" >&2
	rsync -a --no-links --exclude 'lib' ${RS_EXCL} /home/kmiller/Code/LANG/Python/PROJECTS/ts /home/kmiller/Code/REPO/PYTHON
}

copy_sys_files () {
	echo "${GREEN_FG}SYSTEM FILES${RESET}" >&2
	rsync -a --no-links ${_SRC_BIN_SYS} ${_REPO_SYSTEM} >/dev/null
}

copy_user_files () {
	echo "${GREEN_FG}USER FILES${RESET}" >&2
	cp -R ${HOME}/.mvq ${_REPO_USER} 2>/dev/null
	cp -R ${HOME}/.yts ${_REPO_USER} 2>/dev/null
	cp -R ${HOME}/.openvpn3 ${_REPO_USER} 2>/dev/null
	cp -R ${HOME}/Code/LOCAL/ovpn/ovpn ${_REPO_USER} 2>/dev/null
}

copy_vim_cfg_files () {
	echo "${GREEN_FG}VIM CONFIG FILES${RESET}" >&2
	sudo rsync -a --no-links --exclude='undo' ${_SRC_VIM_CFG} ${_REPO_VIM_CFG}
	cp ~/.vimrc ${_REPO_VIM_CFG_USER}
}

copy_zsh_cfg_files () {
	local -a REPO_ZSH_CFG_FILES=("${(f)$(find ${_SRC_ZSH_CFG} -maxdepth 1 -type f)}")
	local L

	echo "${GREEN_FG}ZSH CONFIG FILES${RESET}" >&2

	for L in ${REPO_ZSH_CFG_FILES};do
		cp "${L}" ${_REPO_ZSH_CFG}
	done

	sudo rsync -a --no-links ${_SRC_ZSH_CFG_USER} ${_REPO_ZSH_CFG_USER}
	cp ${HOME}/.zshrc ${_REPO_ZSH_CFG_USER}
	cp ${HOME}/.zsh_history ${_REPO_ZSH_CFG_USER}
}

copy_zsh_libs () {
	local -a ZSH_LIBS=()
	local L

	echo "${GREEN_FG}ZSH LIBS${RESET}" >&2
	ZSH_LIBS=("${(f)$(find ${_SRC_LIB} -maxdepth 1 -name '*zsh' -type f)}")
	for L in ${ZSH_LIBS};do
		cp "${L}" ${_REPO_ZSH_LIB}
	done
}

copy_zsh_lib_utils () {
	echo "${GREEN_FG}ZSH LIB UTILS${RESET}" >&2
	for L in ${_ZSH_LIB_UTILS};do
		cp "${L}" ${_REPO_ZSH_LIB_UTILS}
	done
}

copy_zsh_non_lib_utils () {
	echo "${GREEN_FG}ZSH NON LIB UTILS${RESET}" >&2
	for L in ${_ZSH_NON_LIB_UTILS};do
		cp "${L}" ${_REPO_ZSH_NON_LIB_UTILS}
	done
}

collect_modifed () {
	local DEPTH=''
	local SUM=''
	local ARG=''
	local X

	for X in ${@};do
		case ${1} in
			-d* ) DEPTH=${1} && shift;;
			-s) SUM=${1} && shift;;
		esac
		ARG=${@}
	done
	if [[ -n ${SUM} ]];then
		SUM="${(f)$(fut modified ${DEPTH} -n ${ARG} | wc -l)}"
		_MODIFIED+=("${ARG} ${SUM} files")
	else
		_MODIFIED+=("${(f)$(fut modified ${DEPTH} -n ${ARG})}")
	fi
}

# Execution

# Build repo
echo "${WHITE_FG}Building repo${RESET}..."
if [[ -e ${_REPO} ]];then
	if [[ -e ${_REPO}/.git ]];then
		sudo cp -r ${_REPO}/.git ${_REPO_UTILS} # Set aside .git repo
		echo "${GREEN_FG}Backed up git repo to:${WHITE_FG}${_REPO_UTILS}${RESET}"
	fi

	sudo /bin/rm -rf ${_REPO} && mkdir -p ${_REPO} # Rebuild tree
	echo "\n${WHITE_FG}Rebuilding...${WHITE_FG}${RESET}"

	if [[ -e ${_REPO_UTILS}/.git ]];then
		sudo cp -r ${_REPO_UTILS}/.git ${_REPO} # Git repository
		echo "${GREEN_FG}Copied git repo to:${WHITE_FG}${_REPO}${RESET}"
		sudo cp ${_REPO_UTILS}/gitconfig ${_REPO}/.git/config # Git config
		echo "${GREEN_FG}Copied git config to:${WHITE_FG}${_REPO}/.git${RESET}"
	fi

	cp ${_REPO_UTILS}/do_commit ${_REPO} # Git commit script
	echo "${GREEN_FG}Copied git commit script to:${WHITE_FG}${_REPO}${RESET}"
	cp ${_REPO_UTILS}/gitignore ${_REPO}/.gitignore # Git ignore
	echo "${GREEN_FG}Copied git ignore to:${WHITE_FG}${_REPO}/.gitignore${RESET}"
	cp ${_REPO_UTILS}/README.md ${_REPO} # Git readme
	echo "${GREEN_FG}Copied README.MD to:${WHITE_FG}${_REPO}${RESET}"

	[[ ! -e ${_REPO_USER} ]] && mkdir -p ${_REPO_USER}
	[[ ! -e ${_REPO_LOCAL} ]] && mkdir -p ${_REPO_LOCAL}
	[[ ! -e ${_REPO_LOCAL_ETC} ]] && mkdir -p ${_REPO_LOCAL_ETC}
	[[ ! -e ${_REPO_PYTHON} ]] && mkdir -p ${_REPO_PYTHON}
	[[ ! -e ${_REPO_SYSTEM} ]] && mkdir -p ${_REPO_SYSTEM}
	[[ ! -e ${_REPO_VIM_CFG} ]] && mkdir -p ${_REPO_VIM_CFG}
	[[ ! -e ${_REPO_VIM_CFG_USER} ]] && mkdir -p ${_REPO_VIM_CFG_USER}
	[[ ! -e ${_REPO_ZSH_CFG} ]] && mkdir -p ${_REPO_ZSH_CFG}
	[[ ! -e ${_REPO_ZSH_CFG_USER} ]] && mkdir -p ${_REPO_ZSH_CFG_USER}
	[[ ! -e ${_REPO_ZSH_LIB} ]] && mkdir -p ${_REPO_ZSH_LIB}
	[[ ! -e ${_REPO_ZSH_LIB_UTILS} ]] && mkdir -p ${_REPO_ZSH_LIB_UTILS}
	[[ ! -e ${_REPO_ZSH_NON_LIB_UTILS} ]] && mkdir -p ${_REPO_ZSH_NON_LIB_UTILS}
	[[ ! -e ${_REPO_NON_ZSH_UTILS} ]] && mkdir -p ${_REPO_NON_ZSH_UTILS}
fi

# Organize /usr/local/bin
UTILS=("${(f)$(file $(find ${_SRC_BIN} -maxdepth 1 -type f))}")

for L in ${UTILS};do
	FN=$(cut -d: -f1 <<<${L})
	SIG=$(cut -d: -f2- <<<${L})
	[[ ${SIG} =~ 'zsh' ]] && _ZSH_UTILS+=${FN} || _NON_ZSH_UTILS+=${FN}
done

# Divide zsh scripts  
for L in ${_ZSH_UTILS};do
	if grep -q "ZSH_LIB" ${L};then
		# zsh lib utils
		_ZSH_LIB_UTILS+=${L}
	else
		# zsh non lib utils
		_ZSH_NON_LIB_UTILS+=${L}
	fi
done

echo "\n${WHITE_FG}Populating repo${RESET}..."
copy_zsh_lib_utils
copy_zsh_non_lib_utils
copy_non_zsh_utils
copy_zsh_libs
copy_conv_files
copy_pyscript_files
copy_sys_files 
copy_user_files
copy_dev_files
copy_etc_files
copy_zsh_cfg_files
copy_vim_cfg_files
copy_python_dev_files
 
echo "\n${GREEN_FG}Summary${RESET}"
echo $(str_unicode_line 36)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total development files" $(find ${_REPO_LOCAL} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total etc support files" $(find ${_REPO_LOCAL_ETC} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total zsh library files" $(find ${_REPO_ZSH_LIB} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total zsh lib util files" $(find ${_REPO_ZSH_LIB_UTILS} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total zsh non lib files" $(find ${_REPO_ZSH_NON_LIB_UTILS} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total non zsh files" $(find ${_REPO_NON_ZSH_UTILS} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total python project files" $(find ${_REPO_PYTHON} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total system files" $(find ${_REPO_SYSTEM} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total vim config files" $(find ${_REPO_VIM_CFG} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total vim config user files" $(find ${_REPO_VIM_CFG_USER} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total zsh config files" $(find ${_REPO_ZSH_CFG} -type f | wc -l)
printf "%-30s ${WHITE_FG}%4d${RESET}\n" "Total zsh config user files" $(find ${_REPO_ZSH_CFG_USER} -type f | wc -l)
echo $(str_unicode_line 36)
printf "${GREEN_FG}%-30s ${WHITE_FG}%4d${RESET}\n" "Total REPO files" $(find ${_REPO} -type f | wc -l)

collect_modifed ${_SRC_BIN}
collect_modifed ${_SRC_BIN_CONV}
collect_modifed ${_SRC_BIN_SYS}
collect_modifed -ddd ${_SRC_CODE}
collect_modifed -ddd ${_SRC_LOCAL_ETC}
collect_modifed -ddd ${_SRC_LIB}
collect_modifed -ddd ${_SRC_PYTHON}
collect_modifed -ddd -s ${_SRC_VIM_CFG}
collect_modifed -ddd ${_SRC_ZSH_CFG}
collect_modifed -ddd ${_SRC_ZSH_CFG_USER}

echo "\n${GREEN_FG}File[s] modified today${RESET}"
echo $(str_unicode_line 36)
typeset -R3 NDX=0
for M in ${_MODIFIED};do
	[[ ${M} =~ '.bak' ]] && continue
	((NDX++))
	echo "${NDX}) ${M}"
done
echo $(str_unicode_line 36)
  
echo -n "\nCommit repo? (y/n):"
read -q RESPONSE
if [[ ${RESPONSE} == 'y' ]];then
	pushd ~/Code/REPO
	sudo chown -R kmiller:kmiller *
	sudo chown -R kmiller:kmiller .*
	do_commit
	popd
fi
