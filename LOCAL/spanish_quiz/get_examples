#!/usr/bin/zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
BOLD="\033[1m"


set_match_quality () {
	local QUALITY=$1

	[[ ! -e /tmp/match_quality && -z ${QUALITY} ]] && echo " (No Match)" >/tmp/match_quality && return
	[[ -e /tmp/match_quality ]] && return
	echo " (${(C)QUALITY} Match)" > /tmp/match_quality
}

get_examples () {
	local -a VERB=(${@:s/_/ })
	local -a VERBS
	local RAW_SENTENCES
	local -a SENTENCES 
	local TEXT
	local S
	local NDX
	local -a RANK1
	local -a RANK2
	
	[[ ${DEBUG} == 'true' ]] && echo "Entered:$0 with ${@}" >&2

	NDX=0
	for V in ${=VERB};do
		((NDX++))
		VERBS[${NDX}]=$V
	done

	echo "Retrieving examples..." >&2
	[[ ${DEBUG} == 'true' ]] && echo "VERB count is ${#VERBS}, VERB:${VERBS}" >&2

	COMPOUND_VERB=false
	if [[ ${#VERBS} -eq 2 ]];then
		COMPOUND_VERB=true
		[[ ${DEBUG} == 'true' ]] && echo "pulling 2 verbs:VERBS:${VERBS[1]} and VERBS:${VERBS[2]}" >&2
		RAW_SENTENCES=$(wget -qO- "https://www.123teachme.com/translated_sentences/sp/${VERBS}" | pup --charset utf-8 '.translated-sentence-pair text{}')
		SENTENCES=("${(f)$( echo ${RAW_SENTENCES} | grep --color=never '\S')}") 
		RAW_SENTENCES=$(wget -qO- "https://www.123teachme.com/translated_sentences/sp/${VERBS[1]}" | pup --charset utf-8 '.translated-sentence-pair text{}')
		SENTENCES+=("${(f)$( echo ${RAW_SENTENCES} | grep --color=never '\S')}") 
		RAW_SENTENCES=$(wget -qO- "https://www.123teachme.com/translated_sentences/sp/${VERBS[2]}" | pup --charset utf-8 '.translated-sentence-pair text{}')
		SENTENCES+=("${(f)$( echo ${RAW_SENTENCES} | grep --color=never '\S')}") 
		[[ ${DEBUG} == 'true' ]] && echo "Got ${#SENTENCES} sentences" >&2
	else
		RAW_SENTENCES=$(wget -qO- "https://www.123teachme.com/translated_sentences/sp/${VERB}" | pup --charset utf-8 '.translated-sentence-pair text{}')
		SENTENCES=("${(f)$( echo ${RAW_SENTENCES} | grep --color=never '\S')}") 
	fi

	if [[ -z ${SENTENCES} ]];then
		echo "No examples found..."
		return
	fi

	NDX=0
	RANK2_V1_MATCHES=0
	RANK2_V2_MATCHES=0
	for S in ${SENTENCES};do
		((NDX++))
		[[ ${DEBUG} == 'true' ]] && echo "S:${SENTENCES[${NDX}]}\n${SENTENCES[((${NDX}+1))]}, NDX:${NDX}" >&2
		[[ ${RANK2_V1_MATCHES} -gt 3 ]] && continue
		[[ ${RANK2_V2_MATCHES} -gt 3 ]] && continue
		if [[ ${COMPOUND_VERB} == 'true' ]];then
			if [[ ${S:l} =~ "${VERBS:l}" ]];then
				RANK2+=${S}
				RANK2+="${SENTENCES[$((${NDX}+1))]}\n..."
				set_match_quality "exact"
				[[ ${DEBUG} == 'true' && ${S:l} =~ "${VERBS:l}" ]] && echo "Exact COMPOUND_VERB: added "${SENTENCES[$((${NDX}+1))]}" to RANK2" >&2
				continue #only add once
			fi

			grep -qwoi ${VERBS[1]} <<< ${S:l} #word boundaries only
			RC=$?
			if [[ ${RC} -eq 0 ]];then
				RANK2+=${S}
				RANK2+="${SENTENCES[$((${NDX}+1))]}\n..."
				set_match_quality "partial"
				((RANK2_V1_MATCHES++))
				[[ ${DEBUG} == 'true' && ${RC} -eq 0 ]] && echo "Partial COMPOUND_VERB1: added "${SENTENCES[$((${NDX}+1))]}" to RANK2" >&2
				continue #only add once
			fi

			grep -qwoi ${VERBS[2]} <<< ${S:l} #word boundaries only
			RC=$?
			if [[ ${RC} -eq 0 ]];then
				RANK2+=${S}
				RANK2+="${SENTENCES[$((${NDX}+1))]}\n..."
				set_match_quality "partial"
				((RANK2_V2_MATCHES++))
				[[ ${DEBUG} == 'true' && ${RC} -eq 0 ]] && echo "Partial COMPOUND_VERB2: added "${SENTENCES[$((${NDX}+1))]}" to RANK2" >&2
				continue #only add once
			fi
		else
			[[ ${S:l} =~ ${VERB:l} ]] && RANK1+=${S} && RANK1+="${SENTENCES[$((${NDX}+1))]}\n..." && set_match_quality "exact"
			[[ ${DEBUG} == 'true' && ${S:l} =~ ${VERB:l} ]] && echo "Exact VERB: added "${SENTENCES[$((${NDX}+1))]}" to RANK1" >&2
		fi
	done

	[[ ${COMPOUND_VERB} == 'false' && -z ${RANK1[1]} ]] && echo "No examples found..." && return
	[[ ${COMPOUND_VERB} == 'true' && -z ${RANK2[1]} ]] && echo "No examples found..." && return

	NDX=0
	if [[ ${COMPOUND_VERB} == 'true' ]];then
		for R in ${(u)RANK2};do
			((NDX++))
			echo ${R} | perl -Mopen=locale -MHTML::Entities -pe '$_ = decode_entities($_)'
			#echo ${R} | html2text -width ${#R}
			#TEXT=$(echo ${R} | sed "s/${VERBS}/<b><i>${VERBS}<\/i><\/b>/gI")
			#TEXT=$(echo ${TEXT} | sed "s/${VERBS[1]}/<b><i>${VERBS[1]}<\/i><\/b>/gI")
			#TEXT=$(echo ${TEXT} | sed "s/${VERBS[2]}/<b><i>${VERBS[2]}<\/i><\/b>/gI")
			#echo ${TEXT} | fold -s -w120
			[[ ${NDX} -ge 12 ]] && break
		done
		RANK2=()
	else
		for R in ${(u)RANK1};do
			((NDX++))
			echo ${R} | perl -Mopen=locale -MHTML::Entities -pe '$_ = decode_entities($_)'
			#echo ${R} | html2text -width ${#R}
			#TEXT=$(echo ${R} | sed "s/${VERB}/<b><i>${VERB}<\/i><\/b>/gI")
			#echo ${TEXT} | fold -s -w120
			[[ ${NDX} -ge 12 ]] && break
		done
		RANK1=()
	fi
}

get_examples $1
