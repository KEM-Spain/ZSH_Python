#!/usr/bin/env zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"

#Constants
DB=.spanish.db

#DB DEF
create_spanish_db () {
	echo "${WHITE_FG}Entered ${0}${RESET}" >&2
	sqlite3 ${DB} <<____END_SQL
	create table if not exists spanish_tense
	(	verb varchar(20) not null,
		mood varchar(20) not null,
		tense varchar(20) not null,
		p1 varchar(20),
		p2 varchar(20),
		p3 varchar(20),
		p4 varchar(20),
		p5 varchar(20),
		p6 varchar(20),
		irregular boolean,
		primary key(verb,mood,tense)
	);
	create table if not exists spanish_verb
	(	verb varchar(20) not null,
		gerund varchar(20) not null,
		past_participle varchar(20) not null,
		irregular boolean,
		translation varchar(20),
		primary key(verb)
	);
____END_SQL
RC=${?}
echo "${WHITE_FG}Exited ${0} with ${RC}${RESET}" >&2
return ${?}
}

#VERB DETAIL
get_spanish_tense_row () {
	echo "${WHITE_FG}Entered ${0} with ${@}${RESET}" >&2
	local VERB=$1

	[[ -z ${VERB} ]] && echo "${0:missing} parameter verb" >&2 

	echo "${CYAN_FG}select * from spanish_tense where verb = ${VERB};${RESET}"

	sqlite3 ${DB} <<____END_SQL
	select * from spanish_tense where verb = "${VERB}";
____END_SQL
RC=${?}
echo "${WHITE_FG}Exited ${0} with ${RC}${RESET}" >&2
return ${?}
}

del_spanish_tense_row () {
	echo "${WHITE_FG}Entered ${0} with ${@}${RESET}" >&2

	local VERB=$(echo ${@} | cut -d'|' -f1)

	[[ -z ${VERB} ]] && echo "${0:missing} parameter verb" >&2 

	echo "${CYAN_FG}delete from spanish_tense where verb = ${VERB}${RESET}"

	sqlite3 ${DB} <<____END_SQL
	delete from spanish_tense where verb = "${VERB}";
____END_SQL
RC=${?}
echo "${WHITE_FG}Exited ${0} with ${RC}${RESET}" >&2
return ${?}
}

#VERB MASTER
get_spanish_verb_row () {
	echo "${WHITE_FG}Entered ${0} with ${@}${RESET}" >&2
	local VERB=${1}

	[[ -z ${VERB} ]] && echo "${0}:missing spanish verb" >&2 

	echo "${CYAN_FG}select * from spanish_verb where verb = ${VERB};${RESET}"

	sqlite3 ${DB} <<____END_SQL
	select * from spanish_verb where verb = "${VERB}";
____END_SQL
RC=${?}
echo "${WHITE_FG}Exited ${0} with ${RC}${RESET}" >&2
return ${?}
}

del_spanish_verb_row () {
	echo "${WHITE_FG}Entered ${0} with ${@}${RESET}" >&2
	local VERB=${1}

	[[ -z ${VERB} ]] && echo "${0}:missing spanish verb" >&2 

	echo "${CYAN_FG}delete from spanish_verb where verb = ${VERB};${RESET}"

	sqlite3 ${DB} <<____END_SQL
	delete from spanish_verb where verb = "${VERB}";
____END_SQL
RC=${?}
echo "${WHITE_FG}Exited ${0} with ${RC}${RESET}" >&2
return ${?}
}

#IMPORT
import () {
	local VERB=${1}

	echo "${WHITE_FG}Entered ${0} with ${@}${RESET}" >&2
	sqlite3 ${DB} <<____END_SQL
.mode csv
.import ${VERB}_tense.dat spanish_tense
.import ${VERB}_verb.dat spanish_verb
____END_SQL
RC=${?}
echo "${WHITE_FG}Exited ${0} with ${RC}${RESET}" >&2
return ${?}
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}
function parse_opts {
	local OPTS=$@
	local -a OPTSTRING
	for O in {1..${#OPTS}};do
		[[ $O -eq 1 && ${OPTS[$O]} == ":" ]] && continue
		[[ $O -gt 1 && ${OPTS[$O]} == ":" ]] && OPTSTRING+="<VERB>" && continue
		OPTSTRING+="-${OPTS[$O]}"
	done
	echo $OPTSTRING
}

function usage {
	local OPTS=$(parse_opts $OPTSTR)
    echo -e "\n${WHITE_FG}Usage${RESET}: $SCRIPT ${WHITE_FG}[${RESET} $OPTS ${WHITE_FG}]${RESET}\n"
    echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-c${RESET} Create new database"
	echo -e "${WHITE_FG}-a${RESET} Append data to existing database"
	echo -e "${WHITE_FG}-u${RESET} Update data in existing database"
	echo -e "${WHITE_FG}-d${RESET} Delete data in existing database"
	echo -e "${WHITE_FG}-s${RESET} Select data from existing database"
    echo -e "\n${WHITE_FG}DESC${RESET}:Manage the spanish database\n"
	exit
}

OPTSTR=":HDca:u:d:s:"

DEBUG=false
CREATE=false
APPEND=false
UPDATE=false
DELETE=false
SELECT=false
OPTIND=0
VERB=?
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) DEBUG=true;;
     c) CREATE=true;;
     u) UPDATE=true; VERB=${OPTARG};;
     d) DELETE=true; VERB=${OPTARG};;
     a) APPEND=true; VERB=${OPTARG};;
     s) SELECT=true; VERB=${OPTARG};;
     :) print -u2 "${SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${SCRIPT}: unknown option -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--
#Execution

if [[ ${CREATE} == "true" ]];then
	echo "Creating new spanish database"
	echo "${WHITE_FG}This will ${RED_FG}delete ${WHITE_FG}all existing data${RESET}"
	echo -n "Proceed(y/n)?:"
	read -q RESPONSE
	[[ ${RESPONSE} == "n" ]] && exit
	echo
	rm -f ${DB} && create_spanish_db
fi

if [[ ${DELETE} == "true" ]];then
	echo "Deleting ${VERB} from spanish database"
	del_spanish_verb_row ${VERB}
	del_spanish_tense_row ${VERB} #provide feedback
fi

if [[ ${UPDATE} == "true" ]];then
	[[ ! -e ${VERB}_tense.dat ]] && echo "File not found:${WHITE_FG}${VERB}_tense.dat${RESET}" && exit
	[[ ! -e ${VERB}_verb.dat ]] && echo "File not found:${WHITE_FG}${VERB}_verb.dat${RESET}" && exit
	echo "Updating ${VERB} in spanish database"
	del_spanish_verb_row ${VERB}
	del_spanish_tense_row ${VERB}
	import ${VERB}
	get_spanish_verb_row ${VERB} #provide feedback
	get_spanish_tense_row ${VERB} #provide feedback
fi

if [[ ${APPEND} == "true" ]];then
	[[ ! -e ${VERB}_tense.dat ]] && echo "File not found:${WHITE_FG}${VERB}_tense.dat${RESET}" && exit
	[[ ! -e ${VERB}_verb.dat ]] && echo "File not found:${WHITE_FG}${VERB}_verb.dat${RESET}" && exit
	echo "Appending ${VERB} to spanish database"
	import ${VERB}
	get_spanish_verb_row ${VERB} #provide feedback
	get_spanish_tense_row ${VERB} #provide feedback
fi

if [[ ${SELECT} == "true" ]];then
	echo "Selecting ${VERB} data from spanish database"
	get_spanish_verb_row ${VERB} #provide feedback
	get_spanish_tense_row ${VERB} #provide feedback
fi

