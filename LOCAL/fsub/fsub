#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _ARG_LIST
typeset -a _SPACE_DOT
typeset -A _IN_LIST
typeset -A _OUT_LIST
typeset -A _CHAIN_LIST
typeset -a _PIPELINE
typeset -a _KEYWORDS

# Constants
_LOG=/tmp/${0:t}.log
_KEYWORDS=(bluray)
_TERM=xterm

# Globals
g_ALLOW_DIRS=false
g_EXT_TEXT=''
g_FROM_TEXT=''
g_LIMIT_TO_EXT=false
g_LIST_METHOD=''
g_NO_PROMPTING=false
g_TO_TEXT=''
g_VERBOSE=false

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/VALIDATE.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
get_fn_noext () {
	local FN=${1}

	[[ ${FN:e} =~ '[[:alpha:]]+' ]] && echo ${FN:t:r} || echo ${FN:t}
}

get_fn_ext () {
	local FN=${1}

	[[ ${FN:e} =~ '[[:alpha:]]+' ]] && echo ".${FN:e}" || echo ""
}

inode_ndx () {
	local NDX_FN=${1}
	local FILE_OR_PATH=${2}
	local DEPTH=${3:=1}
	local HEAD
	local LIST=()
	local L
	local INODE
	local P
	local FN
	local TYPE=f

	[[ -f ${FILE_OR_PATH} ]] && HEAD=${FILE_OR_PATH:h} || HEAD="."
	[[ ${g_ALLOW_DIRS} == 'true' ]] && TYPE=d
	[[ ${g_LIMIT_TO_EXT} == 'true' ]] && g_EXT_TEXT="*${g_EXT_TEXT}" || g_EXT_TEXT='*'

	LIST=("${(f)$(find ${FILE_OR_PATH} -maxdepth ${DEPTH} -type ${TYPE} -name ${g_EXT_TEXT} ! -path ${HEAD} -printf "%i|%p\n")}")

	for L in ${LIST};do
		INODE=$(cut -d '|' -f1 <<<${L})
		P=$(cut -d '|' -f2 <<<${L:h})
		P=$(realpath ${P})
		FN=$(cut -d '|' -f2 <<<${L:t})
		FN="${P}/${FN}"
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} \n${WHITE_FG}L${RESET}:${L} \n${WHITE_FG}INODE${RESET}:${INODE} \n${WHITE_FG}P${RESET}:${P} \n${WHITE_FG}FN${RESET}:${FN} \n${NDX_FN}[${INODE}]=${(qqq)FN}"
		eval "${NDX_FN}[${INODE}]=${(qqq)FN}"
	done
}

clean_show_fn () {
	local -a TITLE=(${1})
	local RES=${2}
	local GREP_REGEX
	local K L N S D R Y
	local FN

	[[ -z ${TITLE} ]] && echo "${_SCRIPT_TAG}: ${RED_FG}Missing argument${RESET}:<TITLE>" >&2 && return 1

	GREP_REGEX=$(csf_set_search ${TITLE})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} GREP_REGEX:${GREP_REGEX}"

	for L in ${(k)_IN_LIST};do
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} L:${_IN_LIST[${L}]:t}"
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} grep -io ${GREP_REGEX} | sed 's/\./ /g'"

		N=$(echo "${_IN_LIST[${L}]:t}" | grep -io "${GREP_REGEX}" | sed 's/[\._]/ /g') # Get name, strip dots and underscores
		[[ -z ${N} ]] && continue

		for K in ${_KEYWORDS};do
			N=$(sed "s/${K}//gi" <<<${N})
		done

		S=$(csf_get_series ${_IN_LIST[${L}]}) # Get series
		D=$(csf_get_date ${_IN_LIST[${L}]}) # Get date

		[[ ${RES} == 'true' ]] && R=$(csf_get_res ${_IN_LIST[${L}]}) # Get res
		[[ (-z ${S} && -z ${D}) ]] && Y=$(csf_get_year ${_IN_LIST[${L}]}) # Get year

		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} NAME:${N} SERIES:${S} DATE:${D} YEAR:${Y} RES:${R}"

		FN=$(echo "${(C)N} ${S:u} ${D} ${Y} ${R:l}" | tr -s '[:space:]' | str_trim)

		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} RETURN_VAL: ${_IN_LIST[${L}]:t}|${FN}.${_IN_LIST[${L}]:e}"

		echo "${_IN_LIST[${L}]:t}|${FN}.${_IN_LIST[${L}]:e}"
	done
	return 0
}

csf_get_date () {
	local DATE_ARG=${1}
	local DATE_PATTERN='[0-9][0-9][0-9][0-9][ -.][0-9][0-9][ -.][0-9][0-9]'
	local DATE=$(echo ${DATE_ARG} | grep -o ${DATE_PATTERN})

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} DATE_ARG:${DATE_ARG} DATE:${DATE}"
	[[ -n ${DATE} ]] && echo ${DATE} || echo ''
}

csf_get_res () {
	local RES_ARG=${1}
	local RES_PATTERN='720p\|1080p'
	local RES=$(echo ${RES_ARG} | grep -io ${RES_PATTERN})

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} RES_ARG:${RES_ARG} RES:${RES}"
	[[ -n ${RES} ]] && echo ${RES} || echo ''
}

csf_set_search () {
	local NDX=0
	local -a TITLE=(${@})
	local SEARCH_PATTERN
	local A

	TITLE=($(echo ${=TITLE} | perl -p -e 's/([\[\]])/\[$1\]/g; s/([()])/\[$1\]/g')) # Bracket (escape) any bracket or paren char

	[[ ${#TITLE} -eq 1 ]] && echo ${TITLE} && return

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} TITLE:${#TITLE} ${TITLE}"

	for A in ${=TITLE};do
		((NDX++))
		[[ ${NDX} -eq ${#TITLE} ]] && SEARCH_PATTERN+=${A} || SEARCH_PATTERN+="${A}[ .]"
	done

	echo ${SEARCH_PATTERN:Q}
}

csf_get_series () {
	local SERIES_ARG=${1}
	local SERIES_PATTERN='[s][0-9][0-9][e][0-9][0-9]'
	local SERIES=$(echo ${SERIES_ARG:l} | grep -io ${SERIES_PATTERN})

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} SERIES_ARG:${SERIES_ARG} SERIES:${SERIES:u}"
	[[ -n ${SERIES} ]] && echo ${SERIES:u} || echo ''
}

csf_get_year () {
	local YEAR_ARG=${1:t}
	local MOVIE_YEAR_PATTERN='(?<!^)\d{4}(?=[^A-Za-z])'
	local YEAR=$(echo ${YEAR_ARG} | grep -P -io ${MOVIE_YEAR_PATTERN})

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} YEAR_ARG:${YEAR_ARG} YEAR:${YEAR}"
	[[ -n ${YEAR} ]] && echo ${YEAR} || echo ''
}

do_finalize () {
	local RESPONSE
	local HIT
	local K
	local LONGEST
	local -A FINAL
	local -a BEFORE_AFTER
	local ADDED=0
	local RESULT BEFORE AFTER
	local MSG
	local DELIM="|"
	local MASKED=false
	local I_TAG=''
	local RESPONSE=''
	local IFN=''
	local OFN=''

	if [[ ${_PIPED} == "true" ]];then
		if [[ -n ${_OUT_LIST} ]];then
			echo $(realpath ${_OUT_LIST}) # Output modified
		else
			echo $(realpath ${_PIPELINE}) # Output original
		fi
		exit_leave # Client sending piped input receives result
	fi

	LONGEST=0

	for K in ${(k)_OUT_LIST};do
		# Avoid any downstream file errors
		if [[ -n ${_IN_LIST[${K}]} ]];then
			[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${LINENO} K:${K} _IN_LIST[K]: ${_IN_LIST[${K}]}"
			if [[ "${_IN_LIST[${K}]}" == "${_OUT_LIST[${K}]}" ]];then
				MSG="${MAGENTA_FG}Warning${RESET}:candidate filename:\n[${WHITE_FG}${_OUT_LIST[${K}]}${RESET}]\nwould be ${ITALIC}${BOLD}identical${RESET} to original - ${MAGENTA_FG}omitted${RESET}"
				[[ ${g_VERBOSE} == 'true' ]] && echo ${MSG} >&2
				[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${LINENO} ${MSG}"
				continue
			fi
			if [[ ${_OUT_LIST[${K}]:t} == '.' || -z ${_OUT_LIST[${K}]} ]];then
				[[ ${g_VERBOSE} == 'true' ]] && echo "Operation would remove all characters in filename - skipping" >&2
				continue
			fi
		else
			exit_leave $(msg_err "Failed to resolve:_IN_LIST[K], K=${K}, _IN_LIST COUNT:${#_IN_LIST}")
			continue
		fi

		# Final array for output
		grep -q "${DELIM}" <<<${_IN_LIST[${K}]}
		if [[ ${?} -eq 0 ]];then
			_IN_LIST[${K}]=$(sed "s/${DELIM}/<MASK>/g" <<<${_IN_LIST[${K}]})
			_OUT_LIST[${K}]=$(sed "s/${DELIM}/<MASK>/g" <<<${_OUT_LIST[${K}]})
			MASKED=true
		fi

		RESULT=$(str_diff.pl "${_IN_LIST[${K}]:t}" "${_OUT_LIST[${K}]:t}")
		BEFORE=$(cut -f1 -d'|' <<<${RESULT})
		AFTER=$(cut -f2 -d'|' <<<${RESULT} | sed -e 's/[{]//g' -e 's/[}]//g')
		if [[ ${INTERACTIVE} == 'true' ]];then
			printf "${CYAN_FG}%*s${RESET} -> ${WHITE_FG}%-*s${RESET}\n" ${LONGEST} "${BEFORE}" ${LONGEST} "${AFTER}"
			echo -n "${WHITE_FG}Approve ${RESET}(${WHITE_FG}y/n${RESET}):";read -sq RESPONSE
			echo ${RESPONSE}
			[[ ${RESPONSE} == 'y' ]] && FINAL[${BEFORE}]=${AFTER} || continue
		else
			FINAL[${BEFORE}]=${AFTER}
		fi

		if [[ ${MASKED} == 'true' ]];then
			_IN_LIST[${K}]=$(sed "s/<MASK>/${DELIM}/g" <<<${_IN_LIST[${K}]})
		fi

		[[ ${#BEFORE} -gt ${LONGEST} ]] && LONGEST=${#BEFORE}
	done

	if ! arr_is_populated "${FINAL}";then
		[[ ${g_VERBOSE} == 'true' ]] && MSG="No files qualified as candidates" || MSG=''
		exit_leave $(err_msg_exit W ${MSG})
	fi

	if [[ ${_DEBUG} -ne 0 ]];then
		{
		echo "_IN_LIST"
		for K in ${(k)_IN_LIST};do
			printf "KEY:%s VAL:%s\n" ${K} ${_IN_LIST[${K}]}
		done
		echo "_OUT_LIST"
		for K in ${(k)_OUT_LIST};do
			printf "KEY:%s VAL:%s\n" ${K} ${_OUT_LIST[${K}]}
		done
		echo "FINAL"
		for K in ${(k)FINAL};do
			printf "KEY:%s VAL:%s\n" ${K} ${FINAL[${K}]}
		done
		echo "LONGEST:${LONGEST}"
		} | dbg
	fi

	logit "${0}:${LINENO} Found ${#FINAL} $(str_pluralize candidate ${#FINAL})"

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} g_NO_PROMPTING:${g_NO_PROMPTING}"

	if [[ ${g_NO_PROMPTING} == 'true' ]];then
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} g_NO_PROMPTING is true"
		save_changes
	else
		printf "\nThe following ${RED_FG}${BOLD}${ITALIC}changes are pending${RESET}...\n\n"

		{
		for K in ${(onk)FINAL};do
			printf "${CYAN_FG}%*s${RESET} -> ${WHITE_FG}%-*s${RESET}\n" ${LONGEST} "${K}" ${LONGEST} "${FINAL[${K}]}"
			[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} K:${K}, FINAL[K]:${FINAL[${K}]}"
		done
		} | sort -t'>' -k2

		echo -n "\nSave Changes:(y/n)?" >&2
		read -sq RESPONSE
		[[ ${RESPONSE} == "y" ]] && echo && save_changes || echo "\n${_SCRIPT_TAG} ${RED_FG}Operation cancelled${RESET}"
	fi
}

do_clean_leading_digits () {
	local RESULT
	local HEAD TAIL
	local HIT=false
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=((kv)${_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	if ! arr_is_populated "${_CHAIN_LIST}";then
		logit "${0}:${LINENO} Error: _CHAIN_LIST not populated, _OUT_LIST:${#_OUT_LIST}, _IN_LIST:${#_IN_LIST}"
		return 1
	fi

	for C in ${(k)_CHAIN_LIST};do
		HEAD=${_CHAIN_LIST[${C}]:h}
		TAIL=${_CHAIN_LIST[${C}]:t}
		if [[ ${TAIL} =~ '^\d+[\. ]?\S+' ]];then
			HIT=true
			RESULT=$(echo ${TAIL} | perl -pe 's/^(\d+)([.-]+)?(.*)/$1-$3/g')
			_OUT_LIST[${C}]=${HEAD}/${RESULT}
		else
			unset "_IN_LIST[${C}]" # Remove non matches from original
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_add_leading_digits () {
	local -Z2 INDEX=0
	local RESULT
	local HEAD TAIL
	local HIT=false
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	if ! arr_is_populated "${_CHAIN_LIST}";then
		logit "${0}:${LINENO} Error: _CHAIN_LIST not populated, _OUT_LIST:${#_OUT_LIST}, _IN_LIST:${#_IN_LIST}"
		return 1
	fi

	for C in ${(k)_CHAIN_LIST};do
		HEAD=${_CHAIN_LIST[${C}]:h}
		TAIL=${_CHAIN_LIST[${C}]:t}
		if [[ ${TAIL} =~ '^[A-Za-z]' ]];then
			HIT=true
			((INDEX++))
			RESULT=$(echo ${TAIL} | perl -pe "s/^/${INDEX}-/g")
			[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} TAIL:${WHITE_FG}${TAIL}${RESET}]"
			[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} RESULT:${WHITE_FG}${RESULT}${RESET}]"
			_OUT_LIST[${C}]=${HEAD}/${RESULT}
		else
			unset "_IN_LIST[${C}]"
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_strip_leading_digits () {
	local RESULT local HEAD TAIL
	local HIT=false
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	if ! arr_is_populated "${_CHAIN_LIST}";then
		logit "${0}:${LINENO} Error: _CHAIN_LIST not populated, _OUT_LIST:${#_OUT_LIST}, _IN_LIST:${#_IN_LIST}"
		return 1
	fi

	for C in ${(k)_CHAIN_LIST};do
		HEAD=${_CHAIN_LIST[${C}]:h}
		TAIL=${_CHAIN_LIST[${C}]:t}
		if [[ ${TAIL} =~ '^\d+([-.])?' ]];then
			HIT=true
			RESULT=$(echo ${TAIL} | perl -pe 's/(^\d+)([.-]+)?(.*)/$3/g; s/^ *//')
			_OUT_LIST[${C}]=${HEAD}/${RESULT}
		else
			unset "_IN_LIST[${C}]"
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_media () {
	local RES=${1}; shift
	local -a TITLE=(${@})
	local -a DUPS
	local -a LIST
	local -a SEQ_FNS
	local D L S
	local FN_SEQ=0
	local OLD NEW
	local MAX_NEW=''
	local MAX_SEQ=0
	local TITLE_OUT
	local NDX=0
	
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} TITLE:${TITLE}"

	LIST=("${(f)$(clean_show_fn "${TITLE}" ${RES})}")
	[[ ${?} -ne 0 ]] && logit "${0}:${LINENO} clean_show_fn failed" && return 1

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} LIST:${#LIST} ${LIST}"

	_IN_LIST=() # Replace _IN_LIST w/ values from clean_show_fn

	DUPS=("${(f)$(find . -type f -iregex ".*${TITLE}.*")}")
	if [[ ${#DUPS} -ne 0 ]];then
		for D in ${(ou)DUPS};do
			FN_SEQ=$(perl -ne '/(?<=[(])\d+(?=[)]$)/ && print "$&"' <<<${D:r})
			if [[ -n ${FN_SEQ} ]] && validate_is_integer ${FN_SEQ} ]];then
				SEQ_FNS+=${D:t}
				[[ ${FN_SEQ} -gt ${MAX_SEQ} ]] && MAX_SEQ=${FN_SEQ}
			else
				continue
			fi
		done
	fi

	if [[ ${MAX_SEQ} -ne 0 ]];then
		((MAX_SEQ++))
		MAX_NEW="$(perl -p -e "s/(?<=[(])\d+(?=[)]$)/${MAX_SEQ}/" <<<${SEQ_FNS[1]:r})"

		# Eliminate any previously sequenced files
		for L in ${LIST};do
			OLD=$(echo ${L} | cut -d'|' -f1)
			NEW=$(echo ${L} | cut -d'|' -f2)
			for S in ${SEQ_FNS};do
				[[ ${OLD} == ${S} ]] && LIST=("${(@)LIST:#${OLD}|${NEW}}")
			done
		done
	fi

	for L in ${LIST};do
		((NDX++))
		OLD=$(echo ${L} | cut -d'|' -f1)
		NEW=$(echo ${L} | cut -d'|' -f2)

		[[ ${OLD} == ${NEW} ]] && continue

		[[ ${OLD} =~ 'orphan' ]] && NEW=${OLD}

		TITLE_OUT=${NEW}

		if [[ -n ${MAX_NEW} ]];then
			TITLE_OUT=${(C)${MAX_NEW}}
		else
			if [[ -e ${NEW} ]];then
				TITLE_OUT="${NEW:r} (2)"
			fi
		fi

		TITLE_OUT=$(str_trim <<<${TITLE_OUT})

		# Misc Oddities
		TITLE_OUT=$(sed -E 's/\s([Ii]+)\s/ \U\1 /g' <<<${TITLE_OUT}) # Uppercase any roman I's
		TITLE_OUT=$(tr -s '[:space:]' <<<${TITLE_OUT}) # Excess spaces

		[[ ${g_ALLOW_DIRS} == 'true' ]] && TITLE_OUT="${TITLE_OUT:r}" # Extension append for files only

		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} h ${NEW:h} - TITLE_OUT:${TITLE_OUT} :e ${NEW:e}"

		_IN_LIST[${NDX}]=${OLD}
		_OUT_LIST[${NDX}]=${TITLE_OUT}
	done

	return 0
}

do_proper_case () {
	local RESULT
	local HEAD TAIL EXT
	local HIT=false
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=((kv)${_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	if ! arr_is_populated "${_CHAIN_LIST}";then
		logit "${0}:${LINENO} Error: _CHAIN_LIST not populated, _OUT_LIST:${#_OUT_LIST}, _IN_LIST:${#_IN_LIST}"
		return 1
	fi

	for C in ${(k)_CHAIN_LIST};do
		HEAD=${_CHAIN_LIST[${C}]:h} # Path
		TAIL=$(str_trim $(get_fn_noext ${(C)_CHAIN_LIST[${C}]})) # File w/o extension - trimmed
		TAIL=$(sed -E "s/('[A-Z])/\L\1/g" <<<${TAIL}) # Proper case fix for apostophe
		EXT=${_CHAIN_LIST[${C}]:e:l} # Extension
		if [[ -n ${TAIL} ]];then
			HIT=true
			RESULT=$(echo "${TAIL}.${EXT}" | tr -s '[:space:]')
			_OUT_LIST[${C}]=${HEAD}/${RESULT}
		else
			unset "_IN_LIST[${C}]" # Remove non matches from original
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_sdc () {
	local CPATH
	local CANDIDATE
	local CEXT
	local HIT=false
	local C OP W
	local TITLE

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	HIT=false
	for C in ${(k)_CHAIN_LIST};do
		CANDIDATE=$(get_fn_noext ${_CHAIN_LIST[${C}]}) # W/o path & extension
		for OP in ${(o)_SPACE_DOT};do
			case ${OP} in
				B)	TITLE=$(str_to_ascii <<<${CANDIDATE}) # Scrub extended ascii/non ascii
					HIT=false
					[[ ${TITLE} != ${CANDIDATE} ]] && HIT=true && CANDIDATE=${TITLE}
					[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${CYAN_FG}Executed option B${RESET}"
					;;
				C) for W in ${=CANDIDATE};do # Camel case 
						TITLE+=${(C)W}
					done
					CANDIDATE=${TITLE}
					[[ ${CANDIDATE} != ${C} ]] && HIT=true
					[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${CYAN_FG}Executed option C${RESET}"
					;;
				D) if [[ ${CANDIDATE} =~ '\.' ||\
							${CANDIDATE} =~ '\_' ||\
							${CANDIDATE} =~ '\-' ||\
							${CANDIDATE} =~ '\,' ||\
							${CANDIDATE} =~ '\(' ||\
							${CANDIDATE} =~ '\)' ||\
							${CANDIDATE} =~ [\'] ||\
							${CANDIDATE} =~ [\"] ||\
							${CANDIDATE} =~ '\[' ||\
							${CANDIDATE} =~ '\]' ]];then
						HIT=true
						CANDIDATE=${CANDIDATE:gs/_/ /} # Swap underscores w/ spaces
						CANDIDATE=${CANDIDATE:gs/\,//} # Scrub commas
						CANDIDATE=${CANDIDATE:gs/\.//} # Scrub dots
						CANDIDATE=${CANDIDATE:gs/\-//} # Scrub dashes
						CANDIDATE=${CANDIDATE:gs/\[//} # Scrub brackets
						CANDIDATE=${CANDIDATE:gs/\]//} # Scrub brackets
						CANDIDATE=$(tr -d '()' <<<${CANDIDATE}) # Scrub parens
						CANDIDATE=$(tr -d \' <<<${CANDIDATE}) # Scrub single quotes
						CANDIDATE=$(tr -d \" <<<${CANDIDATE}) # Scrub double quotes
						CANDIDATE=$(tr -s "[:space:]" <<<${CANDIDATE}) # Squeeze space
						CANDIDATE=$(str_to_ascii <<<${CANDIDATE}) # Scrub extended ascii/non ascii
						[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${CYAN_FG}Executed option D${RESET}"
					fi;;
				S)	if [[ ${CANDIDATE} =~ ' ' ]];then
						HIT=true
						CANDIDATE=${CANDIDATE:gs/ //}
						[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${CYAN_FG}Executed option S spaces${RESET}"
					fi;;
				U) TITLE=$( \
					echo ${CANDIDATE} | \
					perl -pe 's{./}{}g; s/(?<=[a-z])(?=[A-Z])/ \1/g'
					)
					CANDIDATE=${TITLE}
					[[ ${CANDIDATE} != ${C} ]] && HIT=true
					[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${CYAN_FG}Executed option U${RESET}"
					;;
			esac
		done

		if [[ ${HIT} == "true" ]];then
			CPATH=${_CHAIN_LIST[${C}]:h} # Path
			[[ -n ${_CHAIN_LIST[${C}]:e} ]] && CEXT=$(get_fn_ext ${_CHAIN_LIST[${C}]}) # Set extension
			_OUT_LIST[${C}]=${CPATH}/${CANDIDATE}${CEXT}
		else
			unset "_IN_LIST[${C}]"
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_subs () {
	local CANDIDATE
	local CEXT
	local CPATH
	local OBJECT
	local HIT=false
	local SED_CMD
	local SED_OPT
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}"

	for C in ${(k)_CHAIN_LIST};do
		CANDIDATE=${_CHAIN_LIST[${C}]:t} # W/o path
		[[ -d ${_CHAIN_LIST[${C}]} ]] && OBJECT=Dir || OBJECT=File
		[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} grep ${GREP_OPTS} ${g_FROM_TEXT} <<<${CANDIDATE}"
		grep ${GREP_OPTS} "${g_FROM_TEXT}" <<<${CANDIDATE}
		if [[ $? -eq 0 ]];then
			HIT=true
			_OUT_LIST[${C}]=${_CHAIN_LIST[${C}]}
		else
			unset "_IN_LIST[${C}]"
		fi
	done

	# No match
	if ! arr_is_populated "${_OUT_LIST}";then
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${RED_FG}No matches for${RESET}:[${WHITE_FG}${g_FROM_TEXT}${RESET}]"
		logit "${0}:${LINENO} ${RED_FG}No matches for${RESET}:[${WHITE_FG}${g_FROM_TEXT}${RESET}]"
		[[ ${g_VERBOSE} == 'true' ]] && echo "${0}:${LINENO} ${RED_FG}No matches for${RESET}:[${WHITE_FG}${g_FROM_TEXT}${RESET}]"
		return 1 
	fi

	# Match
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${GREEN_FG}Matched${RESET}:[${WHITE_FG}${g_FROM_TEXT}${RESET}]"
	
	[[ ${CASE} == "I" ]] && SED_OPT=I || SED_OPT=''
	
	SED_CMD="/bin/sed -E -e 's/${g_FROM_TEXT}/${g_TO_TEXT}/${SED_OPT}g'"
	
	[[ ${_DEBUG} -gt 0 && ${HIT} == true ]] && dbg "${0}:${LINENO} ${GREEN_FG}SED COMMAND${RESET}:${SED_CMD}"

	for C in ${(k)_OUT_LIST};do
		CPATH=${_OUT_LIST[${C}]:h} # Path
		CANDIDATE=${_OUT_LIST[${C}]:t} # W/o path
		[[ -n ${_OUT_LIST[${C}]:e} ]] && CEXT=.${_OUT_LIST[${C}]:e} || CEXT='' # Set extension
		CANDIDATE=$(eval "${SED_CMD} <<<${(qqq)CANDIDATE}")
		_OUT_LIST[${C}]="${CPATH}/${CANDIDATE:r}${CEXT}"
	done

	return 0
}

do_truncate () {
	local CANDIDATE
	local TRUNCATED
	local CPATH
	local CFN
	local CEXT
	local HIT=false
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	for C in ${(k)_CHAIN_LIST};do
		CANDIDATE=$(get_fn_noext ${_CHAIN_LIST[${C}]}) # W/o path & extension
		if [[ ${TRUNC_FN_LEN} -gt 0 ]];then
			[[ ${#CANDIDATE} -le ${TRUNC_FN_LEN} ]] && unset "_IN_LIST[${C}]" && continue # Remove non matches from original
			HIT=true
			CPATH=${_CHAIN_LIST[${C}]:h}
			[[ -n ${_CHAIN_LIST[${C}]:e} ]] && CEXT=".${_CHAIN_LIST[${C}]:e}" || CEXT=''
			TRUNCATED=${CANDIDATE[1,${TRUNC_FN_LEN}]} # Implement fn length limit
			TRUNCATED=$(str_trim <<<${TRUNCATED})
			_OUT_LIST[${C}]=${CPATH}/${TRUNCATED}${CEXT}
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_trim () {
	local CANDIDATE
	local TRIMMED
	local CPATH
	local CFN
	local CEXT
	local HIT=false
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	for C in ${(k)_CHAIN_LIST};do
		CANDIDATE=$(get_fn_noext ${_CHAIN_LIST[${C}]}) # Exclude the extension
		TRIMMED=$(str_trim ${CANDIDATE})
		if [[ ${#TRIMMED} -eq ${#CANDIDATE} ]];then
			unset "_IN_LIST[${C}]" && continue # Remove non matches from original
		else
			HIT=true
			CPATH=${_CHAIN_LIST[${C}]:h}
			[[ -n ${_CHAIN_LIST[${C}]:e} ]] && CEXT=".${_CHAIN_LIST[${C}]:e}" || CEXT=''
			_OUT_LIST[${C}]=${CPATH}/${TRIMMED}${CEXT}
		fi
	done

	if [[ ${HIT} == 'true' ]];then
		return 0
	else
		logit "${0}:${LINENO} No candidates"
		return 1
	fi
}

do_prepend () {
	local TAG=${1}
	local CANDIDATE
	local CPATH
	local CEXT
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	for C in ${(k)_CHAIN_LIST};do
		CANDIDATE=$(get_fn_noext ${_CHAIN_LIST[${C}]}) # W/o tail & extension
		CPATH=${_CHAIN_LIST[${C}]:h}
		[[ -n ${_CHAIN_LIST[${C}]:e} ]] && CEXT=".${_CHAIN_LIST[${C}]:e}" || CEXT=''
		_OUT_LIST[${C}]="${CPATH}/${TAG}${CANDIDATE}${CEXT}"
	done

	[[ -n ${_OUT_LIST} ]] && return 0 || return 1
}

do_yt_tag () {
	local CANDIDATE
	local CPATH
	local CFN
	local CEXT
	local C

	[[ -z ${_OUT_LIST} ]] && _CHAIN_LIST=(${(kv)_IN_LIST}) || _CHAIN_LIST=(${(kv)_OUT_LIST})
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _CHAIN_LIST:${WHITE_FG}${(kv)_CHAIN_LIST}${RESET}]"

	for C in ${(k)_CHAIN_LIST};do
		CANDIDATE=$(get_fn_noext ${_CHAIN_LIST[${C}]}) # Exclude the extension
		CPATH=$(realpath ${_CHAIN_LIST[${C}]:h})
		[[ -n ${_CHAIN_LIST[${C}]:e} ]] && CEXT=".${_CHAIN_LIST[${C}]:e}" || CEXT=''

		grep -Pq '\-?\[' <<<${CANDIDATE}
		[[ ${?} -ne 0 ]] && unset "_IN_LIST[${C}]" && continue # Remove non matches from original

		CFN=$(echo "${CANDIDATE}" | perl -pe 's/\-?\[.*//' | str_trim)
		CFN=$(echo "${CFN}" | perl -pe 's/\.*$//g')

		_OUT_LIST[${C}]="${CPATH}/${CFN}${CEXT}"
	done

	[[ -n ${_OUT_LIST} ]] && return 0 || return 1
}

save_changes () {
	local HIT=false
	local KEY
	local C

	[[ ${g_VERBOSE} == 'true' ]] && echo
	for C in ${(k)_OUT_LIST};do # Modified filenames
		[[ ${_DEBUG} -gt 0 && ${_IN_LIST[${C}]} == ${_OUT_LIST[${C}]} ]] && dbg "${0}:${LINENO} Identical filename ${_IN_LIST[${C}]} -> ${_OUT_LIST[${C}]} - skipping"
		if [[ ${_IN_LIST[${C}]} == ${_OUT_LIST[${C}]} ]];then
			if [[ ${g_VERBOSE} == 'true' ]];then
				echo "${WHITE_FG}${_SCRIPT}${RESET}:${BOLD}${RED_FG}Skipping file${RESET}:${WHITE_FG}${C}${RESET} (would overwrite an existing file)"
			fi
			echo "Not overwriting existing file:${_OUT_LIST[${C}]}" >> ${_LOG}
			continue # No collisions
		fi
		if [[ ! -e ${_OUT_LIST[${C}]} ]];then
			[[ ${TRUNCATE} == 'true' ]] && echo "${WHITE_FG}${_SCRIPT}${RESET}:Truncating\nFrom: ${_IN_LIST[${C}]:t} \n  To: ${_OUT_LIST[${C}]:t}" >&2
			/bin/mv "${_IN_LIST[${C}]}" "${_OUT_LIST[${C}]}"
		fi
	done
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		e) echo "<EXTENSION>";;
		m) echo "<MEDIA_TITLE>";;
		p) echo "<TEXT>";;
		t) echo "<INT>";;
	esac
}


read -r -d '' DESC<<EOF
Modify file names. Remove or change arbitrary text in file names.
\t${ITALIC}${BOLD}${UNDER}FromText${RESET} is omitted if macro options are selected (camel casing, uncamel, truncation, etc.). 
\t${ITALIC}${BOLD}${UNDER}ToText${RESET} is always optional. Per arbitrary substitutions, missing ${ITALIC}${BOLD}${UNDER}ToText${RESET} will simply delete ${ITALIC}${BOLD}${UNDER}FromText${RESET}
\tSubstitutions are ${ITALIC}${BOLD}case sensitive${RESET} by default.  Missing ${ITALIC}${BOLD}${UNDER}FileList${RESET} will default to ${ITALIC}${BOLD}${UNDER}ALL${RESET} files in current 
\tdirectory.  You are prompted before any action is final (${ITALIC}${UNDER}unless input is piped${RESET}). If filenames are piped,
\t${ITALIC}${BOLD}${UNDER}fsub${RESET} functions as an inline filter and the resulting list is returned to the caller; no actual file name is altered.
\t${ITALIC}${BOLD}${UNDER}Media Files${RESET}: Cleaning media file names requires ${ITALIC}${BOLD}${UNDER}keywords${RESET} that match the title. Any file containing a title match 
\twill be scrubbed of any content other than the matched portion and renamed to ${ITALIC}${BOLD}${UNDER}<title>-<pattern>${RESET} with <pattern>
\tbeing any detected ${ITALIC}${BOLD}${UNDER}series or date pattern${RESET} Currently, piping is not implemented for media.
\t${ITALIC}${BOLD}${UNDER}Media Example${RESET}: Given the file: "An Example Media File and_other_junk s01e05.mkv" and the arguments 
\tare: "an example media file", then the resulting file name would be modified to:"An Example Media File-S01E05.mkv". 
\tFiles not containing a matching title pattern are ignored.${RESET} Media file operations will NOT ${ITALIC}chain${RESET} with other 
\toperations. If other operations are desired, run them subsequent to media file conversion.
EOF

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [FromText] [ToText] [FileList]\n"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-C${RESET} eliminate floats, underscores, commas, dots, dashes, brackets, parens, quotes, extra space, non ascii (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-I${RESET} interactive changes"
	echo -e "${WHITE_FG}-N${RESET} add leading numbers (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-P${RESET} proper case"
	echo -e "${WHITE_FG}-S${RESET} service mode (background job)"
	echo -e "${WHITE_FG}-T${RESET} trim leading/trailing whitespace from files or dirs (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-Y${RESET} eliminate YouTube tags"
	echo -e "${WHITE_FG}-b${RESET} eliminate extended/non-ascii (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-c${RESET} camelCase (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-d${RESET} allow directories as candidates"
	echo -e "${WHITE_FG}-e $(opt_type e)${RESET} limit operations to files having $(opt_type e)"
	echo -e "${WHITE_FG}-i${RESET} case insensitive"
	echo -e "${WHITE_FG}-m $(opt_type m)${RESET} operate on matching media title ('enclose multiword args in quotes')"
	echo -e "${WHITE_FG}-n${RESET} clean leading numbers (remove dots between numbers and text) (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-p $(opt_type p)${RESET} prepend text to filenames"
	echo -e "${WHITE_FG}-r${RESET} preserve resolution (720p/1080p) in media titles (only valid with -m)"
	echo -e "${WHITE_FG}-s${RESET} eliminate spaces (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-t $(opt_type t)${RESET} truncate filenames to arbitrary length $(opt_type t) (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-u${RESET} unCamelCase (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-v${RESET} verbose output"
	echo -e "${WHITE_FG}-x${RESET} strip leading numbers (${CYAN_FG}M${RESET})"
	echo -e "${WHITE_FG}-y${RESET} no prompting"
	echo -e "${WHITE_FG}Note${RESET}:(${CYAN_FG}M${RESET}) - Macro option - additional args ignored"
	echo -e "${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HCDINPSTYabe:irscdm:p:nt:uxyv"

ADD_LEADING_DIGITS=false
CAMEL=false
CASE=S
CLEAN_LEADING_DIGITS=false
DOTS=false
EXTENDED=false
TRUNC_FN_LEN=0
GREP_OPTS='-Eq'
INTERACTIVE=false
MEDIA_FILE=false
PREPEND_TAG=''
PROPER_CASE=false
RES=false
SPACES=false
STRIP_LEADING_DIGITS=false
SERVICE_MODE=false
TRUNCATE=false
TRIM=false
UNCAMEL=false
YT_TAGS=false

typeset -a OPTIONS
OPTIND=0

while getopts ${OPTSTR} OPT;do
	case ${OPT} in
     C) DOTS=true;;
     D) dbg_set_level;;
     H) usage;;
     I) INTERACTIVE=true;;
     N) ADD_LEADING_DIGITS=true;;
     P) PROPER_CASE=true;;
     S) SERVICE_MODE=true;;
     T) TRIM=true;;
     Y) YT_TAGS=true;;
     b) EXTENDED=true;;
     c) SPACES=true; DOTS=true; CAMEL=true;;
     d) g_ALLOW_DIRS=true;;
     e) g_LIMIT_TO_EXT=true;g_EXT_TEXT=${OPTARG};;
     i) CASE=I; GREP_OPTS='-Eiq';;
     m) MEDIA_FILE=true;MEDIA_FILE_TITLE=${OPTARG};;
     n) CLEAN_LEADING_DIGITS=true;;
     p) PREPEND=true;PREPEND_TAG=${OPTARG};;
     r) RES=true;;
     s) SPACES=true;;
     t) TRUNC_FN_LEN=${OPTARG};TRUNCATE=true;;
     u) UNCAMEL=true;;
     v) g_VERBOSE=true;;
     x) STRIP_LEADING_DIGITS=true;;
     y) g_NO_PROMPTING=true;;
     :) print -u2 "${0}: option: ${WHITE_FG}-${OPTARG} ${BOLD}${RED_FG}requires an argument${RESET}"; usage;;
    \?) print -u2 "${0}: hit ${BOLD}${RED_FG}Unknown option${RESET} ${OPTARG}"; usage;;
	esac
	[[ ${OPT} != 'D' ]] && OPTIONS+=${OPT}
done
shift $(( OPTIND - 1 ))
#--End GetOpts--

# Execution
[[ -e ${_LOG} ]] && /bin/rm -f ${_LOG}

[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} g_NO_PROMPTING:${g_NO_PROMPTING}"

# Handle input method
_PIPED=false
if [[ ${SERVICE_MODE} == 'false' ]];then # SERVICE_MODE ignores piped inputs
	if [[ ! -t 0 ]];then
		_PIPED=true
		while read PIPE;do
			_PIPELINE+=$(echo ${PIPE} | tut strip_ansi)
		done
	fi
fi

# Record arg types
{
if [[ ${#} -ne 0 ]];then
	for ((A=1; A <= ${#@}; A++));do
		OBJ=${@[${A}]}
		if [[ -e ${OBJ} ]];then
			_ARG_LIST[${A}]=file_dir
			[[ -f ${OBJ} ]] && echo "Found file:${WHITE_FG}${OBJ}${RESET}"
			[[ -d ${OBJ} ]] && echo "Found directory:${WHITE_FG}${OBJ}${RESET}"
		else
			_ARG_LIST[${A}]=bare_word
			echo "Found text:${WHITE_FG}${OBJ}${RESET}"
		fi
	done
else
	echo "No arguments passed"
fi
} >> ${_LOG}

# Validate args and options
[[ ${#_ARG_LIST} -eq 0 && ${#OPTIONS} -eq 0 ]] && usage "${_SCRIPT_TAG} ${RED_FG}Missing minimum arguments or options${RESET}"
[[ $(( $OPTIONS[(Ie)i] )) -ne 0 && ${SEARCH_REPLACE} == 'false' ]] && usage "Option: -i only valid for search and replace"
[[ $(( $OPTIONS[(Ie)r] )) -ne 0 && ${MEDIA_FILE} == 'false' ]] && usage "Option: -r only valid for media files"

if [[ ${TRUNCATE} == 'true' && -n ${TRUNC_FN_LEN} ]];then
	validate_is_integer ${TRUNC_FN_LEN}
	[[ ${?} -ne 0 ]] && usage "Invalid truncation length:${TRUNC_FN_LEN} Must be an integer value"
fi

if [[ ${#OPTIONS} -ge 1 && $(( $OPTIONS[(Ie)m] )) -ne 0 ]];then
	for O in ${OPTIONS};do
		case ${O} in
			S|m|r|d|y) HIT=true;;
			*) HIT=false;break;;
		esac
	done
	[[ ${HIT} == 'false' ]] && usage "Option: -m only compatible with -S -r -d -y"
fi

# Prep for space dot camel
[[ ${EXTENDED} == "true" ]] && _SPACE_DOT+=(B)
[[ ${CAMEL} == "true" ]] && _SPACE_DOT+=(C)
[[ ${DOTS} == "true" ]] && _SPACE_DOT+=(D)
[[ ${SPACES} == "true" ]] && _SPACE_DOT+=(S)
[[ ${UNCAMEL} == "true" ]] && _SPACE_DOT+=(U)

# No options
SEARCH_REPLACE=false
_FIND_PATH=null

[[ ${_ARG_LIST[1]} == 'file_dir' ]] && _FIND_PATH=${1}
[[ ${_ARG_LIST[2]} == 'file_dir' ]] && _FIND_PATH=${2}
[[ ${_ARG_LIST[3]} == 'file_dir' ]] && _FIND_PATH=${3}
[[ ${_ARG_LIST[1]} == 'bare_word' ]] && g_FROM_TEXT=${1} && SEARCH_REPLACE=true
[[ ${_ARG_LIST[2]} == 'bare_word' ]] && g_TO_TEXT=${2} && SEARCH_REPLACE=true

if [[ ${g_VERBOSE} == 'true' && ${SEARCH_REPLACE} == 'true' ]];then
	[[ -z ${g_TO_TEXT} ]] && echo "Deleting:${WHITE_FG}${g_FROM_TEXT}${RESET}\n" >&2
	[[ -n ${g_TO_TEXT} ]] && echo "Search:${WHITE_FG}${g_FROM_TEXT}${RESET} Replace:${WHITE_FG}${g_TO_TEXT}${RESET}\n" >&2
fi

# Get candidate data
if [[ ${_PIPED} == 'true' ]];then 
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${0} ${WHITE_ON_GREY}INPUT IS PIPED${RESET}"
	g_LIST_METHOD="piped input"
	[[ ${g_VERBOSE} == 'true' && ${_FIND_PATH} != 'null' ]] && echo "${MAGENTA_FG}Warning${RESET}:${YELLOW_FG}File path ignored for piped input${RESET}" >&2

	# Grab piped input
	_IN_LIST[1]=${_PIPELINE}
else
	if [[ -f ${_FIND_PATH} ]];then
		# Convert file name to list member
		g_LIST_METHOD="file to path"
		inode_ndx "_IN_LIST" "${_FIND_PATH}"
		PATHLBL=${_FIND_PATH:h}
	elif [[ ${_FIND_PATH} != 'null' ]];then
		# Find files in path
		g_LIST_METHOD="find in path"
		PATHLBL=${_FIND_PATH}
		inode_ndx "_IN_LIST" "${_FIND_PATH}" 2
	else
		# Find files in current directory
		g_LIST_METHOD="find in pwd"
		PATHLBL=${PWD}
		inode_ndx "_IN_LIST" "${PWD}"
	fi

	if [[ ${g_VERBOSE} == 'true' ]];then
		printf "Scanning path:%s\n" ${PATHLBL}
		printf "Examining ${WHITE_FG}%d${RESET} files...\n" ${#_IN_LIST} >&2
	fi
fi

if ! arr_is_populated "${_IN_LIST}";then
	exit_leave $(err_msg_exit W "${_SCRIPT}:Can't continue - ${g_LIST_METHOD} failed - _IN_LIST is empty")
fi

#if [[ ${_DEBUG} -gt 0 ]];then
	{
	echo "COMMAND LINE AND OPTIONS"
	echo "----------------------- "
	echo FPATH=${FPATH}
	echo FGLOB=${FGLOB}
	echo OPTIONS=\[${OPTIONS}\]
	echo _FIND_PATH=${_FIND_PATH}
	echo g_ALLOW_DIRS=${g_ALLOW_DIRS}
	echo g_FROM_TEXT=${g_FROM_TEXT}
	echo g_LIST_METHOD=${g_LIST_METHOD}
	echo g_NO_PROMPTING=${g_NO_PROMPTING}
	echo g_TO_TEXT=${g_TO_TEXT}
	echo SEARCH_REPLACE=${SEARCH_REPLACE}
	echo CAMEL=${CAMEL}
	echo CASE=${CASE}
	echo DOTS=${DOTS}
	echo PROPER_CASE=${PROPER_CASE}
	echo TRUNC_FN_LEN=${TRUNC_FN_LEN}
	echo GREP_OPTS=${GREP_OPTS}
	echo CLEAN_LEADING_DIGITS=${CLEAN_LEADING_DIGITS}
	echo MEDIA_FILE=${MEDIA_FILE}
	echo PREPEND_TAG=${PREPEND_TAG}
	echo RESOLUTION=${RES}
	echo SPACES=${SPACES}
	echo EXTENDED=${EXTENDED}
	echo TRIM=${TRIM}
	echo TRUNCATE=${TRUNCATE}
	echo YT_TAGS=${YT_TAGS}
	echo UNCAMEL=${UNCAMEL}
	echo "---------"
	echo "ARG TYPES"
	echo "---------"
	for K in ${(onk)_ARG_LIST};do
		printf "TYPE:%s VALUE:%s\n" ${K} ${_ARG_LIST[${K}]}
	done
	} >> ${_LOG}
#fi

# Prepend
if [[ ${PREPEND} == "true" ]];then
	[[ ! -e ${1} ]] && echo "${_SCRIPT_TAG} ${RED_FG}File not found${RESET}:${1}" >&2 && return 1
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Prepending file names" | tee -a ${_LOG} } >&2
	do_prepend ${PREPEND_TAG}
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for prepend" | tee -a ${_LOG} } >&2
fi

# Substitutions
if [[ ${SEARCH_REPLACE} == 'true' ]];then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${WHITE_FG}Calling do_subs${RESET}..."
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${WHITE_ON_GREY}Substituting \"${g_FROM_TEXT}\" with \"${g_TO_TEXT}\"${RESET}" | tee -a ${_LOG} } >&2
	do_subs
	RC=${?}
	if [[ ${g_VERBOSE} == 'true' && ${RC} -ne 0 ]];then
		echo "No matches for substitution" | tee -a ${_LOG} >&2
	fi
fi

# Space_Dot_Camel
if [[ ${#_SPACE_DOT} -gt 0 ]];then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${WHITE_FG}Calling do_sdc with _SPACE_DOT:${_SPACE_DOT}${RESET}..."
	if [[ ${g_VERBOSE} == 'true' ]];then
		{
			for X in ${(o)_SPACE_DOT};do
			case ${X} in
				B) echo "${CYAN_FG}Eliminating extended/non-ascii...${RESET}";;
				C) echo "${CYAN_FG}Camel casing...${RESET}";;
				D) echo "${CYAN_FG}Eliminating dots, dashes, underscores, and commas...${RESET}";;
				S) echo "${CYAN_FG}Eliminating spaces...${RESET}";;
				U) echo "${CYAN_FG}UnCamel casing...${RESET}";;
			esac
		done
		} | tee -a ${_LOG} >&2
	fi

	do_sdc

	if [[ ${?} -ne 0 ]];then
		if [[ ${g_VERBOSE} == 'true' ]];then
			{
			for X in ${(o)_SPACE_DOT};do
				case ${X} in
					B) echo "No matches for extended/non-ascii";;
					S) echo "No matches for eliminating spaces";;
					D) echo "No matches for eliminating dots, dashes, and commas";;
					C) echo "No matches for camel casing";;
					U) echo "No matches for uncamel casing";;
				esac
			done
			} | tee -a ${_LOG} >&2
		fi
	fi
fi

# Proper case
if [[ ${PROPER_CASE} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Proper casing files${RESET}" | tee -a ${_LOG} } >&2
	do_proper_case
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for proper case" | tee -a ${_LOG} } >&2
fi
# Clean leading digits (usually for audio files)
if [[ ${CLEAN_LEADING_DIGITS} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Cleaning leading digits with hyphen${RESET}" | tee -a ${_LOG} } >&2
	do_clean_leading_digits
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for clean leading digits" | tee -a ${_LOG} } >&2
fi

# Add leading digits (usually for audio files)
if [[ ${ADD_LEADING_DIGITS} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Adding leading digits with hyphen${RESET}" | tee -a ${_LOG} } >&2
	do_add_leading_digits
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for add leading digits" | tee -a ${_LOG} } >&2
fi

# Strip leading digits (usually for audio files)
if [[ ${STRIP_LEADING_DIGITS} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Stripping leading digits with hyphen${RESET}" | tee -a ${_LOG} } >&2
	do_strip_leading_digits
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for strip leading digits" | tee -a ${_LOG} } >&2
fi

# Truncations
if [[ ${TRUNC_FN_LEN} -gt 0 ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Limiting file names to:${WHITE_FG}${TRUNC_FN_LEN}${CYAN_FG} characters${RESET}" | tee -a ${_LOG} } >&2
	do_truncate
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for truncation" | tee -a ${_LOG} } >&2
fi

# Trimming
if [[ ${TRIM} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Trimming file names" | tee -a ${_LOG} } >&2
	do_trim
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No matches for trim" | tee -a ${_LOG} } >&2
fi

# YouTube tags
if [[ ${YT_TAGS} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Eliminating YouTube tags" | tee -a ${_LOG} } >&2
	do_yt_tag
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && echo "No matches for YouTube tags" >&2 | tee -a ${_LOG}
fi

# Media
if [[ ${MEDIA_FILE} == "true" ]];then
	[[ ${g_VERBOSE} == 'true' ]] && { echo "${CYAN_FG}Cleaning media file names matching${RESET}:[${WHITE_FG}${MEDIA_FILE_TITLE}${RESET}]" | tee -a ${_LOG} } >&2
	do_media ${RES} "${MEDIA_FILE_TITLE}" # Creates it's own list
	[[ ${g_VERBOSE} == 'true' && ${?} -ne 0 ]] && { echo "No media files were processed " | tee -a ${_LOG} } >&2
fi

# Finalize
do_finalize

exit_leave
