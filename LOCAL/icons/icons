#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/DATE.zsh
source ${_LIB_DIR}/SELECT.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Declarations
typeset -A _ICON_SIZE=()
typeset -a _ICO_DIRS=(/opt ${HOME}/.local/share/icons /usr/share/icons /usr/share/pixmaps)
typeset -a _ICON_LIST=()
typeset -aU _SIZES=()
typeset -a _SZ_LIST=()

# Constants
_ICON_CACHE_DIR=~/.local/share/icon_cache

_ICO_REGEX='.*(ico|png|svg)$'
_ICON_CACHE_STAMP=${_ICON_CACHE_DIR}/icon_cache.stamp

_ICON_CACHE=${_ICON_CACHE_DIR}/icons
_ICO_STASH=/tmp/icon_stash
_SIZE_CACHE=${_ICON_CACHE_DIR}/sizes

# Vars
_SZ_UPDATE=false

# Globals
g_LIMIT=200
g_ICON_DIR=''
g_ICON_SIZE=''

# Functions
build_icon_cache () {
	local D

	/bin/rm -f ${_ICON_CACHE}

	for D in ${_ICO_DIRS};do
		[[ -n ${g_ICON_DIR} && ! ${D} == ${g_ICON_DIR} ]] && continue
		[[ ${D} =~ ".*MAC.*" ]] && continue
		[[ ${D:l} =~ ".*qt.*" ]] && continue

		{
		find -P ${D} -type f -regextype 'posix-extended' -regex ".*${_ICO_REGEX}" 2>/dev/null
		} >> ${_ICON_CACHE}
	done
	touch ${_ICON_CACHE_STAMP}
}

build_size_cache () {
	local NDX=0
	local F
	local SZ

	/bin/rm -f ${_SIZE_CACHE}

	tput cup 3 0 && tput el

	NDX=0
	for F in ${_ICON_LIST};do
		((NDX++))
		tput cup 3 0; printf "\rProcessing ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} icons ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_ICON_LIST} $(( NDX * 100. / ${#_ICON_LIST} )) 
		SZ=$(file ${F} | grep -Po '\d+ x \d+')
		[[ -n ${SZ} ]] && echo "${F}|${SZ}" >> ${_SIZE_CACHE}
	done
}

clear_stash () {
	/bin/rm -rf ${_ICO_STASH}
}

is_valid_int () {
	local ARG=${1}
	local REGEX='^[0-9]+$'

	[[ ${ARG} =~ ${REGEX} ]] && return 0
	return 1
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Search for and display icons
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		l) echo "<INTEGER>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [<SEARCHTERM>]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-l $(opt_type l)${RESET} set limit on icons per page (default:${g_LIMIT})"
	echo -e "${WHITE_FG}-d${RESET} select icon directory from list"
	echo -e "${WHITE_FG}-p print icon paths"
	echo -e "${WHITE_FG}-s${RESET} select icon size from list"
	echo -e "${WHITE_FG}-w${RESET} limit searches to whole words only"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

typeset -a OPTIONS
OPTSTR=":HDl:dpsw"
OPTIND=0

GET_DIR=false
GET_SIZE=false
PRINT_PATHS=false
WHOLE_WORDS=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     d) GET_DIR=true;;
	  l) if is_valid_int ${OPTARG};then
           g_LIMIT=${OPTARG}
        else
			  exit_leave $(msg_exit W "Invalid integer")
        fi;;
     p) PRINT_PATHS=true;;
     s) GET_SIZE=true;;
     w) WHOLE_WORDS=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $(( OPTIND - 1 ))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

set_exit_callback clear_stash

[[ ${#} -ne 0 ]] && SEARCHTERM=${1}
[[ ${WHOLE_WORDS} == 'true' ]] && GREP_OPTS="-w -i" || GREP_OPTS="-i"

if [[ ${GET_DIR} == 'true' ]];then
	g_ICON_DIR=''

	sel_set_list ${(on)_ICO_DIRS}
	sel_list -O ${MAGENTA_FG} -x5 -y11 -M"<w>Select icon directory<N>"

	[[ ${?} -ne 0 ]] && echo "${_SCRIPT_TAG} ${BOLD}${RED_FG}Operation Cancelled${RESET}" && exit_leave

	g_ICON_DIR=${_SEL_VAL}
	msg_box_clear OUTER_BOX
fi

[[ -n ${g_ICON_DIR} ]] && DIR_LBL=${g_ICON_DIR} || DIR_LBL="${#_ICO_DIRS} directories"

tcup 0 0 && echo "Building icon cache from ${DIR_LBL}..."
build_icon_cache

[[ ${WHOLE_WORDS} == 'true' ]] && SMSG="${SEARCHTERM} ${RESET}(whole word)" || SMSG=${SEARCHTERM}

# Set list based on options
if [[ -n ${SEARCHTERM} && -n ${g_ICON_DIR} ]];then
	_ICON_LIST=("${(f)$(eval "grep ${GREP_OPTS} ${SEARCHTERM} ${_ICON_CACHE}")}")
	MSG="List contains ${WHITE_FG}${#_ICON_LIST}${RESET} icons ${ITALIC}matching${RESET} ${CYAN_FG}${SMSG}${RESET} in directory ${CYAN_FG}${g_ICON_DIR}${RESET}"
elif [[ -n ${SEARCHTERM} ]];then
	_ICON_LIST=("${(f)$(eval "grep ${GREP_OPTS} ${SEARCHTERM} ${_ICON_CACHE}")}")
	MSG="List contains ${WHITE_FG}${#_ICON_LIST}${RESET} icons ${ITALIC}matching${RESET} ${CYAN_FG}${SMSG}${RESET}"
elif [[ -n ${g_ICON_DIR} ]];then
	_ICON_LIST=("${(@f)"$(<${_ICON_CACHE})"}") # File to array
	MSG="List contains ${WHITE_FG}${#_ICON_LIST}${RESET} icons ${ITALIC}in directory${RESET} ${CYAN_FG}${g_ICON_DIR}${RESET}"
else
	_ICON_LIST=("${(@f)"$(<${_ICON_CACHE})"}") # File to array
	MSG="List contains all ${WHITE_FG}${#_ICON_LIST}${RESET} icons"
fi

if arr_is_populated "${_ICON_LIST}";then
	tcup 1 0 && echo ${MSG}
else
	exit_leave "${RED_FG}No icons found${RESET} based on current options"
fi

if [[ ${GET_SIZE} == 'true' ]];then
	tcup 2 0 && echo "Building size cache..."
	build_size_cache

	_SZ_LIST=("${(@f)"$(<${_SIZE_CACHE})"}") # File to array

	tput cup 4 0 && tput el

	for S in ${_SZ_LIST};do # Extract sizes for all icons
		((NDX++))
		tput cup 4 0; printf "\rProcessing line ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} cache ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_SZ_LIST} $(( NDX * 100. / ${#_SZ_LIST} )) 
		FN=$(cut -d'|' -f1 <<<${S})
		SZ=$(cut -d'|' -f2 <<<${S})
		_ICON_SIZE[${FN}]=${SZ}
		_SIZES+=${SZ}
	done

	sel_set_list ${(on)_SIZES}
	sel_list -O ${CYAN_FG} -x8 -y16 -M"<w>Select icon size<N>"

	[[ ${?} -ne 0 ]] && echo "${BOLD}${RED_FG}Cancelled...${RESET}" && exit_leave
	msg_box_clear OUTER_BOX

	g_ICON_SIZE=${_SEL_VAL}
fi

# Create links to selected files in ${_ICO_STASH}
[[ ! -e ${_ICO_STASH} ]] && md ${_ICO_STASH} || /bin/rm -f ${_ICO_STASH}/*


NDX=0
for I in ${_ICON_LIST};do
	((NDX++))
	if [[ -n ${g_ICON_SIZE} ]];then
		tcup 5 0; tput el; printf "\rLinking icon files matching size:${g_ICON_SIZE} ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} in ${WHITE_FG}%s${RESET} ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_ICON_LIST} ${_ICO_STASH} $(( NDX * 100. / ${#_ICON_LIST} )) 
		[[ -n ${_ICON_SIZE[${I}]} && ${_ICON_SIZE[${I}]}  == ${g_ICON_SIZE} ]] && ln -s ${I} ${_ICO_STASH} 2>/dev/null
	else
		tcup 5 0; tput el; printf "\rLinking icon file ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} in ${WHITE_FG}%s${RESET} ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_ICON_LIST} ${_ICO_STASH} $(( NDX * 100. / ${#_ICON_LIST} )) 
		ln -s ${I} ${_ICO_STASH} 2>/dev/null
	fi
done

clear
if ! pgrep geeqie;then
	geeqie --geometry=1200x400+350+280 ${_ICO_STASH} >/dev/null 2>&1 &
	sleep 1
	wmctrl -r geeqie -b add,above 
else
	wmctrl -a geeqie
fi

LAST_FN=?
cursor_off
while true;do
	if ! pgrep geeqie >/dev/null;then
		cursor_on
		exit_leave
	fi
	FN=$(readlink $(geeqie --tell))
	if [[ ${FN} != ${LAST_FN} ]];then
		tcup 0 0;tput el
		echo ${FN}
		LAST_FN=${FN}
	else
		sleep 1
	fi
done

exit_leave
