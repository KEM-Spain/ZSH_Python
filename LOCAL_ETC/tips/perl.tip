echo ${E_BOLD}${E_WHITE_FG}${(C)${0/tip_/}:t:r} Tips${E_RESET}
cat << tip_perl_EOF_1

${E_WHITE_FG}Search file for text:${E_RESET}
perl -wln -e "/${1}/ and print;" ${2}

${E_WHITE_FG}Word is in KW:${E_RESET}
perl -nle "if (index('${KW}', \$_) == 0) { exit 0 } else { exit 1 }" <<<${ARG}

is_valid_keyword () {
	local ARG=\${1}
	local KW=\${2}

	perl -nle "if (index('${KW}', \$_) == 0) { exit 0 } else { exit 1 }" <<<\${ARG}
	return \${?}
}

${E_WHITE_FG}Print only matching:${E_RESET}
	perl -ne '/\w+\.\w+\$/ && print "\$&"' <<<\${ARG}

${E_WHITE_FG}Exit status on match
	perl -ne 'if ( /REGEX/ ) { exit(0) } else { exit(1) }' <<<\${ARG}

${E_WHITE_FG}Strip Options:${E_RESET}
	while true;do # Strip options
		grep -q '\-' <<<${RAW_PATH}
		[[ \${?} -ne 0 ]] && break
		RAW_PATH=\$(echo \${RAW_PATH} \| perl -pe 's/(-\w+)\s+(.*)/\2/g')
	done

${E_WHITE_FG}Keyword Arguments:${E_RESET}
	Name each parameter in the call:

	thefunc(INCREMENT => "20s", START => "+5m", FINISH => "+30m");
	thefunc(START => "+5m", FINISH => "+30m");
	thefunc(FINISH => "+30m");
	thefunc(START => "+5m", INCREMENT => "15s");
	Then in the subroutine, create a hash loaded up with default values plus the array of named pairs.

	sub thefunc {
		 my %args = (
			  INCREMENT   => '10s',
			  FINISH      => 0,
			  START       => 0,
			  @_,         # Argument pair list goes here
		 );
		 if (${args}{INCREMENT}  =~ /m$/ ) { ..... }
	}

${E_WHITE_FG}Passing vars to a shell command:${E_RESET}
	ROWS=\$(perl -n -e '\${count}++ if /'\${ACTION_PATTERN}'/; END { print \${count} }' ~/.zsh_history)

${E_WHITE_FG}Replace only first instance:${E_RESET}
    perl -pe '!${x} && s/((.* \(\)|function .*) {)/#Functions\n${1}/ && (${x}=1)' ${1}

${E_WHITE_FG}Regex escaping special chars:${E_RESET}
    perl -pi'.bak' -e 's/(.*dbg ")(\$\{0}:)?(\s+)?([\(\$A-Za-z_-])/\1\$\{0}:\${LINENO} \4/' <FILE>

${E_WHITE_FG}A simple filter:${E_RESET}
    perl -ne 'print if /REGEX/'

${E_WHITE_FG}Filter out blank lines (in place):${E_RESET}
    perl -i -ne'print if /\w/'

${E_WHITE_FG}Search and replace (in place):${E_RESET}
    perl -i -pe's/SEARCH/REPLACE/' 

${E_WHITE_FG}Add first and penultimate columns:${E_RESET}
    perl -lane 'print \${F}[0] + \${F}[-2]'

${E_WHITE_FG}Just lines 15 to 17:${E_RESET}
    perl -ne 'print if 15 .. 17' *.pod

${E_WHITE_FG}In-place edit of *.c files changing all foo to bar:${E_RESET}
    perl -p -i.bak -e 's/\bfoo\b/bar/g' *.c

${E_WHITE_FG}Command-line that prints the first 50 lines (cheaply):${E_RESET}
    perl -pe 'exit if $. > 50' f1 f2 f3 ...

${E_WHITE_FG}Delete first 10 lines:${E_RESET}
    perl -i.old -ne 'print unless 1 .. 10' foo.txt

${E_WHITE_FG}Change all the isolated oldvar occurrences to newvar:${E_RESET}
    perl -i.old -pe 's{\boldvar\b}{newvar}g' *.[chy]

${E_WHITE_FG}Command-line that reverses the whole file by lines:${E_RESET}
    perl -e 'print reverse <>' file1 file2 file3 ....

${E_WHITE_FG}Find palindromes:${E_RESET}
    perl -lne 'print if ${_} eq reverse' /usr/dict/words

${E_WHITE_FG}Command-line that reverse all the bytes in a file:${E_RESET}
    perl -0777e 'print scalar reverse <>' f1 f2 f3 ...

${E_WHITE_FG}Command-line that reverses the whole file by paragraphs:${E_RESET}
    perl -00 -e 'print reverse <>' file1 file2 file3 ....

${E_WHITE_FG}Increment all numbers found in these files:${E_RESET}
    perl i.tiny -pe 's/(\d+)/ 1 + ${1} /ge' file1 file2 ....

${E_WHITE_FG}Command-line that shows each line with its characters backwards:${E_RESET}
    perl -nle 'print scalar reverse ${_}' file1 file2 file3 ....

${E_WHITE_FG}Delete all but lines between START and END:${E_RESET}
    perl -i.old -ne 'print unless /^START$/ .. /^END$/' foo.txt

${E_WHITE_FG}Binary edit (careful!):${E_RESET}
    perl -i.bak -pe 's/Mozilla/Slopoke/g' /usr/local/bin/netscape

${E_WHITE_FG}Duplicate words:${E_RESET}
    perl -0777 -ne 'print "$.: doubled ${_}\n" while /\b(\w+)\b\s+\b\1\b/gi'

${E_WHITE_FG}Print the last 50 lines (expensive!):${E_RESET}
    perl -e '@lines = <>; print @lines[ ${#lines} .. ${#lines}-50' f1 f2 f3 ...

${E_WHITE_FG}Move files < 1000 bytes to DIR:${E_RESET}
    ls -l *xls | perl -na -F'/\s+/' -e 'print "\${F}[8]\n" if \${F}[4] < 1000' |
    xargs -J % mv % DIR

${E_WHITE_FG}Print 1st, 2nd, and last columns (use -l for auto-line-end processing):${E_RESET}
    perl -F"\t" -nlae'print join "\t", @F[0,1,-1]' 

${E_WHITE_FG}Print columns 1-20:${E_RESET}
    perl -F"\t" -nlae'print join "\t", @F[0..19]'

${E_WHITE_FG}Print all filenames & their line # S w/ pattern:${E_RESET}
    perl -ne'if (/PATTERN/) { print "\${ARGV:} $.\n" }; $. = 0 if eof'

${E_WHITE_FG}Print file up to some pattern:${E_RESET}
    perl -ne'if (/PATTERN/) { close ARGV } else { print }'

${E_WHITE_FG}Inclusive of line w/ pattern:${E_RESET}
    perl -pe'if (/PATTERN/) { close ARGV }'

${E_WHITE_FG}Delete columns of file after column N+2:${E_RESET}
    perl -i -F'\t' -nlae'print join "\t", @F[0..N]' 

${E_WHITE_FG}Insert new column after column N:${E_RESET}
    perl -i -F'\t' -nae'print join "\t", @F[0..N], "new", @F[N+1..${#F}]'

${E_WHITE_FG}Cut files in dir at pattern & omit blank lines:${E_RESET}
    perl -i -ne 'if (/PATTERN/) { close ARGV } else { print unless /^$/ }'

${E_WHITE_FG}Insert line numbers in a file:${E_RESET}
    perl -i -ne 'printf "%04d %s", $., ${_}'

${E_WHITE_FG}Insert text at line N:${E_RESET}
    perl -i -pe 'print "text\n" if $. == N; $. = 0 if eof'

${E_WHITE_FG}Print filenames of files containing pattern in first N lines:${E_RESET}
    perl -n -e 'if (/PATTERN/) { print "\${ARGV}\n"; close ARGV }' 
            -e 'close \${ARGV} if $. = N'

${E_WHITE_FG}Return part of select filenames:${E_RESET}
    perl -ne '\${ARGV} =~ /^(.*)\.TXT$/; print "$&\n"; close ARGV'

${E_WHITE_FG}Add columns M thru N and insert total:${E_RESET}
    perl -F'\t' -nlae '${t}=0; ${t} += ${_} for @F[M..N]; print "${_}\t${t}" '

${E_WHITE_FG}Replace pattern on first line of each file:${E_RESET}
    perl -i -pe'
        ${new} = 1; 
        s/PATTERN/REPLACE/ if ${new}; 
        ${new} = eof(ARGV) ? 1 : 0'
tip_perl_EOF_1

echo "\n${E_WHITE_FG}Command line switches${E_RESET}"
echo "---------------------"
cat << "tip_perl_EOF_2"
SYNOPSIS
    perl [ -sTtuUWX ] [ -hv ] [ -V[:*configvar*] ]
    [ -cw ] [ -d[t][:*debugger*] ] [ -D[*number/list*] ]
    [ -pna ] [ -F*pattern* ] [ -l[*octal*] ] [ -0[*octal/hexadecimal*] ]
    [ -I*dir* ] [ -m[-]*module* ] [ -M[-]*'module...'* ] [ -f ]
    [ -C [*number/list*] ] [ -S ] [ -x[*dir*] ] [ -i[*extension*] ]
    [ [-e|-E] *'command'* ] [ -- ] [ *programfile* ] [ *argument* ]...

) | less -R
  Command Switches
    As with all standard commands, a single-character switch may be
    clustered with the following switch, if any.

        #!/usr/bin/perl -spi.orig   # Same as -s -p -i.orig

    A "--" signals the end of options and disables further option
    processing. Any arguments after the "--" are treated as filenames and
    arguments.

    Switches include:

    -0[*octal/hexadecimal*]
         specifies the input record separator ($/) as an octal or
         hexadecimal number. If there are no digits, the null character is
         the separator. Other switches may precede or follow the digits. For
         example, if you have a version of *find* which can print filenames
         terminated by the null character, you can say this:

             find . -name '*.orig' -print0 | perl -n0e unlink

         The special value 00 will cause Perl to slurp files in paragraph
         mode. Any value 0400 or above will cause Perl to slurp files whole,
         but by convention the value 0777 is the one normally used for this
         purpose.

         You can also specify the separator character using hexadecimal
         notation: -0x*HHH...*, where the "*H*" are valid hexadecimal
         digits. Unlike the octal form, this one may be used to specify any
         Unicode character, even those beyond 0xFF. So if you *really* want
         a record separator of 0777, specify it as -0x1FF. (This means that
         you cannot use the "-x" option with a directory name that consists
         of hexadecimal digits, or else Perl will think you have specified a
         hex number to -0.)

    -a   turns on autosplit mode when used with a "-n" or "-p". An implicit
         split command to the @F array is done as the first thing inside the
         implicit while loop produced by the "-n" or "-p".

             perl -ane 'print pop(@F), "\n";'

         is equivalent to

             while (<>) {
                 @F = split(' ');
                 print pop(@F), "\n";
             }

         An alternate delimiter may be specified using -F.

         -a implicitly sets "-n".

    -C [*number/list*]
         The -C flag controls some of the Perl Unicode features.

         As of 5.8.1, the -C can be followed either by a number or a list of
         option letters. The letters, their numeric values, and effects are
         as follows; listing the letters is equal to summing the numbers.

             I     1   STDIN is assumed to be in UTF-8
             O     2   STDOUT will be in UTF-8
             E     4   STDERR will be in UTF-8
             S     7   I + O + E
             i     8   UTF-8 is the default PerlIO layer for input streams
             o    16   UTF-8 is the default PerlIO layer for output streams
             D    24   i + o
             A    32   the @ARGV elements are expected to be strings encoded
                       in UTF-8
             L    64   normally the "IOEioA" are unconditional, the L makes
                       them conditional on the locale environment variables
                       (the LC_ALL, LC_CTYPE, and LANG, in the order of
                       decreasing precedence) -- if the variables indicate
                       UTF-8, then the selected "IOEioA" are in effect
             a   256   Set ${^UTF8CACHE} to -1, to run the UTF-8 caching
                       code in debugging mode.

         For example, -COE and -C6 will both turn on UTF-8-ness on both
         STDOUT and STDERR. Repeating letters is just redundant, not
         cumulative nor toggling.

         The "io" options mean that any subsequent open() (or similar I/O
         operations) in main program scope will have the ":utf8" PerlIO
         layer implicitly applied to them, in other words, UTF-8 is expected
         from any input stream, and UTF-8 is produced to any output stream.
         This is just the default set via "${^OPEN}", with explicit layers
         in open() and with binmode() one can manipulate streams as usual.
         This has no effect on code run in modules.

         -C on its own (not followed by any number or option list), or the
         empty string "" for the "PERL_UNICODE" environment variable, has
         the same effect as -CSDL. In other words, the standard I/O handles
         and the default "open()" layer are UTF-8-fied *but* only if the
         locale environment variables indicate a UTF-8 locale. This
         behaviour follows the *implicit* (and problematic) UTF-8 behaviour
         of Perl 5.8.0. (See "UTF-8 no longer default under UTF-8 locales"
         in perl581delta.)

         You can use -C0 (or "0" for "PERL_UNICODE") to explicitly disable
         all the above Unicode features.

         The read-only magic variable "${^UNICODE}" reflects the numeric
         value of this setting. This variable is set during Perl startup and
         is thereafter read-only. If you want runtime effects, use the
         three-arg open() (see "open" in perlfunc), the two-arg binmode()
         (see "binmode" in perlfunc), and the "open" pragma (see open).

         (In Perls earlier than 5.8.1 the -C switch was a Win32-only switch
         that enabled the use of Unicode-aware "wide system call" Win32
         APIs. This feature was practically unused, however, and the command
         line switch was therefore "recycled".)

         Note: Since perl 5.10.1, if the -C option is used on the "#!" line,
         it must be specified on the command line as well, since the
         standard streams are already set up at this point in the execution
         of the perl interpreter. You can also use binmode() to set the
         encoding of an I/O stream.

    -c   causes Perl to check the syntax of the program and then exit
         without executing it. Actually, it *will* execute any "BEGIN",
         "UNITCHECK", or "CHECK" blocks and any "use" statements: these are
         considered as occurring outside the execution of your program.
         "INIT" and "END" blocks, however, will be skipped.

    -d
    -dt  runs the program under the Perl debugger. See perldebug. If t is
         specified, it indicates to the debugger that threads will be used
         in the code being debugged.
    -d:*MOD[=bar,baz]*
    -dt:*MOD[=bar,baz]*
         runs the program under the control of a debugging, profiling, or
         tracing module installed as "Devel::*MOD*". E.g., -d:DProf executes
         the program using the "Devel::DProf" profiler. As with the -M flag,
         options may be passed to the "Devel::*MOD*" package where they will
         be received and interpreted by the "Devel::*MOD*::import" routine.
         Again, like -M, use --d:-*MOD* to call "Devel::*MOD*::unimport"
         instead of import. The comma-separated list of options must follow
         a "=" character. If t is specified, it indicates to the debugger
         that threads will be used in the code being debugged. See
         perldebug.

    -D*letters*
    -D*number*
         sets debugging flags. This switch is enabled only if your perl
         binary has been built with debugging enabled: normal production
         perls won't have been.

         For example, to watch how perl executes your program, use -Dtls.
         Another nice value is -Dx, which lists your compiled syntax tree,
         and -Dr displays compiled regular expressions; the format of the
         output is explained in perldebguts.

         As an alternative, specify a number instead of list of letters
         (e.g., -D14 is equivalent to -Dtls):

                  1  p  Tokenizing and parsing (with v, displays parse
                        stack)
                  2  s  Stack snapshots (with v, displays all stacks)
                  4  l  Context (loop) stack processing
                  8  t  Trace execution
                 16  o  Method and overloading resolution
                 32  c  String/numeric conversions
                 64  P  Print profiling info, source file input state
                128  m  Memory and SV allocation
                256  f  Format processing
                512  r  Regular expression parsing and execution
               1024  x  Syntax tree dump
               2048  u  Tainting checks
               4096  U  Unofficial, User hacking (reserved for private,
                        unreleased use)
              16384  X  Scratchpad allocation
              32768  D  Cleaning up
              65536  S  Op slab allocation
             131072  T  Tokenizing
             262144  R  Include reference counts of dumped variables
                        (eg when using -Ds)
             524288  J  show s,t,P-debug (don't Jump over) on opcodes within
                        package DB
            1048576  v  Verbose: use in conjunction with other flags to
                        increase the verbosity of the output.  Is a no-op on
                        many of the other flags
            2097152  C  Copy On Write
            4194304  A  Consistency checks on internal structures
            8388608  q  quiet - currently only suppresses the "EXECUTING"
                        message
           16777216  M  trace smart match resolution
           33554432  B  dump suBroutine definitions, including special
                        Blocks like BEGIN
           67108864  L  trace Locale-related info; what gets output is very
                        subject to change
          134217728  i  trace PerlIO layer processing.  Set PERLIO_DEBUG to
                        the filename to trace to.
          268435456  y  trace y///, tr/// compilation and execution

         All these flags require -DDEBUGGING when you compile the Perl
         executable (but see ":opd" in Devel::Peek or "'debug' mode" in re
         which may change this). See the INSTALL file in the Perl source
         distribution for how to do this.

         If you're just trying to get a print out of each line of Perl code
         as it executes, the way that "sh -x" provides for shell scripts,
         you can't use Perl's -D switch. Instead do this

           # If you have "env" utility
           env PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program

           # Bourne shell syntax
           $ PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program

           # Csh syntax
           % (setenv PERLDB_OPTS "NonStop=1 AutoTrace=1 frame=2"; perl -dS program)

         See perldebug for details and variations.

    -e *commandline*
         may be used to enter one line of program. If -e is given, Perl will
         not look for a filename in the argument list. Multiple -e commands
         may be given to build up a multi-line script. Make sure to use
         semicolons where you would in a normal program.

    -E *commandline*
         behaves just like -e, except that it implicitly enables all
         optional features (in the main compilation unit). See feature.

    -f   Disable executing ${Config}{sitelib}/sitecustomize.pl at startup.

         Perl can be built so that it by default will try to execute
         ${Config}{sitelib}/sitecustomize.pl at startup (in a BEGIN block).
         This is a hook that allows the sysadmin to customize how Perl
         behaves. It can for instance be used to add entries to the @INC
         array to make Perl find modules in non-standard locations.

         Perl actually inserts the following code:

             BEGIN {
                 do { local $!; -f "${Config}{sitelib}/sitecustomize.pl"; }
                     && do "${Config}{sitelib}/sitecustomize.pl";
             }

         Since it is an actual "do" (not a "require"), sitecustomize.pl
         doesn't need to return a true value. The code is run in package
         "main", in its own lexical scope. However, if the script dies, ${@}
         will not be set.

         The value of ${Config}{sitelib} is also determined in C code and not
         read from "Config.pm", which is not loaded.

         The code is executed *very* early. For example, any changes made to
         @INC will show up in the output of 'perl -V'. Of course, "END"
         blocks will be likewise executed very late.

         To determine at runtime if this capability has been compiled in
         your perl, you can check the value of ${Config}{usesitecustomize}.

    -F*pattern*
         specifies the pattern to split on for "-a". The pattern may be
         surrounded by "//", "", or '', otherwise it will be put in single
         quotes. You can't use literal whitespace or NUL characters in the
         pattern.

         -F implicitly sets both "-a" and "-n".

    -h   prints a summary of the options.

    -i[*extension*]
         specifies that files processed by the "<>" construct are to be
         edited in-place. It does this by renaming the input file, opening
         the output file by the original name, and selecting that output
         file as the default for print() statements. The extension, if
         supplied, is used to modify the name of the old file to make a
         backup copy, following these rules:

         If no extension is supplied, and your system supports it, the
         original *file* is kept open without a name while the output is
         redirected to a new file with the original *filename*. When perl
         exits, cleanly or not, the original *file* is unlinked.

         If the extension doesn't contain a "*", then it is appended to the
         end of the current filename as a suffix. If the extension does
         contain one or more "*" characters, then each "*" is replaced with
         the current filename. In Perl terms, you could think of this as:

             (${backup} = ${extension}) =~ s/\*/${file_name}/g;

         This allows you to add a prefix to the backup file, instead of (or
         in addition to) a suffix:

          $ perl -pi'orig_*' -e 's/bar/baz/' fileA  # Backup to
                                                    # 'orig_fileA'

         Or even to place backup copies of the original files into another
         directory (provided the directory already exists):

          $ perl -pi'old/*.orig' -e 's/bar/baz/' fileA  # Backup to
                                                        # 'old/fileA.orig'

         These sets of one-liners are equivalent:

          $ perl -pi -e 's/bar/baz/' fileA          # Overwrite current file
          $ perl -pi'*' -e 's/bar/baz/' fileA       # Overwrite current file

          $ perl -pi'.orig' -e 's/bar/baz/' fileA   # Backup to 'fileA.orig'
          $ perl -pi'*.orig' -e 's/bar/baz/' fileA  # Backup to 'fileA.orig'

         From the shell, saying

             $ perl -p -i.orig -e "s/foo/bar/; ... "

         is the same as using the program:

             #!/usr/bin/perl -pi.orig
             s/foo/bar/;

         which is equivalent to

             #!/usr/bin/perl
             ${extension} = '.orig';
             LINE: while (<>) {
                 if (${ARGV} ne ${oldargv}) {
                     if (${extension} !~ /\*/) {
                         ${backup} = ${ARGV} . ${extension};
                     }
                     else {
                         (${backup} = ${extension}) =~ s/\*/${ARGV}/g;
                     }
                     rename(${ARGV}, ${backup});
                     open(ARGVOUT, ">${ARGV}");
                     select(ARGVOUT);
                     ${oldargv} = ${ARGV};
                 }
                 s/foo/bar/;
             }
             continue {
                 print;  # This prints to original filename
             }
             select(STDOUT);

         except that the -i form doesn't need to compare ${ARGV} to ${oldargv}
         to know when the filename has changed. It does, however, use
         ARGVOUT for the selected filehandle. Note that STDOUT is restored
         as the default output filehandle after the loop.

         As shown above, Perl creates the backup file whether or not any
         output is actually changed. So this is just a fancy way to copy
         files:

             $ perl -p -i'/some/file/path/*' -e 1 file1 file2 file3...
         or
             $ perl -p -i'.orig' -e 1 file1 file2 file3...

         You can use "eof" without parentheses to locate the end of each
         input file, in case you want to append to each file, or reset line
         numbering (see example in "eof" in perlfunc).

         If, for a given file, Perl is unable to create the backup file as
         specified in the extension then it will skip that file and continue
         on with the next one (if it exists).

         For a discussion of issues surrounding file permissions and -i, see
         "Why does Perl let me delete read-only files? Why does -i clobber
         protected files? Isn't this a bug in Perl?" in perlfaq5.

         You cannot use -i to create directories or to strip extensions from
         files.

         Perl does not expand "~" in filenames, which is good, since some
         folks use it for their backup files:

             $ perl -pi~ -e 's/foo/bar/' file1 file2 file3...

         Note that because -i renames or deletes the original file before
         creating a new file of the same name, Unix-style soft and hard
         links will not be preserved.

         Finally, the -i switch does not impede execution when no files are
         given on the command line. In this case, no backup is made (the
         original file cannot, of course, be determined) and processing
         proceeds from STDIN to STDOUT as might be expected.

    -I*directory*
         Directories specified by -I are prepended to the search path for
         modules (@INC).

    -l[*octnum*]
         enables automatic line-ending processing. It has two separate
         effects. First, it automatically chomps $/ (the input record
         separator) when used with "-n" or "-p". Second, it assigns $\ (the
         output record separator) to have the value of *octnum* so that any
         print statements will have that separator added back on. If
         *octnum* is omitted, sets $\ to the current value of $/. For
         instance, to trim lines to 80 columns:

             perl -lpe 'substr(${_}, 80) = ""'

         Note that the assignment "$\ = $/" is done when the switch is
         processed, so the input record separator can be different than the
         output record separator if the -l switch is followed by a -0
         switch:

             gnufind / -print0 | perl -ln0e 'print "found ${_}" if -p'

         This sets $\ to newline and then sets $/ to the null character.

    -m[-]*module*
    -M[-]*module*
    -M[-]*'module ...'*
    -[mM][-]*module=arg[,arg]...*
         -m*module* executes "use" *module* "();" before executing your
         program. This loads the module, but does not call its "import"
         method, so does not import subroutines and does not give effect to
         a pragma.

         -M*module* executes "use" *module* ";" before executing your
         program. This loads the module and calls its "import" method,
         causing the module to have its default effect, typically importing
         subroutines or giving effect to a pragma. You can use quotes to add
         extra code after the module name, e.g., '-M*MODULE* qw(foo bar)'.

         If the first character after the -M or -m is a dash (-) then the
         'use' is replaced with 'no'. This makes no difference for -m.

         A little builtin syntactic sugar means you can also say
         -m*MODULE*=foo,bar or -M*MODULE*=foo,bar as a shortcut for
         '-M*MODULE* qw(foo bar)'. This avoids the need to use quotes when
         importing symbols. The actual code generated by -M*MODULE*=foo,bar
         is "use module split(/,/,q{foo,bar})". Note that the "=" form
         removes the distinction between -m and -M; that is,
         -m*MODULE*=foo,bar is the same as -M*MODULE*=foo,bar.

         A consequence of the "split" formulation is that -M*MODULE*=number
         never does a version check, unless "*MODULE*::import()" itself is
         set up to do a version check, which could happen for example if
         *MODULE* inherits from Exporter.

    -n   causes Perl to assume the following loop around your program, which
         makes it iterate over filename arguments somewhat like *sed -n* or
         *awk*:

           LINE:
             while (<>) {
                 ...             # Your program goes here
             }

         Note that the lines are not printed by default. See "-p" to have
         lines printed. If a file named by an argument cannot be opened for
         some reason, Perl warns you about it and moves on to the next file.

         Also note that "<>" passes command line arguments to "open" in
         perlfunc, which doesn't necessarily interpret them as file names.
         See perlop for possible security implications.

         Here is an efficient way to delete all files that haven't been
         modified for at least a week:

             find . -mtime +7 -print | perl -nle unlink

         This is faster than using the -exec switch of *find* because you
         don't have to start a process on every filename found (but it's not
         faster than using the -delete switch available in newer versions of
         *find*. It does suffer from the bug of mishandling newlines in
         pathnames, which you can fix if you follow the example under -0.

         "BEGIN" and "END" blocks may be used to capture control before or
         after the implicit program loop, just as in *awk*.

    -p   causes Perl to assume the following loop around your program, which
         makes it iterate over filename arguments somewhat like *sed*:

           LINE:
             while (<>) {
                 ...             # Your program goes here
             } continue {
                 print or die "-p destination: $!\n";
             }

         If a file named by an argument cannot be opened for some reason,
         Perl warns you about it, and moves on to the next file. Note that
         the lines are printed automatically. An error occurring during
         printing is treated as fatal. To suppress printing use the "-n"
         switch. A -p overrides a -n switch.

         "BEGIN" and "END" blocks may be used to capture control before or
         after the implicit loop, just as in *awk*.

    -s   enables rudimentary switch parsing for switches on the command line
         after the program name but before any filename arguments (or before
         an argument of --). Any switch found there is removed from @ARGV
         and sets the corresponding variable in the Perl program. The
         following program prints "1" if the program is invoked with a -xyz
         switch, and "abc" if it is invoked with -xyz=abc.

             #!/usr/bin/perl -s
             if (${xyz}) { print "${xyz}\n" }

         Do note that a switch like --help creates the variable "${-help}",
         which is not compliant with "use strict "refs"". Also, when using
         this option on a script with warnings enabled you may get a lot of
         spurious "used only once" warnings.

    -S   makes Perl use the "PATH" environment variable to search for the
         program unless the name of the program contains path separators.

         On some platforms, this also makes Perl append suffixes to the
         filename while searching for it. For example, on Win32 platforms,
         the ".bat" and ".cmd" suffixes are appended if a lookup for the
         original name fails, and if the name does not already end in one of
         those suffixes. If your Perl was compiled with "DEBUGGING" turned
         on, using the -Dp switch to Perl shows how the search progresses.

         Typically this is used to emulate "#!" startup on platforms that
         don't support "#!". It's also convenient when debugging a script
         that uses "#!", and is thus normally found by the shell's ${PATH}
         search mechanism.

         This example works on many platforms that have a shell compatible
         with Bourne shell:

             #!/usr/bin/perl
             eval 'exec /usr/bin/perl -wS ${0} ${1+"${@}"}'
                     if ${running_under_some_shell};

         The system ignores the first line and feeds the program to /bin/sh,
         which proceeds to try to execute the Perl program as a shell
         script. The shell executes the second line as a normal shell
         command, and thus starts up the Perl interpreter. On some systems
         ${0} doesn't always contain the full pathname, so the "-S" tells Perl
         to search for the program if necessary. After Perl locates the
         program, it parses the lines and ignores them because the variable
         ${running_under_some_shell} is never true. If the program will be
         interpreted by csh, you will need to replace "${1+"${@}"}" with $*,
         even though that doesn't understand embedded spaces (and such) in
         the argument list. To start up *sh* rather than *csh*, some systems
         may have to replace the "#!" line with a line containing just a
         colon, which will be politely ignored by Perl. Other systems can't
         control that, and need a totally devious construct that will work
         under any of *csh*, *sh*, or Perl, such as the following:

                 eval '(exit ${?0})' && eval 'exec perl -wS ${0} ${1+"${@}"}'
                 & eval 'exec /usr/bin/perl -wS ${0} ${argv:q}'
                         if ${running_under_some_shell};

         If the filename supplied contains directory separators (and so is
         an absolute or relative pathname), and if that file is not found,
         platforms that append file extensions will do so and try to look
         for the file with those extensions added, one by one.

         On DOS-like platforms, if the program does not contain directory
         separators, it will first be searched for in the current directory
         before being searched for on the PATH. On Unix platforms, the
         program will be searched for strictly on the PATH.

    -t   Like "-T", but taint checks will issue warnings rather than fatal
         errors. These warnings can now be controlled normally with "no
         warnings qw(taint)".

         Note: This is not a substitute for "-T"! This is meant to be used
         *only* as a temporary development aid while securing legacy code:
         for real production code and for new secure code written from
         scratch, always use the real "-T".

    -T   turns on "taint" so you can test them. Ordinarily these checks are
         done only when running setuid or setgid. It's a good idea to turn
         them on explicitly for programs that run on behalf of someone else
         whom you might not necessarily trust, such as CGI programs or any
         internet servers you might write in Perl. See perlsec for details.
         For security reasons, this option must be seen by Perl quite early;
         usually this means it must appear early on the command line or in
         the "#!" line for systems which support that construct.

    -u   This switch causes Perl to dump core after compiling your program.
         You can then in theory take this core dump and turn it into an
         executable file by using the *undump* program (not supplied). This
         speeds startup at the expense of some disk space (which you can
         minimize by stripping the executable). (Still, a "hello world"
         executable comes out to about 200K on my machine.) If you want to
         execute a portion of your program before dumping, use the
         "CORE::dump()" function instead. Note: availability of *undump* is
         platform specific and may not be available for a specific port of
         Perl.

    -U   allows Perl to do unsafe operations. Currently the only "unsafe"
         operations are attempting to unlink directories while running as
         superuser and running setuid programs with fatal taint checks
         turned into warnings. Note that warnings must be enabled along with
         this option to actually *generate* the taint-check warnings.

    -v   prints the version and patchlevel of your perl executable.

    -V   prints summary of the major perl configuration values and the
         current values of @INC.

    -V:*configvar*
         Prints to STDOUT the value of the named configuration variable(s),
         with multiples when your "*configvar*" argument looks like a regex
         (has non-letters). For example:

             $ perl -V:libc
                 libc='/lib/libc-2.2.4.so';
             $ perl -V:lib.
                 libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
                 libc='/lib/libc-2.2.4.so';
             $ perl -V:lib.*
                 libpth='/usr/local/lib /lib /usr/lib';
                 libs='-lnsl -lgdbm -ldb -ldl -lm -lcrypt -lutil -lc';
                 lib_ext='.a';
                 libc='/lib/libc-2.2.4.so';
                 libperl='libperl.a';
                 ....

         Additionally, extra colons can be used to control formatting. A
         trailing colon suppresses the linefeed and terminator ";", allowing
         you to embed queries into shell commands. (mnemonic: PATH separator
         ":".)

             $ echo "compression-vars: " 'perl -V:z.*: ' " are here !"
             compression-vars:  zcat='' zip='zip'  are here !

         A leading colon removes the "name=" part of the response, this
         allows you to map to the name you need. (mnemonic: empty label)

             $ echo "goodvfork="'./perl -Ilib -V::usevfork'
             goodvfork=false;

         Leading and trailing colons can be used together if you need
         positional parameter values without the names. Note that in the
         case below, the "PERL_API" params are returned in alphabetical
         order.

             $ echo building_on 'perl -V::osname: -V::PERL_API_.*:' now
             building_on 'linux' '5' '1' '9' now

    -w   prints warnings about dubious constructs, such as variable names
         mentioned only once and scalar variables used before being set;
         redefined subroutines; references to undefined filehandles;
         filehandles opened read-only that you are attempting to write on;
         values used as a number that don't *look* like numbers; using an
         array as though it were a scalar; if your subroutines recurse more
         than 100 deep; and innumerable other things.

         This switch really just enables the global $^W variable; normally,
         the lexically scoped "use warnings" pragma is preferred. You can
         disable or promote into fatal errors specific warnings using
         "__WARN__" hooks, as described in perlvar and "warn" in perlfunc.
         See also perldiag and perltrap. A fine-grained warning facility is
         also available if you want to manipulate entire classes of
         warnings; see warnings.

    -W   Enables all warnings regardless of "no warnings" or $^W. See
         warnings.

    -X   Disables all warnings regardless of "use warnings" or $^W. See
         warnings.

         Forbidden in ""PERL5OPT"".

    -x
    -x*directory*
         tells Perl that the program is embedded in a larger chunk of
         unrelated text, such as in a mail message. Leading garbage will be
         discarded until the first line that starts with "#!" and contains
         the string "perl". Any meaningful switches on that line will be
         applied.

         All references to line numbers by the program (warnings, errors,
         ...) will treat the "#!" line as the first line. Thus a warning on
         the 2nd line of the program, which is on the 100th line in the file
         will be reported as line 2, not as line 100. This can be overridden
         by using the "#line" directive. (See "Plain Old Comments (Not!)" in
         perlsyn)

         If a directory name is specified, Perl will switch to that
         directory before running the program. The -x switch controls only
         the disposal of leading garbage. The program must be terminated
         with "__END__" if there is trailing garbage to be ignored; the
         program can process any or all of the trailing garbage via the
         "DATA" filehandle if desired.

         The directory, if specified, must appear immediately following the
         -x with no intervening whitespace.
tip_perl_EOF_2
