#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"
WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SELECT.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last
 
# Vars
_ALL=false
_HIST_LINES=48
_SEARCHTERM=''

# Functions
print_hist () {
	local HDR=''
	local LINE=''
	local -a LIST=()
	local NDX=0

	msg_box -x1 -y1 "<w>Collecting history...<N>"

	while read LINE;do
		if [[ ${_ALL} == 'false' ]];then
			((NDX++))
			[[ ${NDX} -gt ${_HIST_LINES} ]] && break
		fi
		LIST+=${LINE}
	done

	msg_box_clear

	if [[ -n ${_SEARCHTERM} ]];then
		HDR="<c>History containing<N>: \"${_SEARCHTERM}\""
	elif [[ ${_ALL} == 'true' ]];then
		HDR="<c>All History<N> (<w>${#LIST} lines<N>)"
	else
		HDR="<c>Last ${_HIST_LINES} Lines of History<N>"
	fi

	sel_set_list ${LIST}

	sel_list -O${MAGENTA_FG} -sn -d'#' -H${HDR} -F"Selected command will be copied to the clipboard" -M"Use keypad for extended page navigation" -C
	if [[ -n ${_SEL_VAL} ]];then
		cut -d'#' -f2 <<<${_SEL_VAL} | xclip -i -selection clipboard
		msg_box "Command was copied to clipboard"
	fi
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Display command line history
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [SEARCHTERM]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-a${RESET} all history lines"
	echo -e "${WHITE_FG}-l${RESET} history lines (default: ${_HIST_LINES}) (SEARCHTERM overrides)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

OPTSTR=":HDl:a"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
	  a) _ALL=true;;
	  l) _HIST_LINES=${OPTARG};;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup
[[ -n ${1} ]] && _SEARCHTERM=${1}

fc -R

while read DATE TM CMD;do
	[[ -n ${_SEARCHTERM} && ! ${CMD} =~ ${_SEARCHTERM} ]] && continue
	D="${DATE} ${TM}"
	U=$(date -d ${D} +%s)
	echo "${U}#${D}#${CMD}"
done < <(fc -nrli 1 100000) | sort -t'#' -k3 -u | sort -t'#' -k1 -r | cut -d'#' -f2,3 | print_hist

exit_leave
