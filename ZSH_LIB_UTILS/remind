#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Constants
_REMINDERS=~/.reminder

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Post a reminder
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
		r) echo "<REMINDER_TEXT>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type r)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-d${RESET} delete current reminder"
	echo -e "${WHITE_FG}-e${RESET} edit reminder file"
	echo -e "${WHITE_FG}-w${RESET} display until keypress"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HDdew"
OPTIND=0

DELETE_REMINDER=false
EDIT_REMINDER=false
WAIT=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     d) DELETE_REMINDER=true;;
     e) EDIT_REMINDER=true;;
     w) WAIT=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
if [[ -n ${@} ]];then
	[[ ${#OPTIONS} -ne 0 ]] && usage "Conflicting option"
	echo "${(C)@}" >> ${_REMINDERS}
	exit_leave $(msg_exit W "Reminder added")
fi

if [[ ! -e ${_REMINDERS} ]];then
	exit_leave $(msg_exit W "No reminders found")
fi

if [[ ${EDIT_REMINDER} == 'true' ]];then
	if [[ -e ${_REMINDERS} ]];then
		/bin/vim ${_REMINDERS}
		exit_leave
	fi
fi

if [[ ${DELETE_REMINDER} == 'true' ]];then
	if [[ -e ${_REMINDERS} ]];then
		CNT=$(wc -l < ${_REMINDERS})
		/bin/rm -f ${_REMINDERS}
		exit_leave $(msg_exit W "$(str_pluralize reminder ${CNT} true) deleted")
	fi
fi

do_smcup

[[ ${WAIT} == 'false' ]] && OPT='-t2' || OPT='-p'

MSGS=("${(f)$(cat ${_REMINDERS})}")
msg_box -H1 ${OPT} "<g><U>Reminder<N>||<w>$(msg_list ${MSGS})<N>"

exit_leave

