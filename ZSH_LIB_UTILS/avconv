#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -a _VID_EXT=(mov avi mkv mp4 webm)
typeset -a _AUD_EXT=(mp3 flac wav m4a)

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Convert audio and video files to different formats
\tbased on file extension
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		e) echo "<EXTENSION>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f) $(opt_type e)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
# Execution
[[ -z ${1} ]] && usage "missing argument:$(opt_type f)" || FN=${1}
[[ -z ${2} ]] && usage "missing argument:$(opt_type e)" || EXT=${2}

[[ ! -e ${FN} ]] && exit_leave $(msg_exit E "file not found:${1}")

FN_EXT=${FN:e}

# Capture file extension if complete file name was entered
for E in ${_VID_EXT};do
	if [[ ${EXT} == ${E} ]];then
		break
	elif [[ ${EXT:e} == ${E} ]];then
		EXT=${EXT:e}
		echo "Captured extension:${WHITE_FG}${EXT}${RESET}"
		break
	fi
done

FTYPE=false
[[ ${_VID_EXT[(i)${FN_EXT}]} -le ${#_VID_EXT} ]] && FTYPE=video
[[ ${_AUD_EXT[(i)${FN_EXT}]} -le ${#_AUD_EXT} ]] && FTYPE=audio
[[ ${FTYPE} == 'false' ]] && exit_leave $(msg_exit E "unsupported file type:${FN:e}")

ETYPE=false
[[ ${_VID_EXT[(i)${EXT}]} -le ${#_VID_EXT} ]] && ETYPE=video
[[ ${_AUD_EXT[(i)${EXT}]} -le ${#_AUD_EXT} ]] && ETYPE=audio
[[ ${ETYPE} == 'false' ]] && exit_leave $(msg_exit E "unsupported extension:${EXT}")

[[ ${FTYPE} != ${ETYPE} ]] && exit_leave $(msg_exit E "${WHITE_FG}${FTYPE}${RESET}${ITALIC} not convertable to${RESET} ${WHITE_FG}${ETYPE}${RESET}")

[[ ${FTYPE} == 'video' && ! $(file -i ${FN}) =~ 'video' ]] && exit_leave $(msg_exit E "not a video file:${FN}")
[[ ${FTYPE} == 'audio' && ! $(file -i ${FN}) =~ 'audio' ]] && exit_leave $(msg_exit E "not an audio file:${FN}")

echo "Processing ${FTYPE} file:${FN}"

ffmpeg -y -i ${FN} ${FN:r}.${EXT}

exit_leave
