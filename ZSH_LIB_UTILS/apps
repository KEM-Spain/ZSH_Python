#!/usr/bin/zsh
REVERSE="\033[7m"
RESET="\033[m"
BOLD="\033[1m"
BLACK_FG="\033[30m"
RED_FG="\033[1;31m"
GREEN_FG="\033[1;32m"
YELLOW_FG="\033[1;33m"
BLUE_FG="\033[1;34m"
MAGENTA_FG="\033[1;35m"
CYAN_FG="\033[1;36m"
WHITE_FG="\033[1;37m"

STRIKE="\033[9m"
ITALIC="\033[3m"
UNDER="\033[4m"

E_REVERSE=$(echo "\033[7m")
E_RESET=$(echo "\033[m")
E_BOLD=$(echo "\033[1m")
E_BLACK_FG=$(echo "\033[30m")
E_RED_FG=$(echo "\033[31m")
E_GREEN_FG=$(echo "\033[32m")
E_YELLOW_FG=$(echo "\033[33m")
E_BLUE_FG=$(echo "\033[34m")
E_MAGENTA_FG=$(echo "\033[35m")
E_CYAN_FG=$(echo "\033[36m")
E_WHITE_FG=$(echo "\033[37m")
E_STRIKE=$(echo "\033[9m")

# Constants
[[ -e /usr/bin/flatpak ]] && _FLATPAK_INSTALLED=true || _FLATPAK_INSTALLED=false
[[ -e /usr/bin/snap ]] && _SNAP_INSTALLED=true || _SNAP_INSTALLED=false
_HDR_BAR=$'\u2501' # Header character
_LAST_APT_UPD=~/.last_apt_upd
_LIB_DIR=/usr/local/lib
_SOURCES=/etc/apt/sources.list.d

# Imports
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Declarations
typeset -A _LONGEST=(DESC 0 NAME 0 STATE 0)
typeset -a _LOCAL_LIST
typeset -a _MARKED

# Globals
g_INFO_OPTION=false
g_INSTALL_OPTION=false
g_PURGE_OPTION=false
g_UNINSTALL_OPTION=false
g_MAX_DESC_LEN=55

# Functions
action_do () {
	local _MARKED=${1}
	local PKG RC 
	local PKG_NAME 
	local PKG_STATE 
	local UPD_PKG_LIST

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ARGS:${@}"

 # Initialize
	PKG=${_LIST[${_MARKED}]}
	PKG_NAME=$(get_package_name ${PKG})
	PKG_STATE=$(get_package_state ${PKG})
	UPD_PKG_LIST=true

	msg_box_clear

	if [[ ${g_INFO_OPTION} == 'true' || ${PKG_STATE:l} =~ "^[sf].*" ]];then
		msg_box -x10 "Retrieving info..."
		if [[ ${PKG_STATE:l} == "snap" && ${_SNAP_INSTALLED} == 'true' ]];then
			UPD_PKG_LIST=false
			msg_stream "snap info ${PKG_NAME} 2>/dev/null | tr -s '[:space:]'"
		elif [[ ${PKG_STATE:l} == "flatpak" && ${_FLATPAK_INSTALLED} == 'true'  ]];then 
			UPD_PKG_LIST=false
			msg_stream "flatpak info ${PKG_NAME} 2>/dev/null"
		else
			msg_stream "aptitude show ${PKG_NAME} 2>/dev/null"
		fi
	fi

	if [[ ${g_INFO_OPTION} == 'true' && ${PKG_STATE:l} =~ "^uninstalled*" ]];then
		msg_box -p -PI "Package: ${PKG_NAME}" # Option to install after view
		[[ ${_MSG_KEY} == 'y' ]] && g_INSTALL_OPTION=true
	fi

	if [[ ${g_UNINSTALL_OPTION} == 'true' && ${PKG_STATE:l} =~ "^installed*" ]];then
		msg_box "Uninstalling ${PKG_NAME}..."
		msg_stream "sudo apt-get -y remove ${PKG_NAME} 2>&1"
	elif [[ ${g_INSTALL_OPTION} == 'true' && ${PKG_STATE:l} =~ "^uninstalled*" ]];then
		msg_box "Installing ${PKG_NAME}..."
		msg_stream "sudo apt-get -y install ${PKG_NAME} 2>&1"
	elif [[ ${g_PURGE_OPTION} == 'true' && ${PKG_STATE:l} =~ "^config*" ]];then
		msg_box "Purging config for ${PKG_NAME}..."
		msg_stream "sudo apt-get -y purge ${PKG_NAME} 2>&1"
	else
		UPD_PKG_LIST=false
	fi

	[[ ${UPD_PKG_LIST} == 'true' ]] && upd_package_list ${PKG_NAME} ${_MARKED}

	list_set_selected ${_MARKED} 0
}

action_warn () {
	local _MARKED=${1}
	local PKG_NAME
	local PKG_STATE
	local MSG PROMPT
	local ITEM
	local RC=0

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ARGS:${@}" 

	ITEM=${_LIST[${_MARKED}]}
	PKG_NAME=$(get_package_name ${ITEM})
	PKG_STATE=$(get_package_state ${ITEM})

	g_INSTALL_OPTION=false
	g_INFO_OPTION=false
	g_PURGE_OPTION=false
	g_UNINSTALL_OPTION=false
	g_INFO_OPTION=false

	if [[ ${PKG_STATE:l} =~ "^installed*" ]];then
		MSG='uninstalled'
		PROMPT='(u)ninstall or (v)iew Info'
	elif [[ ${PKG_STATE:l} =~ "^uninstalled*" ]];then
		MSG='installed'
		PROMPT='(i)nstall or (v)iew Info'
	elif [[ ${PKG_STATE:l} =~ "^config*" ]];then
		MSG='purged'
		PROMPT='(P)urge or (V)iew Info'
	elif [[ ${PKG_STATE:l} =~ "^snap*" ]];then
		MSG='queried for info'
		PROMPT='(v)iew Info'
	elif [[ ${PKG_STATE:l} =~ "^flat*" ]];then
		MSG='queried for info'
		PROMPT='(v)iew Info'
	else
		MSG=''
		PROMPT=''
	fi

	if [[ -z ${MSG} ]];then
		msg_box -p -PK "No action available for:${PKG_STATE}"
	else
		msg_box -H1 -p -P"${PROMPT} for package" "<w><I>Pending Action<N>| |<B>${PKG_NAME}<N>|can be|<I>${MSG}<N>"
	fi

	case ${_MSG_KEY} in 
		n) RC=1;;
		i) g_INSTALL_OPTION=true;;
		p) g_PURGE_OPTION=true;;
		u) g_UNINSTALL_OPTION=true;;
		v) g_INFO_OPTION=true;;
	esac

	list_set_selected ${_MARKED} 0

	return ${RC}
}

upd_package_list () {
	local PACKAGE=${1}
	local PKG_NDX=${2}
	local -a RAWLIST

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} PACKAGE:${PACKAGE}, PKG_NDX:${PKG_NDX}"

	RAWLIST=("${(@f)$(aptitude search ${PACKAGE} -F '%c|%p|%d' 2>&1| grep "|${PACKAGE}|")}")

	[[ -z ${#RAWLIST} ]] && msg_box -p -PK "${RED_FG}WARNING${RESET}:Query returned no items"
	[[ ${#RAWLIST} -ne 1 ]] && msg_box -p -PK "${RED_FG}WARNING${RESET}:Query returned more than 1 item. Using first item"

	_LOCAL_LIST[${PKG_NDX}]=${RAWLIST[1]}
}

set_package_list () {
	local -a PATTERN=($1)
	local -a RAWLIST
	local APP
	local APP_FPAK
	local APP_NAME
	local DESC
	local F L R S
	local FLATLIST
	local MATCH MBEGIN MEND
	local NDX
	local PKG_STATE
	local P_DESC
	local P_NAME
	local SHOW_FLAT
	local SHOW_SNAP
	local SNAPLIST
	local -A LONGEST

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ARGS:${@}"
	
	_LOCAL_LIST=()
	_MARKED=()

 # Handle non distribution list
	if [[ ${SHOW_NOND} == "true" ]];then
		local PKGS=()
		local ARGLIST=()
		local NDX=0

		# DISTRIBUTION PACKAGES: A list of original packages is kept in: /usr/local/etc/orig_installed 
		# INSTALLED PACKAGES: <(aptitude search '~i !~M' -F '%p' | sed "s/ *$//" | sort -u) 
		# Comm column1 produces a list of items not in both sets

		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ARGS:${@}"

		tput cup 0 0; echo -n "Retrieving packages..."
		PKGS=$(comm -23 <(aptitude search '~i !~M' -F '%p' | sed "s/ *$//" | sort -u) <(grep --color=never " installed" /usr/local/etc/orig_installed | cut -d' ' -f5 | cut -d':' -f1 | sort -u))
		tput cup 1 0; echo "${#PKGS} total packages found..."

		PKGS=(${=PKGS})

		# Pass each list item to aptitude to optain package description info
		tput cup 2 0; echo -n "Building aptitude query..."
		NDX=0
		for P in ${PKGS};do
			((NDX++))
			ARGLIST+="~n^${P}$"
		done

		tput cup 3 0; echo -n "Executing aptitude query for ${#ARGLIST} packages..."
		msg_box "Building list of ${#ARGLIST} packages added or modified since OS was installed...please wait"
		_LOCAL_LIST=("${(f)$(aptitude search "${=ARGLIST}" -F '%c|%p|%d' | grep -v i386)}")

		for L in ${_LOCAL_LIST};do
			((NDX++))
			tput cup 6 0; printf "\rProcessing line ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} lines ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#__LOCAL_LIST} $(( NDX * 100. / ${#_LOCAL_LIST} ))
			P_NAME=$(echo ${L} | cut -d'|' -f2)
			P_DESC=$(echo ${L} | cut -d'|' -f3)
			[[ ${#P_NAME} -ge ${LONGEST[NAME]} ]] && LONGEST[NAME]=${#P_NAME}
			[[ ${#P_DESC} -ge ${LONGEST[DESC]} ]] && LONGEST[DESC]=${#P_DESC}
		done
		((LONGEST[NAME]+=2))
		[[ ${LONGEST[DESC]} -ge ${g_MAX_DESC_LEN} ]] && LONGEST[DESC]=$((g_MAX_DESC_LEN+=2)) || ((LONGEST[DESC]+=2))
		return
	fi

	# Retrieve data from aptitude
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} aptitude search ${PATTERN}"

	msg_box -x10 "Retrieving data from aptitude..."

	if [[ ${MATCH_DESC} == "true" ]];then
		RAWLIST=("${(@f)$(aptitude search ${PATTERN} -F '%c|%p|%d' | grep -i ${SEARCHTERM})}")
	else
		RAWLIST=("${(@f)$(aptitude search ${PATTERN} -F '%c|%p|%d')}")
	fi

	if [[ ${_DEBUG} -gt 1 ]];then
		dbg $(
		echo "\naptitude returned ${#RAWLIST} rows"
		for R in ${RAWLIST};do
			echo "${WHITE_FG}${R}${RESET}"
		done
		)
	fi
	
	if [[ ${SKIP_SNAPFLAT} == 'false' ]];then
		# Snap and flatpak support
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Adding packages from snap and flatpak..."

		if [[ ${SHOW_ALL_PKGS} == "true" || ${SHOW_INST} == "true" ]];then
			if [[ ${_SNAP_INSTALLED} == 'true' ]];then
				msg_box -x10 "Retrieving data from snap and flatpak..."
				SHOW_SNAP=true
				SNAPLIST=("${(f)$(snap list | tail +2)}")

				[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} snap returned ${#SNAPLIST} rows"

				for S in ${SNAPLIST};do
					APP=$(echo ${S} | tr -s '[:space:]' | cut -d' ' -f1)
					DESC=$(snap info ${APP} | grep -i summary: | sed -e 's/summary://g' -e 's/^[ \t]*//g')
					[[ ${APP} =~ ${SEARCHTERM} || -z ${SEARCHTERM} ]] && RAWLIST+="s|${APP}|${DESC}"
				done
			fi
		
			if [[ ${_FLATPAK_INSTALLED} == 'true' ]];then
				SHOW_FLAT=true
				( FLATLIST=("${(f)$(flatpak list | tail +1)}") ) 2>/dev/null # Flatpak warnings supressed

				[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} flatpak returned ${#FLATLIST} rows"

				for F in ${FLATLIST};do
					APP_NAME=$(echo ${F} | tr -s '[:space:]' | cut -f1)
					APP_FPAK=$(echo ${F} | tr -s '[:space:]' | cut -f2)
					[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} (flatpak) APP:${APP}"
					DESC=$(flatpak info ${APP_FPAK} | grep -i subject: | sed -e 's/subject://gi' -e 's/^[ \t]*//g')
					[[ ${APP_NAME} =~ ${SEARCHTERM} || -z ${SEARCHTERM} ]] && RAWLIST+="f|${APP_NAME}|${DESC}"
				done
			fi
		fi
	fi

	typeset -F ROWTIME=$(echo ${#RAWLIST}/9000 | bc -l)

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} row count < 10000"

	if [[ ${#RAWLIST} -ge 10000 ]];then
		msg_box -p -PP "${BOLD}${#RAWLIST} is a lot of rows.${RESET} This could take $(printf "%.2f" ${ROWTIME}) minutes. HINT:add a search term to limit rows"
		if [[ ${_MSG_KEY} != 'y' ]];then
			exit_leave $(msg_exit I "Operation cancelled")
		fi
	fi

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Processing RAWLIST"

	NDX=0
	for L in ${RAWLIST};do
		((NDX++))

		tput cup 0 0; printf "\rProcessing line ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} lines ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#RAWLIST} $(( NDX * 100. / ${#RAWLIST} ))

		P_NAME=$(echo ${L} | cut -d'|' -f2)
		P_DESC=$(echo ${L} | cut -d'|' -f3)
		[[ ${#P_NAME} -ge ${_LONGEST[NAME]} ]] && _LONGEST[NAME]=${#P_NAME}
		[[ ${#P_DESC} -ge ${_LONGEST[DESC]} ]] && _LONGEST[DESC]=${#P_DESC}
		if [[ ${MATCH_DESC} == "true" ]];then
			if [[ ${FUZZY} == "false" ]];then
				[[ ${L:l} =~ "^${SEARCHTERM:l}" ]] && _LOCAL_LIST+=${L}
			else
				[[ ${L:l} =~ "${SEARCHTERM:l}" ]] && _LOCAL_LIST+=${L}
			fi
		else
			case ${L[1,1]} in
				s) [[ ${SHOW_SNAP} == "true" ]] && _LOCAL_LIST+=${L};;
				f) [[ ${SHOW_FLAT} == "true" ]] && _LOCAL_LIST+=${L};;
				c) [[ ${SHOW_CONF} == "true" ]] && _LOCAL_LIST+=${L};;
				i) [[ ${SHOW_INST} == "true" ]] && _LOCAL_LIST+=${L};;
				p) [[ ${SHOW_UNIN} == "true" || ${SHOW_UNIN_RECOM} == "true" ]] && _LOCAL_LIST+=${L};;
				v) [[ ${SHOW_VIRT} == "true" ]] && _LOCAL_LIST+=${L};;
			esac
		fi
	done

	((_LONGEST[NAME]+=2))
	[[ ${_LONGEST[DESC]} -ge ${g_MAX_DESC_LEN} ]] && _LONGEST[DESC]=$((g_MAX_DESC_LEN+=2)) || ((_LONGEST[DESC]+=2))
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} LIST COUNT:${#_LOCAL_LIST}"
}

get_package_state () {
	local P=${1}
	local PKG_STATE

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} ARGS:${@}"

	case ${P[1,1]:l} in
		p*) PKG_STATE=Uninstalled;;
		c*) PKG_STATE=Config;;
		i*) PKG_STATE=Installed;;
		v*) PKG_STATE=Virtual;;
		s*) PKG_STATE=Snap;;
		f*) PKG_STATE=Flatpak;;
		*) PKG_STATE=Undefined; dbg "${0}:${LINENO} Undefined:${P:l} waiting..."
	esac
	echo ${PKG_STATE}
}

get_package_name () {
	local ITEM=${1}

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} ARGS:${@}"

	echo ${ITEM} | cut -d'|' -f2
}

get_package_desc () {
	local ITEM=${1}

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} ARGS:${@}"

	ITEM=$(echo ${ITEM} | cut -d'|' -f3)
	echo ${ITEM[1,${g_MAX_DESC_LEN}]}
}

set_state_color () {
	local STATE=${@}

	[[ ${_DEBUG} -gt 1 ]] && dbg "${0}:${LINENO} ARGS:${@}"

	if [[ ${STATE:l} =~ "^installed*" ]];then
		echo ${GREEN_FG}
	elif [[ ${STATE:l} =~ "^uninstalled*" ]];then
		echo ${RED_FG}${STRIKE}
	elif [[ ${STATE:l} =~ "^config*" ]];then
		echo ${ITALIC}${MAGENTA_FG}
	elif [[ ${STATE:l} =~ "^virtual*" ]];then
		echo ${CYAN_FG}
	elif [[ ${STATE:l} =~ "^snap*" ]];then
		echo "${ITALIC}${GREEN_FG}"
	elif [[ ${STATE:l} =~ "^flatpak*" ]];then
		echo "${ITALIC}${GREEN_FG}"
	else
		echo ${WHITE_FG}
	fi
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Display apps installed or uninstalled
\tSupply either an option, a <SEARCHTERM>, or both
\t<SEARCHTERM> matches leading characters unless overridden (-z)
\tIf no arguments or options are supplied, all apps are displayed
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "${WHITE_FG}Usage${RESET}:${_SCRIPT} ${WHITE_FG}[${RESET}${OPTSTR}${WHITE_FG}]${RESET} ${WHITE_FG}[${RESET}PATTERN${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} DEBUG"
	echo -e "${WHITE_FG}-3${RESET} show i386 packages"
	echo -e "${WHITE_FG}-c${RESET} show only config-present (uninstalled)"
	echo -e "${WHITE_FG}-d${RESET} include package description in search"
	echo -e "${WHITE_FG}-i${RESET} show only installed"
	echo -e "${WHITE_FG}-p${RESET} print output to terminal"
	echo -e "${WHITE_FG}-n${RESET} show only packages not part of original OS distribution"
	echo -e "${WHITE_FG}-r${RESET} show only uninstalled and limit to recommended packages"
	echo -e "${WHITE_FG}-s${RESET} skip snap and flatpak"
	echo -e "${WHITE_FG}-u${RESET} show only uninstalled"
	echo -e "${WHITE_FG}-v${RESET} show only installed virtual (ignores architecture)"
	echo -e "${WHITE_FG}-z${RESET} fuzzy match (default is leading match)"
	echo -e "${WHITE_FG}\nDesc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HD3cdpinrsuvz"
OPTIND=0

SHOW_ALL_PKGS=true
SHOW_INST=false
SHOW_UNIN=false
SHOW_UNIN_RECOM=false
SHOW_VIRT=false
SHOW_CONF=false
SHOW_NOND=false
SKIP_SNAPFLAT=false
PRINT=false
MATCH_DESC=false
PATTERN=?
I386=false
FUZZY=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     3) I386=true;;
     c) SHOW_ALL_PKGS=false;SHOW_CONF=true;;
     d) MATCH_DESC=true;;
     p) PRINT=true;;
     i) SHOW_ALL_PKGS=false;SHOW_INST=true;;
     n) SHOW_ALL_PKGS=false;SHOW_NOND=true;;
     r) SHOW_ALL_PKGS=false;SHOW_UNIN_RECOM=true;;
     s) SKIP_SNAPFLAT=true;;
     u) SHOW_ALL_PKGS=false;SHOW_UNIN=true;;
     v) SHOW_ALL_PKGS=false;SHOW_VIRT=true;;
     z) FUZZY=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
 
# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

# Handle exact matches/set SEARCHTERM
if [[ -n ${1} ]];then
	SEARCHTERM=${1}
	[[ ${FUZZY} == "false" ]] && ARG_PATTERN="^${1}" || ARG_PATTERN="${1}"
fi

# Show all as default?
if [[ ${SHOW_ALL_PKGS} == "true" ]];then
	SHOW_INST=true
	SHOW_UNIN=true
	SHOW_CONF=true
fi

# Handle architecture
[[ ${I386} == "true" ]] && ARCH_PATTERN="(?architecture(i386) | ?architecture(all))" || ARCH_PATTERN="(?architecture(amd64) | ?architecture(all))"

# Set filter pattern
if [[ ${SHOW_ALL_PKGS} == "true" ]];then
	FILTER_PATTERN=''
elif [[ ${SHOW_CONF} == "true" ]];then
	FILTER_PATTERN="~c" 
elif [[ ${SHOW_INST} == "true" ]];then
	FILTER_PATTERN="~i" 
elif [[ ${SHOW_UNIN} == "true" ]];then
	FILTER_PATTERN="?not(?installed)" 
elif [[ ${SHOW_UNIN_RECOM} == "true" ]];then
	FILTER_PATTERN="~RBrecommends:~i"
elif [[ ${SHOW_VIRT} == "true" ]];then
	FILTER_PATTERN="~Rprovides:~i ~v" 
	ARCH_PATTERN=''
fi

[[ ${MATCH_DESC} == "true" ]] && ARG_PATTERN='' # SEARCHTERM handles match
PATTERN=${ARCH_PATTERN}' '${FILTER_PATTERN}' '${ARG_PATTERN}

# Newly added ppa's?
DO_APT_UPDATE=false

if [[ -e ${_LAST_APT_UPD} ]];then
	MODIFIED=$(stat -c '%Y' ${_SOURCES})
	LAU=$(<${_LAST_APT_UPD})
	DIFF=$(( MODIFIED - LAU ))
	if [[ ${DIFF} -ne 0 ]];then
		DO_APT_UPDATE=true
	fi
else
	DO_APT_UPDATE=true
fi

if [[ ${DO_APT_UPDATE} == true ]];then
	msg_box "Updating sources - please wait..."
	sudo apt-get update > /dev/null 2>&1
	stat -c '%Y' ${_SOURCES} >${_LAST_APT_UPD}
fi

[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} PATTERN:${PATTERN}"

# Get data
set_package_list ${PATTERN}
[[ -z ${_LOCAL_LIST} ]] && exit_leave $(msg_exit W "No package:${SEARCHTERM} found...")

if [[ ${PRINT} == 'true' ]];then
	[[ ${_SMCUP} == 'true' ]] && do_rmcup
	for L in ${_LOCAL_LIST};do
		echo ${L}
	done
	exit_leave
fi

# Set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize package ${#_LIST})  Filter:${WHITE_FG}%s${RESET}  Fuzzy match:${WHITE_FG}%s${RESET}  Desc match:${WHITE_FG}%s${RESET}  ${_PG}" ${#_LIST} "${PATTERN}" ${FUZZY} ${MATCH_DESC}'
list_set_header 'printf " "'
list_set_header 'printf "%6s${CYAN_FG}%-12s %-*s %-*s${RESET}" "" "State" ${_LONGEST[NAME]} "Name" ${_LONGEST[DESC]} "Description"'
list_set_header 'printf "%6s${WHITE_FG}%-12s %-*s %-*s${RESET}" "" "$(str_unicode_line 12)" ${_LONGEST[NAME]} "$(str_unicode_line ${_LONGEST[NAME]})" ${_LONGEST[DESC]}  "$(str_unicode_line ${_LONGEST[DESC]})"'

# Set line item
list_set_line_item ' 
local PKG_STATE=$(get_package_state ${_LIST[${_LIST_NDX}]});
local PKG_NAME=$(get_package_name ${_LIST[${_LIST_NDX}]});
local PKG_DESC=$(get_package_desc ${_LIST[${_LIST_NDX}]});
local ST_COLOR=$(set_state_color ${PKG_STATE});
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}${ST_COLOR}%-12s${RESET}${BOLD}${SHADE}${BAR} %-*s${RESET}${SHADE}${BAR} %-.*s${RESET}\n" ${_LIST_NDX} ${PKG_STATE} ${_LONGEST[NAME]} ${PKG_NAME} ${_LONGEST[DESC]} ${PKG_DESC}
'
list_set_action_msgs 'install-uninstall app / view app info:'  app
list_user_prompt_style msg_box
list_set_no_top_offset # Place the first detail line immediately after heading
list_set_barlines true

while true;do
	# Get selection
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break

	# Get selections
	_MARKED=($(list_get_selected))

	if [[ $(list_get_selected_count) -ne 0 ]];then
		list_set_page_hold
		for M in ${_MARKED};do
			action_warn ${M}
			[[ ${?} -eq 0 ]] && action_do ${M} ${_MSG_KEY}
		done
	fi
done

exit_leave
