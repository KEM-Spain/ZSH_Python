#!/usr/bin/zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
BOLD="\033[1m"

# Declarations
LIB=/usr/local/lib
typeset -A _SESSION_DATA=()
typeset -a _DB_LIST
typeset -a _TB_LIST

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SEL_LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Globals
g_DEPTH=1

# Functions
query () {
	local SQL=(${@})

sqlite3 -separator ${_SESSION_DATA[DELIM]} ${_SESSION_DATA[DB]} <<____END_SQL
.headers on
${SQL}
____END_SQL

	return ${?}
}

set_tabs () {
sqlite3 -separator ${_SESSION_DATA[DELIM]} ${_SESSION_DATA[DB]} <<____END_SQL
.tables
____END_SQL
}

get_schema () {
sqlite3 -separator ${_SESSION_DATA[DELIM]} ${_SESSION_DATA[DB]} <<____END_SQL
.schema ${_SESSION_DATA[TAB]}
____END_SQL
}

dump_tab () {
sqlite3 -separator ${_SESSION_DATA[DELIM]} ${_SESSION_DATA[DB]} <<____END_SQL
select * from ${_SESSION_DATA[TAB]}
____END_SQL
}

set_db_list () {
	local -a LIST
	local L

	msg_box -x12 "Searching ${g_DEPTH} $(str_pluralize level ${g_DEPTH}) deep for databases..."

	_DB_LIST=()
	LIST=("${(f)$(find $(realpath .) -maxdepth ${g_DEPTH} -type f 2>/dev/null)}")

	for L in ${LIST};do
		[[ $(file ${L} 2>/dev/null) =~ "SQLite" ]] && _DB_LIST+=${L}
	done

	if ! arr_is_populated "${_DB_LIST}";then
		exit_leave $(msg_exit W "No databases found")
	fi
}

select_db () {
	if set_db_list;then
		sel_list_set ${(o)_DB_LIST}
		sel_list "<w>Select database or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave
		_SESSION_DATA[DB]=${_SEL_VAL}
	fi
	msg_box_clear
}

select_tab () {
	if arr_is_populated "${_TB_LIST}";then
		sel_list_set ${(o)_TB_LIST}
		sel_list "<w>Select table or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave
		_SESSION_DATA[TAB]=${_SEL_VAL}
	fi
	msg_box_clear
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}

read -r -d '' DESC<<EOF
Perform sqlite3 SQL query
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DELIM>";;
		b) echo "<DATABASE>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
		q) echo "<SQL_QUERY>";;
	esac
}

usage () {
	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})
	echo -e "\n${WHITE_FG}Usage${RESET}: ${SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type b) $(opt_type q)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-d $(opt_type d)${RESET} table data delimiter"
	echo -e "${WHITE_FG}-l${RESET} list DB's in current directory"
	echo -e "${WHITE_FG}-p${RESET} print table contents"
	echo -e "${WHITE_FG}-s${RESET} show table schema"
	echo -e "${WHITE_FG}-t${RESET} show tables in DB"
	echo -e "${WHITE_FG}-z${RESET} increase search depth"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

typeset -a OPTIONS
OPTSTR=":HDld:pstz"
OPTIND=0

SHOW_DBS=false
SHOW_TABS=false
SHOW_SCHEMA=false
PRINT_TAB=false
QUERY_STR=''
QUERY_DB=''

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     d) _SESSION_DATA[DELIM]=${OPTARG};;
     l) SHOW_DBS=true;;
     p) PRINT_TAB=true;;
     s) SHOW_SCHEMA=true;;
     t) SHOW_TABS=true;;
	  z) ((g_DEPTH++));;
     :) print -u2 "${RED_FG}${SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup
_SESSION_DATA[DELIM]='|' # set default delim

[[ ${SHOW_SCHEMA} == 'true' && ${#} -ne 0 ]] && usage "Option -s requires no arguments"
[[ ${SHOW_TABS} == 'true' && ${#} -ne 0 ]] && usage "Option -t requires no arguments"
[[ ${#} -eq 0 && ${#OPTIONS} -eq 0 ]] && usage "No operation specified" || QUERY_STR=${@}
[[ ${#} -ne 0 && ${#} -ne 2 ]] && usage "Query requires 2 arguments:$(opt_type b) $(opt_type q)"
[[ ${#} -eq 2 ]] && QUERY_DB=${1} && QUERY_STR=${2}

if [[ ${SHOW_DBS} == 'true' ]];then
	set_db_list
	msg_box -p -PK -H1 "Sql Databases|$(msg_list ${_DB_LIST:t})"
fi

if [[ ${SHOW_TABS} == 'true' ]];then
	set_db_list
	select_db
	_TB_LIST=($(set_tabs))
	msg_box -p -PK -H2 -jl "<w>Table List|<c>DB${RESET}:${_SESSION_DATA[DB]}|$(msg_list ${_TB_LIST})"
fi

if [[ ${SHOW_SCHEMA} == 'true' ]];then
	set_db_list
	select_db
	_TB_LIST=($(set_tabs))
	select_tab
	SCHEMA=$(get_schema | sed -e 's/\t//g' -e 's/$/|/g' -e 's/^(/(|/')
	msg_box -p -PK -jl -H2 "<w>Table Schema|<c>DB<N>:${_SESSION_DATA[DB]} <c>TABLE<N>:${_SESSION_DATA[TAB]}|${SCHEMA}"
fi

if [[ ${PRINT_TAB} == 'true' ]];then
	set_db_list
	select_db
	_TB_LIST=($(set_tabs))
	select_tab
	_DUMP=$(dump_tab | sed 's/$/|/g')
	D_CNT=$(get_delim_field_cnt ${_DUMP})
	if [[ ${D_CNT} -gt 1000 ]];then
		msg_box -p -PK "That is way too fucking big:${D_CNT}|Forget it" && exit_leave
	fi
	msg_box -p -PK -jl -H2 "<w>Table Dump|<c>DB<N>:${_SESSION_DATA[DB]} <c>TABLE<N>:${_SESSION_DATA[TAB]}|${_DUMP}"
fi

if [[ -n ${QUERY_STR} ]];then
	[[ ${_SMCUP} ]] && do_rmcup
	_SESSION_DATA[DB]=${QUERY_DB}
	echo "${WHITE_FG}DB${RESET}:${_SESSION_DATA[DB]}"
	STR="QUERY:${QUERY_STR}"
	echo "${WHITE_FG}QUERY${RESET}:${QUERY_STR}"
	echo $(str_unicode_line ${#STR})
	query ${QUERY_STR}
	RC=${?}
	[[ ${RC} -ne 0 ]] && exit_leave $(msg_exit E "sqlite3 returned an error:${RC}")
fi

exit_leave
