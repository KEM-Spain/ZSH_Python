#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Declarations
typeset -a _LOCAL_LIST=()

# Constants
_GIT_REPO_DIR=/home/kmiller/Code/REPO
_GIT_REPO=/home/kmiller/Code/REPO/.git
_APP_DIR=${PWD}

# Functions
action_do () {
	local M
	local COMMIT=''
	local SZ=0
	local -a FLIST=()
	local V_PATH=''
	local FN_OUT=''
	local VIEW=''
	local -a MSG_LIST=()
	local TAG=''
	local BOX_LIMIT=20

	for M in ${_MARKED};do
		COMMIT=$(get_field 1 ${M})
		SZ=$(get_field 4 ${M})

		tcup 0 0
		tput ed
		pushd ${_GIT_REPO_DIR} # --- PUSHD ---
		if [[ -n ${_FN_ARG} ]];then
			V_PATH=${${_FN_ARG}##${_GIT_REPO_DIR}/}
			msg_box -p -P"(d)iff, (e)dit, (w)rite" "View diff of latest changes, Edit, or Write to file?"
			if [[ ${_MSG_KEY} == 'w' ]];then
				FN_OUT=${_APP_DIR}/${COMMIT}:${V_PATH:t}.log.out
				if overwrite_file ${FN_OUT};then
					git show -P ${COMMIT}:${V_PATH} > ${FN_OUT} && msg_box -p -PK "Wrote log to file:<w>${FN_OUT}<N>"
				fi
			elif [[ ${_MSG_KEY} == 'e' ]];then
				git show -P ${COMMIT}:${V_PATH} >/tmp/.gitlog.out
				vi /tmp/.gitlog.out
			elif [[ ${_MSG_KEY} == 'd' ]];then
				VIEW=$(git diff ${COMMIT} HEAD^^ ${V_PATH})
				if [[ -z ${VIEW} ]];then
					msg_box -p -PK "No references to file ${V_PATH} in this commit:${COMMIT}"
				else
					git -p diff ${COMMIT} HEAD^^ ${V_PATH}
				fi
			else
				list_set_selected ${M} ${_AVAIL_ROW} && continue
				break
			fi
		else
			FLIST=("${(f)$(git diff-tree --no-commit-id --name-only ${COMMIT} -r)}")
			MSG_LIST=("${(f)$(msg_list_bullet ${FLIST})}")
			[[ ${#MSG_LIST} -gt 20 ]] && TAG="And <I><B><w>$((${#MSG_LIST} - ${BOX_LIMIT}))<N> more..."
			msg_box -p -PC -H1 "File(s) within Commit:<w>${COMMIT}<N>| |${MSG_LIST[1,${BOX_LIMIT}]}| |${TAG}"
			[[ ${_MSG_KEY} != 'y' ]] && list_set_selected ${M} ${_AVAIL_ROW} && continue
			git show -P ${COMMIT}
		fi
		popd # --- POPD ---

		list_set_selected ${M} ${_USED_ROW} && continue
	done
}

action_warn () {
	local M
	
	msg_box -p -PP "<I>Please respond|$(str_unicode_line 14)| |${#_MARKED} $(str_pluralize commit ${#_MARKED}) selected"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${_MARKED};do
			list_set_selected ${M} 0
		done
	fi
}

item_decorate () {
	local LINE=${@}

	case ${_LIST_SELECTED[${_LIST_NDX}]} in
		${_USED_ROW}) echo "${E_STRIKE}${E_RED_FG}${LINE}${E_RESET} ${E_ITALIC}viewed${E_RESET}";;
		*)	tput el;echo ${LINE};;
	esac
}

get_field () {
	local FLD=${1}
	local NDX=${2}

	echo $(cut -d'|' -f${FLD} <<<${_LIST[${NDX}]})
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Show diffs for selected commits
\tIf a filename is passed, results
\tare limited to the file specified.
\tIf a <FILE> arg is passed one is 
\tgiven the choice to either
\t${BOLD}${ITALIC}diff${RESET}, ${BOLD}${ITALIC}edit${RESET}, or ${BOLD}${ITALIC}write${RESET} the file
\tas it exists in the reposotory commit
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-L${RESET} use local repository (${_GIT_REPO_DIR} is default)"
	echo -e "${WHITE_FG}-e${RESET} option to edit the <FILE> when commit is selected"
	echo -e "${WHITE_FG}-p${RESET} option to print the <FILE> when commit is selected"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HDLe"
OPTIND=0
USE_LOCAL_REPO=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     L) USE_LOCAL_REPO=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

if [[ ${USE_LOCAL_REPO} == 'true' ]];then
	if [[ -e ${PWD}/.git ]];then
		_GIT_REPO_DIR=${PWD}
	else
		exit_leave $(msg_exit R "Option -L -> No .git repository found in:${PWD}")
	fi
else
	msg_box -t2 "Using repo:${_GIT_REPO}"
fi

[[ ${#} -ne 0 ]] && _FN_ARG=${1} || _FN_ARG=''

if [[ -n ${_FN_ARG} ]];then
	typeset -a FLIST=()

	dbg "${0}: Got FN_ARG:${_FN_ARG}"

	# Resolve file arg path
	dbg "${0}: Executing find ${_GIT_REPO_DIR} -name ${_FN_ARG} -type f"
	FLIST=("${(f)$(find ${_GIT_REPO_DIR} -name ${_FN_ARG} -type f)}")
	dbg "${0}: find returned a list of ${#FLIST} -> FLIST:${FLIST}"
	[[ -z ${FLIST} ]] && exit_leave $(msg_exit E "File:${@} not found")

	NDX=0
	if [[ ${#FLIST} -gt 1 ]];then
		dbg "${0}: FN_ARG requires disambiguation"
		msg_box -p -P"Select file:1-${#FLIST}" -H1 "Disambiguation Required|Argument:<w>${_FN_ARG}<N> was not unique|<Z>|$(msg_list_number ${FLIST})"
		if validate_is_integer ${_MSG_KEY};then
			if [[ ${_MSG_KEY} -ge 1 && ${_MSG_KEY} -le ${#FLIST} ]];then
				_FN_ARG=${FLIST[${_MSG_KEY}]}
				dbg "${0}: _FN_ARG set to ${FLIST[1]}"
			else
				exit_leave "${_SCRIPT_TAG} ${RED_FG}Operation Cancelled${RESET}"
			fi
		fi
	else
		_FN_ARG=${FLIST[1]}
		dbg "${0}: _FN_ARG set to ${FLIST[1]}"
	fi
fi

RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})

[[ ${?} -ne 0 ]] && exit_leave "${_SCRIPT_TAG} ${RED_FG}no matches found${RESET} ${WHITE_FG}${@}${RESET}"
PATHLBL=$(path_get_label 40)

msg_box "Working..."
pushd ${_GIT_REPO_DIR} # ---  PUSHD ---
[[ ${_DEBUG} -gt 0 ]] && dbg "${0}: Executing: git log --pretty=reference ${FN_ARG}"
RAW_LIST=("${(f)$(git log --pretty=reference ${FN_ARG})}")
if [[ ${?} -ne 0 ]];then
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${RED_FG}git COMMAND FAILED${RESET}"
else
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${GREEN_FG}git returned a list: LOCAL_LIST COUNT${RESET}:${#LOCAL_LIST}"
fi
popd # ---  POPD ---

if ! arr_is_populated "${RAW_LIST}";then
	exit_leave "${0}: ${RED_FG}no commits found for${RESET}:${WHITE_FG}${FN_ARG}${RESET}"
fi

MD=${PWD}
SIZE=0

pushd ${_GIT_REPO_DIR} # -- PUSHD ---
for L in ${(u)RAW_LIST};do
	REF=$(cut -d' ' -f1 <<<${L})
	SIZE=$(git show ${REF} ${_FN_ARG} | wc -l)
	[[ ${SIZE} -eq 0 ]] && continue
	DTM=$(cut -d'(' -f2 <<<${L})
	DTM=$(cut -d',' -f1 <<<${DTM})
	DT=$(cut -d'-' -f1-3 <<<${DTM})
	TM=$(cut -d'-' -f4 <<<${DTM})
	_LOCAL_LIST+="${REF}|${DT}|${TM}|${SIZE}"
done
popd # -- POPD ---

# Set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} Path:${WHITE_FG}%-*s${RESET}  Selected:${WHITE_FG}%-d${RESET}  ${_PG}" ${#_LIST} ${#_GIT_REPO_DIR} ${_GIT_REPO_DIR} ${SELECTED_COUNT}'
[[ -n ${_FN_ARG} ]] && list_set_header 'printf "Results limited to FILE:${MAGENTA_FG}${_FN_ARG}${RESET}"'
list_add_header_break

# Set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${_LIST_NDX} "$(item_decorate $(get_field 1 ${_LIST_NDX}) $(get_field 2 ${_LIST_NDX}) $(get_field 3 ${_LIST_NDX}))"
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select ${g_OBJECT}(s) then <${GREEN_FG}ENTER${RESET}> to ${g_ACTION} ${g_OBJECT}(s) (${ITALIC}or exit if none selected${RESET})"
list_set_restore_pos true

while true;do
	# Get selection
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break

	# Get selections
	_MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -ne 0 ]];then
		action_warn
		if [[ ${_MSG_KEY} == "y" ]];then
			action_do
		fi
	fi
done

exit_leave 
