#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLACK_FG="\033[30m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _DISPLAY_LIST=()
typeset -A _LIST_OPTIONS=()
typeset -A _HEADERS=()
typeset -a _DECADE_LIST=()
typeset -a LIST=()
typeset -a RAWLIST=()
typeset -a _SLIST=()

# Constants
_MVQ_DIR=~/.mvq
_ACTOR_LIST=${_MVQ_DIR}/actor_list.txt
_DIRECTOR_LIST=${_MVQ_DIR}/director_list.txt
_CACHE_DIR=~/.mvq
_DECADE_LIST=(1960 1970 1980 1990 2000 2010 2020)
_LIST_OPTIONS=(Actor A Director D Decade E Year Y)
_LOG=/tmp/mvqry.log
_HEADERS=(A "Movies starring:" D "Movies directed by:" E "Movies for the decade:" Y "Movies for the year:")

# Globals
g_IS_CACHED=false
g_LAST_QRY=''
g_LIST_TYPE=''
g_LIST_VALUE=''
g_UPDATE=false
g_REDISPLAY=false

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/SELECT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/VALIDATE.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local YR TITLE URL M

	for M in ${_MARKED};do
		YR=$(get_field 1 ${M})
		TITLE=$(get_field 2 ${M})
		msg_box -H1 -p -P"Enter 1-3" "${TITLE} ${YR}|<Z>|<L>1) review|<L>2) imdb|<L>3) pyts|<Z>|or [n] to skip"
	done

	tput clear
	case ${_MSG_KEY} in
		1) ddgr -n5 "${TITLE} ${YR} review";;
		2) imdb "${TITLE} ${YR}";;
		3) pyts "${TITLE} ${YR}";;
		n) list_set_selected ${M} ${_AVAIL_ROW};;
		*) msg_box -p -PK "You entered:<w>${_MSG_KEY}<N>|Valid options: 1,2,3, or n"
	esac

	grep -qi "${TITLE} ${YR}" ${_LOG}
	[[ ${?} -eq 1 ]] && logit "${TITLE} ${YR}"

	for M in ${_MARKED};do
		_MARKED[${M}]=0
		if [[ ${_MSG_KEY} -eq 3 ]];then
			list_set_selected ${M} ${_STALE_ROW} # Downloaded
		else
			list_set_selected ${M} ${_AVAIL_ROW}
		fi
	done
}

is_cached () {
	local ARGS=${@}
	local CACHE_FN=''
	local LINE

	[[ -z ${ARGS} ]] && return 1

	[[ ${ACTOR_ARG} == 'true' ]] && CACHE_FN+="_ACT_${ARGS:gs/ /_/}"
	[[ ${DIRECTOR_ARG} == 'true' ]] && CACHE_FN+="_DIR_${ARGS:gs/ /_/}"
	[[ ${DECADE_ARG} == 'true' ]] && CACHE_FN+="_DEC_${1}"
	[[ ${YEAR_ARG} == 'true' ]] && CACHE_FN+="_YR_${1}"

	if [[ -e "${_CACHE_DIR}/${CACHE_FN}" ]];then
		while read LINE;do
			_SLIST+=${LINE}
		done < ${_CACHE_DIR}/${CACHE_FN}
		return 0
	else
		return 1
	fi
}

key_callback () {
	local LIST

	if [[ ${g_IS_CACHED} == 'true' ]];then
		msg_box "Updating...${g_LAST_QRY}"
		LIST=("${(f)$(do_query ${g_LAST_QRY})}")
	fi

	format_list ${LIST}
	set_cache ${SEARCHTERM}
}

format_list () {
	local -a LIST=(${@})
	local NDX=0
	local LN=0
	local TITLE=''
	local URL=''
	local YR=''
	local LEN=0
	local L

	_SLIST=()

	for L in ${LIST};do
		((NDX++))
		((LN++))
		case ${LN} in
			1) TITLE=$(html2text -ascii <<<${L});;
			2) URL=${L};;
			3) YR=${L};;
			4) LEN=$(sed 's/^,*//' <<<${L});;
		esac
		if [[ $(( NDX % 4 )) -eq 0 ]];then
			_SLIST+="${YR}|${TITLE[1,50]}|${LEN}|${URL}"
			LN=0
		fi
	done
	_SLIST=(${(on)_SLIST}) # Sort
}

set_cache () {
	local ARGS=${@}
	local CACHE_FN=''
	local LINE

	[[ -z ${ARGS} ]] && return 1

	[[ ${ACTOR_ARG} == 'true' ]] && CACHE_FN+="_ACT_${ARGS:gs/ /_/}"
	[[ ${DIRECTOR_ARG} == 'true' ]] && CACHE_FN+="_DIR_${ARGS:gs/ /_/}"
	[[ ${DECADE_ARG} == 'true' ]] && CACHE_FN+="_DEC_${1}"
	[[ ${YEAR_ARG} == 'true' ]] && CACHE_FN+="_YR_${1}"

	CACHE_FN=${_CACHE_DIR}/${CACHE_FN}

	[[ -e ${CACHE_FN} && ${g_UPDATE} == 'true' ]] && /bin/rm -f ${CACHE_FN}

	for S in ${_SLIST};do
		echo ${S} >> ${CACHE_FN}
	done

	g_REDISPLAY=true
}

cache_select () {
	local LIST=("${(f)$(find ${_CACHE_DIR} -name '_*' -type f)}")
	local L
	local TXT
	local -A CACHE_LIST=()

	[[ ${_DEBUG} -gt 0 ]] && dbg "${_CACHE_DIR} entries found:LIST:${#LIST}"

	for L in ${(o)LIST};do
		TXT=$(cut -d'_' -f3- <<<${L:t} | sed 's/_/ /g')
		case ${L:t} in
			_ACT*) CACHE_LIST[Actor:${TXT}]=${TXT};;
			_DEC*) CACHE_LIST[Decade:${TXT}]=${TXT};;
			_DIR*) CACHE_LIST[Director:${TXT}]=${TXT};;
			_YR*)  CACHE_LIST[Year:${TXT}]=${TXT};;
		esac
	done

	sel_set_list ${(k)CACHE_LIST}
	sel_list -sa -O ${GREEN_FG} -C -H"Cached  Queries" -F"<w>Select from cache or <h>(q)uit<N>"
}

imdb () {
	local STR=${@}

	msg_box "Querying imdb..."
	/usr/local/bin/imdb ${STR}
}

blank_lines () {
	local FN=${@}
	local LINE

	if [[ ! -t 0 ]];then
		while read LINE;do
			echo ${LINE} | sed -r '/^\s*$/d'
		done
	else
		sed -r '/^\s*$/d' <${FN}
	fi
}

get_field () {
	local FIELD=${1}
	local NDX=${2}
	local YR TITLE LEN URL

	case ${FIELD} in
		1) YR=$(cut -d'|' -f1 <<<${_SLIST[${NDX}]});echo -n ${YR};;
		2) TITLE=$(cut -d'|' -f2 <<<${_SLIST[${NDX}]});echo -n ${TITLE};;
		3) LEN=$(cut -d'|' -f3 <<<${_SLIST[${NDX}]});echo -n ${LEN};;
		4) URL=$(cut -d'|' -f4 <<<${_SLIST[${NDX}]});echo -n ${URL};;
	esac
}

url_quote () {
	local TXT=${@}
	local PY_SCRIPT

	read -r -d '' PY_SCRIPT <<_EOF

import urllib.parse
print(urllib.parse.quote_plus("${TXT}", safe=''))

_EOF

python <<<${PY_SCRIPT}
}

load_list_file () {
	local LIST=${1}
	local LINE

	while read LINE;do
		_DISPLAY_LIST[${LINE}]=1
	done < ${LIST}
}

# Initialize an unsorted list
name_list_uninitialized () {
	local -a RAW_NAME
	local -A LAST_NAME
	local LAST REST LINE
	local R K FN

	while read LINE;do
		RAW_NAME+=${LINE}
		_DISPLAY_LIST[${LINE}]=1
	done < ${_LIST_FILE}

	for R in ${RAW_NAME};do
		LAST=$(rev <<<${R} | cut -d' ' -f1 | rev)
		REST=$(rev <<<${R} | cut -d' ' -f2- | rev)
		LAST_NAME[${LAST}]=${REST}
	done

	for K in ${(ok)LAST_NAME};do
		FN="${K}, ${LAST_NAME[${K}]}"
		_DISPLAY_LIST[${FN}]=1
	done
}

do_query () {
	local QRY=${1}

	[[ ${_DEBUG} -gt 0 ]] && dbg "wget -O - https://www.flickchart.com/Charts.aspx?${QRY}&perpage=100"

	wget -O - "https://www.flickchart.com/Charts.aspx?${QRY}&perpage=100" 2>/dev/null | pup --charset utf8 '.movieTitle text{}' | blank_lines

	g_LAST_QRY=${QRY}
}

get_year () {
	local YR

	echo -n "Enter 4 digit year:" >&2
	read -k4 YR

	echo ${YR}

	if [[ -n ${YR} && ${YR} == ${YR%%[!0-9]*} ]];then
		return 0
	else
		return 1
	fi
}

do_list () {
	local -a LIST
	local L_NAME F_NAME
	local RNDX
	local TITLE
	local _SEL_F2
	local D
	
	sel_set_list ${(k)_LIST_OPTIONS}
	sel_list -sa -F"<w>Select List Type or <h>(q)uit<N>"
	[[ ${?} -ne 0 ]] && exit_leave
	msg_box_clear

	case ${_LIST_OPTIONS[${_SEL_VAL}]:l} in
		a) g_LIST_TYPE=actor
			load_list_file ${_ACTOR_LIST}
			;;
		d) g_LIST_TYPE=director
			load_list_file ${_DIRECTOR_LIST}
			;;
		e) g_LIST_TYPE=decade
			for D in ${(k)_DECADE_LIST};do
				_DISPLAY_LIST[${D}]=1
			done
			;;
		y) g_LIST_TYPE=year
			g_LIST_VALUE=$(get_year)
			[[ ${?} -ne 0 ]] && exit_leave $(msg_err "Year:${g_LIST_VALUE} is invalid")
			;;
	esac

	if [[ ${g_LIST_TYPE} != 'year' ]];then
			sel_set_list ${(k)_DISPLAY_LIST}

			msg_box "loading ${(C)g_LIST_TYPE} list..."

			_SEL_VAL=?
			sel_list -sa -F"<w>Select ${(C)g_LIST_TYPE} or <h>(q)uit<N>"
			[[ ${?} -ne 0 ]] && exit_leave

			if [[ ${g_LIST_TYPE} =~ 'actor\|director' ]];then
				_SEL_F2=$(cut -d: -f2 <<<${_SEL_VAL})
				L_NAME=$(cut -d',' -f1 <<<${_SEL_F2})
				F_NAME=$(cut -d',' -f2 <<<${_SEL_F2} | sed 's/^ //')
				g_LIST_VALUE="${F_NAME} ${L_NAME}"
			else
				g_LIST_VALUE=${_SEL_VAL}
			fi
	fi
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Get movie listings by actor, director, year, or decade
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		y) echo "<YEAR>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type y)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-C${RESET} select cached query"
	echo -e "${WHITE_FG}-a${RESET} actor ('Jack Nicholson')"
	echo -e "${WHITE_FG}-d${RESET} director ('Fran√ßois Truffaut')"
	echo -e "${WHITE_FG}-e${RESET} decade (1990 2000 2010 etc.)"
	echo -e "${WHITE_FG}-l${RESET} select all arguments from lists"
	echo -e "${WHITE_FG}-i${RESET} ignore cache"
	echo -e "${WHITE_FG}-y${RESET} year (4 digits) [${WHITE_ON_GREY}default${RESET}]"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"

	echo "\n$(msg_warn ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HDCa:d:e:liuy:"
OPTIND=0

ACTOR_ARG=''
DIRECTOR_ARG=''
DECADE_ARG=''
YEAR_ARG=''
DO_LIST=false
CACHE_SELECT=false
IGNORE_CACHE=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     C) CACHE_SELECT=true;;
     a) ACTOR_ARG=${OPTARG};;
     d) DIRECTOR_ARG=${OPTARG};;
     e) DECADE_ARG=${OPTARG};;
     l) DO_LIST=true;;
     i) IGNORE_CACHE=true;;
     u) g_UPDATE=true;IGNORE_CACHE=true;;
     y) YEAR_ARG=${OPTARG};;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup
[[ ${#OPTIONS} -eq 0 && ${#} -eq 0 ]] && usage

[[ ! -e ${_CACHE_DIR} ]] && mkdir ${_CACHE_DIR}

# Process arguments
if [[ ${CACHE_SELECT} == 'true' ]];then
	cache_select
	C_TYPE=$(cut -d: -f1 <<<${_SEL_VAL})
	SEARCHTERM=$(cut -d: -f2 <<<${_SEL_VAL})

	case ${C_TYPE:l} in
		actor) ACTOR_ARG=${SEARCHTERM};;
		decade) DECADE_ARG=${SEARCHTERM};;
		director) DIRECTOR_ARG=${SEARCHTERM};;
		year) YEAR_ARG=${SEARCHTERM};;
	esac
else
	SEARCHTERM=${@}
fi

if [[ ${DO_LIST} == 'true' ]];then
	do_list

	case ${g_LIST_TYPE:l} in
		actor)	FN=$(cut -d, -f2 <<<${g_LIST_VALUE} | tr -d '[:space:]')
					LN=$(cut -d, -f1 <<<${g_LIST_VALUE} | tr -d '[:space:]')
					QRY="actor='${FN} ${LN}'" && HEADER=${_HEADERS[A]}
					SEARCHTERM="${FN} ${LN}"
					ACTOR_ARG=true
					;;
	director)	FN=$(cut -d, -f2 <<<${g_LIST_VALUE} | tr -d '[:space:]')
					LN=$(cut -d, -f1 <<<${g_LIST_VALUE} | tr -d '[:space:]')
					QRY="director=${FN}+${LN}" && HEADER=${_HEADERS[D]}
					[[ $(wc -w <<<${QRY}) -gt 1 ]] && QRY=$(sed 's/ /+/g' <<<${QRY})
					SEARCHTERM="${FN} ${LN}"
					DIRECTOR_ARG=true
					;;
	  decade)	QRY="decade=${g_LIST_VALUE}" && HEADER=${_HEADERS[E]}
					SEARCHTERM=${g_LIST_VALUE}
					DECADE_ARG=true
					;;
	    year)	QRY="year=${g_LIST_VALUE}" && HEADER=${_HEADERS[Y]}
					SEARCHTERM=${g_LIST_VALUE}
					YEAR_ARG=true
					;;
	esac
else
	[[ ${#OPTIONS} -eq 0 ]] && YEAR_ARG=${1} # invoke default
	[[ -n ${YEAR_ARG} && ! ${YEAR_ARG} =~ '[0-9][0-9][0-9][0-9]' ]] && usage "Invalid argument for <YEAR_ARG>:${YEAR_ARG}"
	[[ -n ${YEAR_ARG} ]] && QRY="year=${YEAR_ARG}" && HEADER=${_HEADERS[Y]} && SEARCHTERM=${YEAR_ARG} && YEAR_ARG=true

	[[ -n ${DECADE_ARG} && ! ${DECADE_ARG} =~ '[0-9][0-9][0-9]0' ]] && usage "Invalid argument for <DECADE_ARG>:${DECADE_ARG}"
	[[ -n ${DECADE_ARG} ]] && QRY="decade=${DECADE_ARG}" && HEADER=${_HEADERS[E]} && SEARCHTERM=${DECADE_ARG} && DECADE_ARG=true

	[[ -n ${ACTOR_ARG} ]] && QRY="actor=${ACTOR_ARG}" && HEADER=${_HEADERS[A]} && SEARCHTERM=${(C)ACTOR_ARG} && ACTOR_ARG=true
	[[ -n ${DIRECTOR_ARG} ]] && QRY="director=${DIRECTOR_ARG}" && HEADER=${_HEADERS[D]} && SEARCHTERM=${(C)DIRECTOR_ARG} && DIRECTOR_ARG=true
fi
g_LAST_QRY=${QRY}

HEADER="${HEADER}"

g_IS_CACHED=false
if [[ ${IGNORE_CACHE} == 'false' ]];then
	is_cached ${SEARCHTERM}
	[[ ${?} -eq 0 ]] && g_IS_CACHED=true
fi

if [[ ${g_IS_CACHED} == 'false' ]];then
	# Submit query
	if [[ ${CACHE_SELECT} == 'true' && ${g_UPDATE} == 'true' ]];then	
		msg_box -c "Updating cached query...${QRY}"
	else
		msg_box -c "Working...querying flickchart (a very slow site) for ${QRY}"
	fi

	LIST=("${(f)$(do_query ${QRY})}")

	if ! arr_is_populated "${LIST}";then
		exit_leave "${RED_FG}No matches for:${WHITE_FG}${QRY}"
	fi

	msg_box -c "Working...formatting data"

	format_list ${LIST}
	set_cache ${SEARCHTERM}
fi

HLEN=$((${#TITLE} + ${#HEADER} + ${#SEARCHTERM} + 17))
DLEN=$((112))
HPAD=$((DLEN-HLEN))
PAD=$(str_rep_char '-' ${HPAD})

msg_box_clear

# Set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} Selected:${WHITE_FG}%-3d %s ${CYAN_FG}%s ${BLACK_FG}${PAD}${WHITE_FG}${_PG}${RESET}" ${#_SLIST} ${SELECTED_COUNT} ${HEADER} ${SEARCHTERM}'
list_add_header_break
list_set_header_break_color ${MAGENTA_FG}
list_set_barlines true
list_set_key_callback KEY u FUNC key_callback RET true # The 'u' key will update the query
list_set_prompt 'Press (u)pdate to refresh page'
list_set_searchable false
list_set_sortable false
# TODO: make list sortable

# Set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}${_MARKER} ${SHADE}${BAR}%4s ${WHITE_FG}%-50s ${CYAN_FG}%15s ${GREEN_FG}%43s${RESET}\n" ${_LIST_NDX} $(get_field 1 ${_LIST_NDX}) "$(get_field 2 ${_LIST_NDX})" "$(get_field 3 ${_LIST_NDX})" "$(get_field 4 ${_LIST_NDX})"
'

while true;do
	# Display list
	list_select ${(o)_SLIST}

	if [[ $(list_get_selected_count) -ne 0 ]];then
		# Get user selections
		_MARKED=($(list_get_selected))
		action_do
	else
		[[ ${g_REDISPLAY} == 'false' ]] && break
		g_REDISPLAY=false # List updates require a redisplay - clear state
	fi
done

exit_leave
