#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"
BLACK_BG="\033[40m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"
CSR_OFF="\033[?25l"
CSR_ON="\033[?25h"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Scan ps for a <SEARCHTERM>
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[A-Za-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${_SCRIPT_TAG} ${BOLD}${RED_FG}Option error${RESET}: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${_SCRIPT_TAG} ${BOLD}${RED_FG}Unknown option${RESET} - ${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup
[[ ${#} -eq 0 ]] && exit_leave "${_SCRIPT_TAG}${RED_FG}Missing argument${RESET}:<SEARCHTERM>" || SEARCHTERM=${1}

PS=("${(f)$(ps --headers -aux | grep --color=never -i ${SEARCHTERM} | grep -v ${0:t} | grep -v grep | tr -s '[:space:]')}")
[[ -z ${PS} ]] && exit_leave "${_SCRIPT_TAG}Process:${WHITE_FG}${SEARCHTERM}${RESET} ${RED_FG}not found${RESET}"

(
printf "[${WHITE_FG}%s${RESET}]:${WHITE_FG} %d${RESET} %s found matching:${WHITE_FG}${SEARCHTERM}${RESET}\n\n" ${0:t} ${#PS} $(str_pluralize "process" ${#PS})
printf "${WHITE_FG}%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-70s${RESET}\n" "User" "PID" "CPU" "MEM" "TTY" "Start" "Duration" "Command"
printf "${MAGENTA_FG}%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-70s${RESET}\n" $(str_unicode_line 10) $(str_unicode_line 10) $(str_unicode_line 10) $(str_unicode_line 10) $(str_unicode_line 10) $(str_unicode_line 10) $(str_unicode_line 10) $(str_unicode_line 70) 
for P in ${(O)PS};do
	F1=$(cut -d' ' -f1 <<<${P})
	F2=$(cut -d' ' -f2 <<<${P})
	F3=$(cut -d' ' -f3 <<<${P})
	F4=$(cut -d' ' -f4 <<<${P})
	F5=$(cut -d' ' -f5 <<<${P})
	F6=$(cut -d' ' -f6 <<<${P})
	F7=$(cut -d' ' -f7 <<<${P})
	F8=$(cut -d' ' -f8 <<<${P})
	F9=$(cut -d' ' -f9 <<<${P})
	F10=$(cut -d' ' -f10 <<<${P})
	F11=$(cut -d' ' -f11- <<<${P})
	printf "%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-70s\n" ${F1} ${F2} ${F3} ${F4} ${F7} ${F9} ${F10} ${F11[1,70]}
done
) | sort -n -t' ' -k6 | mypager wait

exit_leave
