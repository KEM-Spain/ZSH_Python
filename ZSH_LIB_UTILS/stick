#!/usr/bin/zsh
 
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A STICK_DATA=()
typeset -a _STICK_LIST=()
typeset -a _LOCAL_LIST=()
typeset -A _LIST_OBJS=()
typeset -A _LIST_ALIAS=("_STICK_LIST" "STICK" "_LOCAL_LIST" "LOCAL")
typeset -A _COORDS=(X 10 Y 33 H 10 W 86)
_PATHLBL=''

# Constants
_SCRIPT=${0:t}
_RSYNC_LOG=/tmp/rsync.log
_LOCAL_PATH=''
_STICK_PATH=''
 
# Globals
g_LAST_VIEW=''
g_NEXT_VIEW=''
g_LOCAL_LVL=1
g_STICK_LVL=1

# Imports
_LIB_DIR=${ZSH_LIB_DIR:=/usr/local/lib}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Functions
action_do () {
	local -A PAYLOAD=()
	local LAST_LINE=''
	local LINE=''
	local SZ=''
	local PCT=''
	local RATE=''
	local TM=''
	local M
	local PID=''

	for M in ${_MARKED};do
		if [[ ${g_LAST_VIEW} == 'LOCAL' ]];then # Queue copy to STICK
			if [[ -e ${STICK_DATA[PATH]}/${_LIST[${M}]:t} ]];then
				msg_box -c -p -PO "${CYAN_FG}${(C)_LIST_OBJS[${M}]}${RESET}:${STICK_DATA[PATH]}/${_LIST[${M}]:t} exists"
				[[ ${_MSG_KEY} == 'y' ]] && PAYLOAD[${M}]=${_LIST[${M}]} # Overwrite if approved
			else
				PAYLOAD[${M}]=${_LIST[${M}]} # Add to list
			fi
		else # Queue delete from STICK
			if [[ -e ${STICK_DATA[PATH]}/${_LIST[${M}]:t} ]];then
				msg_box -c -p -PD "${CYAN_FG}${(C)_LIST_OBJS[${M}]}${RESET}:${STICK_DATA[PATH]}/${_LIST[${M}]:t}"
				[[ ${_MSG_KEY} == 'y' ]] && PAYLOAD[${M}]=${STICK_DATA[PATH]}/${_LIST[${M}]:t} # Overwrite if approved
			else
				PAYLOAD[${M}]=${STICK_DATA[PATH]}/${_LIST[${M}]:t} # Add to list
			fi
		fi
	done

	# Handle PAYLOAD
	if [[ ${g_LAST_VIEW} == 'LOCAL' ]];then # Copy from LOCAL to STICK

		[[ ${_DEBUG} -eq 0 ]] && /bin/rm -f ${_RSYNC_LOG} # Clear log
		sleep .5

		# rsync -v -r ./Dir_1/  --mkpath "./Dir_2/TopDir" This works to add a dir for files - no target dir other than mkpath
		# if Dir_2 exists then TopDir gets created under Dir_2, if Dir_2 doesn't exist then both are created "/Dir_2/TopDir"
		# but with a selection of different dirs it quickly becomes unmanageable
		# Nonetheless it would be necessary to know if we're in a subdirectory that requires a TopDir to categorize it

 		rsync -r -z -h -I -v --info=progress2 --no-R --no-i-r ${(v)PAYLOAD} ${STICK_DATA[PATH]} >>${_RSYNC_LOG} 2>&1 & # Background rsync
		PID=$!
		sleep .5

		# Display transfer window
		msg_box -c -C -H2 -I -x${_COORDS[X]} -y${_COORDS[Y]} -h${_COORDS[H]} -w${_COORDS[W]} "Transferring files to ${STICK_DATA[PATH]}..."
		msg_box -C -jl "<c>$(str_unicode_line $((_COORDS[W]-4)))<N>" # Header line

		coproc { tail -f --pid=${PID} ${_RSYNC_LOG} }

		while read -p ${COPROC[0]} LINE;do
			if [[ ${?} -ne 0 ]];then
				if grep -q 'total size' ${_RSYNC_LOG};then
					break
				fi
			else
				LINE=$(tr '' '\n' <<<${LINE} | tail -1 | sed '/^[[:space:]]*$/d' | tr -s '[:space:]' | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
				[[ ${LINE} =~ "^\s*$" ]] && continue # No blank lines
				if grep -P -q '\d+%' <<<${LINE};then
					SZ=$(cut -d' ' -f1 <<<${LINE})
					PCT=$(cut -d' ' -f2 <<<${LINE})
					RATE=$(cut -d' ' -f3 <<<${LINE})
					TM=$(cut -d' ' -f4 <<<${LINE})
					msg_box -jl -C "<c>${SZ}<N> <g>${PCT}<N> <w>${RATE}<N> <w>${TM}<N>" # Show details
				else
					msg_box -jl -C "<w>${LINE[1,75]}<N>" # Show other
				fi
			fi
			sleep .5
		done
		msg_box -p -PK -x $((_COORDS[X] + 3)) "Transfer Complete"

		for M in ${(k)PAYLOAD};do
			list_set_selected ${M} ${_USED_ROW}
		done
	else
		# Call rm
		msg_box "Deleting..."
		/bin/rm -rf ${(v)PAYLOAD}
		for M in ${(k)PAYLOAD};do
			list_set_selected ${M} ${_STALE_ROW}
		done
		msg_box_clear
	fi
}

action_warn () {
	local M
	local -A COUNT=()
	local F=0
	local D=0
	local MSG=''

	if [[ ! -w ${_STICK_PATH} ]];then
		msg_box -H1 -p -PK "<r>Error - Unable to Copy<N>|Stick is Readonly"
		for M in ${_MARKED};do
			list_set_selected ${M} ${_AVAIL_ROW}
		done
		return -1
	fi
	
	for M in ${_MARKED};do
		[[ ${_LIST_OBJS[${M}]} == 'file' ]] && ((F++))
		[[ ${_LIST_OBJS[${M}]} == 'dir' ]] && ((D++))
	done

	[[ ${F} -ne 0 ]] && MSG="${F} $(str_pluralize file ${F})"
	[[ ${D} -ne 0 ]] && MSG+=" ${D} $(str_pluralize dir ${D})"

	msg_box -p -PP -H1 "<I>Please Respond| |${MSG} selected"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${_MARKED};do
			list_set_selected ${M} 0
		done
	fi

	return 0
}

item_decorate () {
	local NDX=${1}
	local _MAX=$((_MAX_COLS - 10))
	local ITEM=${_LIST[${NDX}]}

	[[ ${g_LAST_VIEW} == "LOCAL" ]] && ITEM=${${ITEM}##${_LOCAL_PATH}} || ITEM=${${ITEM}##${_STICK_PATH}}
	ITEM=${ITEM[1,${_MAX}]}
	
	if [[ ${_LIST_SELECTED[${NDX}]} -eq ${_STALE_ROW} ]];then # 2 = deleted
		echo -n "${E_STRIKE}${E_RED_FG}${ITEM}${E_RESET} ${E_ITALIC}deleted${E_RESET}" || echo -n ${ITEM}
	elif [[ ${_LIST_SELECTED[${NDX}]} -eq ${_USED_ROW} ]];then # 3 = copied
		echo -n "${E_STRIKE}${E_CYAN_FG}${ITEM}${E_RESET} ${E_ITALIC}copied${E_RESET}" || echo -n ${ITEM}
	else
		case ${_LIST_OBJS[${NDX}]} in
			dir) echo "${CYAN_FG}${ITEM}${RESET}";;
			file) echo "${ITEM}";;
		esac
	fi
}

list_detail () {
	if [[ ${g_LAST_VIEW} == 'LOCAL' ]];then
		[[ ${g_LOCAL_LVL} -lt 4 ]] && ((g_LOCAL_LVL++)) || g_LOCAL_LVL=1
		load_local 
		list_switch LOCAL
	else
		[[ ${g_STICK_LVL} -lt 4 ]] && ((g_STICK_LVL++)) || g_STICK_LVL=1
		load_stick 
		list_switch STICK
	fi
}

list_show () {
	local LIST_NAME=${1}
	local ALIAS=${_LIST_ALIAS[${LIST_NAME}]}
	local DETAIL_LVL=''
	local RC=0

	[[ ${g_LAST_VIEW} == 'LOCAL' ]] && DETAIL_LVL=${g_LOCAL_LVL} || DETAIL_LVL=${g_STICK_LVL}

	#set headings
	list_set_header 'printf Content:"${WHITE_ON_GREY}${ALIAS}${RESET} Level:${DETAIL_LVL} Found:${WHITE_FG}%-d${RESET} Path:${WHITE_FG}%-*s${RESET} Selected:${WHITE_FG}%-d${RESET}  ${_PG}" ${#_LIST} ${#_PATHLBL} ${_PATHLBL} ${SELECTED_COUNT}'
	list_add_header_break

	#set line item
	list_set_line_item ' 
	printf "${BOLD}${WHITE_FG}%4s${RESET}${_MARKER} ${SHADE}${BAR}%s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})" 
	'

	list_set_select_action "view"
	list_set_key_callback_quit KEY T FUNC list_switch RET true
	list_set_key_callback_quit KEY D FUNC list_detail RET true
	list_set_searchable false

	while true;do
		#get selection
		list_select ${(P)LIST_NAME}
		[[ ${?} -eq 0 ]] && RC=1 && break

		#get selections
		_MARKED=($(list_get_selected))
		
		if [[ $(list_get_selected_count) -ne 0 ]];then
			action_warn ${LIST_NAME}
			[[ ${?} -ne 0   ]] && continue
			if [[ ${_MSG_KEY} == "y" ]];then
				action_do
			fi
		fi
	done
	return ${RC}
}

list_switch () {
	local OVERRIDE=${1}

	while true;do
		clear
		list_reset

		if [[ ${g_LAST_VIEW} == 'STICK' || ${OVERRIDE} == "LOCAL" ]];then
			g_LAST_VIEW="LOCAL"
			g_NEXT_VIEW=${_LIST_ALIAS[_STICK_LIST]}
			load_local ${g_LOCAL_LVL}
			if ! arr_is_populated "${_LOCAL_LIST}";then
				msg_box -cp -PK "${g_LAST_VIEW} contains no files or directories"
			else
				list_show "_LOCAL_LIST"
				[[ ${?} -ne 0 ]] && break
			fi
		elif [[ ${g_LAST_VIEW} == 'LOCAL' || ${OVERRIDE} == "STICK" ]];then
			g_LAST_VIEW="STICK"
			g_NEXT_VIEW=${_LIST_ALIAS[_LOCAL_LIST]}
			load_stick ${g_STICK_LVL}
			if ! arr_is_populated "${_STICK_LIST}";then
				msg_box -cp -PK "${g_LAST_VIEW} contains no files or directories"
			else
				list_show "_STICK_LIST"
				[[ ${?} -ne 0 ]] && break
			fi
		fi
	done
}

load_local () {
	local DETAIL_LVL=${1:=${g_LOCAL_LVL}}
	local TYPE=''
	local HAS_DIRS=false
	local F

	[[ ${DETAIL_LVL} -eq 4 ]] && TYPE=f || TYPE=d
	[[ ${DETAIL_LVL} -gt 1 ]] && msg_box -c -t.2 "Level ${DETAIL_LVL}|Working..."

	for F in ${PWD}/*;do
		[[ -d ${F} ]] && HAS_DIRS=true
	done
	[[ ${HAS_DIRS} == 'false' ]] && TYPE=f && g_LOCAL_LVL=4 # No directories - override DETAIL_LVL

	_LOCAL_LIST=("${(f)$(eval "find ${PWD:q} -maxdepth ${DETAIL_LVL} -type ${TYPE} ! -path ${PWD:q}" 2>/dev/null | sort)}")
	if [[ ${?} -ne 0 ]];then
		[[ ${_DEBUG} -ge ${_LOW_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ${RED_FG}COMMAND FAILED${RESET}: find ${PWD} -maxdepth 1 -type f ! -path ${PWD}"
	else
		[[ ${_DEBUG} -ge ${_LOW_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ${GREEN_FG}_LOCAL_LIST COUNT${RESET}:${#_LOCAL_LIST}"
	fi

	if arr_is_populated "${_LOCAL_LIST}";then
		_PATHLBL=$(path_abbv -l40 ${PWD})
		set_list_objects "_LOCAL_LIST"
		_LOCAL_PATH=${PWD}
	fi
}

load_stick () {
	local DETAIL_LVL=${1:=${g_STICK_LVL}}
	local TYPE=''
	local HAS_DIRS=false
	local F

	[[ ${DETAIL_LVL} -eq 4 ]] && TYPE=f || TYPE=d
	[[ ${DETAIL_LVL} -gt 1 ]] && msg_box -c -t.2 "Level ${DETAIL_LVL}|Working..."

	for F in ${STICK_DATA[PATH]}/*;do
		[[ -d ${F} ]] && HAS_DIRS=true
	done
	[[ ${HAS_DIRS} == 'false' ]] && TYPE=f && g_LOCAL_LVL=4 # No directories - override DETAIL_LVL

	_STICK_LIST=("${(f)$(eval "find ${STICK_DATA[PATH]} -maxdepth ${DETAIL_LVL} -type ${TYPE} ! -path ${STICK_DATA[PATH]}" 2>/dev/null | sort)}")
	if [[ ${?} -ne 0 ]];then
		[[ ${_DEBUG} -ge ${_LOW_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ${RED_FG}COMMAND FAILED${RESET}: find ${STICK_DATA[PATH]} -maxdepth 1 -type f ! -path ${STICK_DATA[PATH]}"
	else
		[[ ${_DEBUG} -ge ${_LOW_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ${GREEN_FG}_STICK_LIST COUNT${RESET}:${#_STICK_LIST}"
	fi

	if arr_is_populated "${_STICK_LIST}";then
		_PATHLBL=$(path_abbv -l40 ${STICK_DATA[PATH]})
		set_list_objects "_STICK_LIST"
	fi
}

set_list_objects () {
	local LIST=${1}
	local NDX=0
	local L

	_LIST_OBJS=()

	for L in ${(P)LIST};do
		((NDX++))
		[[ -f ${L} ]] && _LIST_OBJS[${NDX}]=file
		[[ -d ${L} ]] && _LIST_OBJS[${NDX}]=dir
		[[ ! -f ${L} && ! -d ${L} ]] && _LIST_OBJS[${NDX}]=other
	done
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
This script does...
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[A-Za-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave ${PENDING_MSGS}
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $(( OPTIND - 1 ))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

STICK_INFO=$(usb_stick_path)
if [[ ${?} -eq 0 ]];then
	STICK_DATA[NAME]=$(cut -d'|' -f1 <<<${STICK_INFO})
	STICK_DATA[DEVICE]=$(cut -d'|' -f2 <<<${STICK_INFO})
	STICK_DATA[PATH]=$(cut -d'|' -f3 <<<${STICK_INFO})
	_STICK_PATH=${STICK_DATA[PATH]}
	msg_box -p -PK -H1 "<w>USB Stick Information<N>|<c>${STICK_DATA[NAME]}<N>|<w>Device<N>:${STICK_DATA[DEVICE]}|<w>Mount<N>:${STICK_DATA[PATH]}"
else
	exit_leave $(err_msg_exit W "No USB stick found")
fi

g_LAST_VIEW="STICK"
list_switch

exit_leave
