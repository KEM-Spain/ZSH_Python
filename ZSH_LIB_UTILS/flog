#!/usr/bin/zsh
BOLD="\033[1m"
RESET="\033[m"
RED_FG="\033[31m"
RED_BG="\033[41m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
WHITE_FG="\033[37m"

# Constants
SYS_LOGS=/var/log
LOCAL_LOGS=("${(f)$(find ${HOME} -maxdepth 3 -type f -name '*.log' 2>/dev/null)}")

# Declarations
typeset -a _FILES
typeset -a _SORTED_LIST
typeset -a _LOCAL_LIST
typeset -A _RAWLIST
typeset -a _ALL_LOGS=(${SYS_LOGS} ${LOCAL_LOGS})

# Imports
zmodload -F zsh/stat b:zstat

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local -a MARKED=(${@})
	local M
	local APP
	local ARGS

	APP=/usr/bin/vim
	ARGS=$(echo "${APP} $(list_quote_marked_elements ${MARKED})")
	eval "${ARGS}"
	[[ ${?} -ne 0 ]] && msg_box -p -PK "<B><I>${0}: ${APP} returned an error<N>"

	for M in ${MARKED};do
		[[ ${M} -eq 0 ]] && continue
		MARKED[${M}]=0
		list_set_selected ${M} ${_GHOST_ROW}
	done
}

action_warn () {
	local MARKED=(${@})
	local CNT=$(list_get_selected_count ${MARKED})
	local M
	
	msg_box -p -PV "<I>Pending Action<N>|==============| |$(str_pluralize item $CNT true) queued for viewing"
	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${MARKED};do
			list_clear_selected ${M}
		done
	fi
}

item_decorate () {
	local NDX=$1

	case ${_LIST_SELECTED[${NDX}]} in
		2) echo -n "${E_STRIKE}${E_RED_FG}${_LIST[${NDX}]:t}${E_RESET} ${E_ITALIC}viewed${E_RESET}";;
		*)	tput el;echo -n ${_LIST[${NDX}]:t};;
	esac
}

search () {
	local SEARCHTERM=${1}
	local L
	local -a LOGS

	LOGS=("${(f)$(sudo find ${_ALL_LOGS} -maxdepth 4 2>/dev/null)}")
	for L in ${LOGS};do
		[[ ! $(file ${L}) =~ 'text' ]] && continue
		sudo grep -qi "${SEARCHTERM}" ${L}
		if [[ $? -eq 0 ]];then
			_LOCAL_LIST+=${L}
		fi
	done

	echo "${_LOCAL_LIST[@]}"
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Search for recently modified logs
\tA searchterm may be added to narrow search"
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		i) echo "<INT>";;
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [SEARCHTERM]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-d $(opt_type i)${RESET} max age of log in days"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

OPTSTR=":HDd:"

DAYS_OLD=0

OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     d) DAYS_OLD=${OPTARG};;
     :) print -u2 "${_SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${_SCRIPT}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--
 
# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

SEARCHTERM=${1}

[[ ${DAYS_OLD} -gt 0 ]] && MTIME=-$(($DAYS_OLD +1)) || MTIME=0 # Adjust MTIME to go back in time if not 0 (today)

if [[ ${DAYS_OLD} -eq 0 ]];then
	HEADER="${BOLD}${RED_FG}Logs modified today${RESET}"
else
	HEADER="${BOLD}${RED_FG}Logs modified within the last ${WHITE_FG}${DAYS_OLD}${RED_FG} days${RESET}"
fi

if [[ -n ${SEARCHTERM} ]];then
	_FILES=($(search ${SEARCHTERM}))
	FILTER=${SEARCHTERM}
else
	_FILES=($(sudo find ${_ALL_LOGS} -daystart -type f -mtime ${MTIME} 2>/dev/null | grep -Ev 'gz|[0-9]$|old' | sort))
	FILTER=none
fi

for F in ${_FILES};do
	[[ ! $(file ${F}) =~ 'text' ]] && continue # Omit non text files from list
	_RAWLIST[$F]+=$(zstat -F "%s" +mtime ${F})
done

_SORTED_LIST=($(for K in ${(k)_RAWLIST};do echo "${_RAWLIST[$K]}|${K}";done | sort -rn)) # Sort desc numerically

for K in ${_SORTED_LIST};do
	VAL=$(echo ${K} | cut -d'|' -f2)
	_LOCAL_LIST+=$VAL
done

# Abort if SEARCH failed
if [[ -n ${SEARCHTERM} ]];then
	if ! arr_is_populated "${_LOCAL_LIST}";then
		exit_leave $(msg_exit W "No matches for:${SEARCHTERM}")
	fi
fi

# Set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize log ${#_LIST})${RESET}  Filter:${WHITE_FG}%s${RESET}  Selected:${WHITE_FG}%-d${RESET}  ${_PG}" ${#_LIST} "${FILTER}" ${SELECTED_COUNT}'
list_set_header 'printf "${HEADER}"'
list_add_header_break

# Set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})"
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select file(s) then <${GREEN_FG}ENTER${RESET}> to view ${ITALIC}or exit if none selected${RESET}"
list_set_action_msgs view log
list_set_clear_ghosts true

while true;do
	# Get selection
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break

	# Get selections
	MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -gt 1 ]];then
		action_warn ${MARKED} # Warn if more than 1 selected
	fi

	if [[ ${_MSG_KEY} == "y" || $(list_get_selected_count) -eq 1 ]];then
		action_do ${MARKED}
	fi
done

exit_leave
