#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Declarations
typeset -a _MARKED=()
typeset -a _SHORTCUTS=( 
"<Alt><Print>|window-screenshot"
"<Alt><Super>s|screenreader"
"<Alt><Escape>|windows-cycle"
"<Alt>F10|maximized-toggle"
"<Alt>F2|panel-run-dialog"
"<Alt>F7|begin-move"
"<Alt>F8|begin-resize"
"<Alt>Tab|windows-switch"
"<Alt>space|window-menu-activate"
"<Alt>tilde|applications-switch"
"<Alt>z|window-kill"
"<Ctrl><Alt><Print>|window-screenshot-clip"
"<Ctrl><Alt>Backspace|restart-cinnamon"
"<Ctrl><Alt>Delete|logout"
"<Ctrl><Alt>Down|workspace-down-switch"
"<Ctrl><Alt><Escape>|panels-cycle"
"<Ctrl><Alt>Left|workspace-left-switch"
"<Ctrl><Alt>Right|workspace-right-switch"
"<Ctrl><Alt>Tab|panels-switch"
"<Ctrl><Alt>Up|workspace-up-switch"
"<Ctrl><Alt>t|terminal"
"<Ctrl><Print>|screenshot-clip"
"<Ctrl><Shift><Alt>Down|workspace-down-move"
"<Ctrl><Shift><Alt>Left|workspace-left-move"
"<Ctrl><Shift><Alt>Right|workspace-right-move"
"<Ctrl><Shift><Alt>R|screen-recording-ui-show"
"<Ctrl><Shift><Alt>Up|workspace-up-move"
"<Ctrl><Shift><Alt>r|recording-toggle"
"<Ctrl><Shift><Print>|area-screenshot-clip"
"<Print>|screenshot-ui-show"
"<Shift><Print>|area-screenshot"
"<Shift><Super>Tab|applications-backward-switch"
"<Super>|application-menu"
"<Super>1|application-1-start"
"<Super>2|application-2-start"
"<Super>3|application-3-start"
"<Super>4|application-4-start"
"<Super>5|application-5-start"
"<Super>6|application-6-start"
"<Super>7|application-7-start"
"<Super>8|application-8-start"
"<Super>9|application-9-start"
"<Super><Alt>Down|overview-down-shift"
"<Super><Alt>Up|overview-up-shift"
"<Super><Shift>Down|monitor-down-move"
"<Super><Shift>End|workspace-last-move"
"<Super><Shift>Home|workspace-1-move"
"<Super><Shift>Left|monitor-left-move"
"<Super><Shift>Right|monitor-right-move"
"<Super><Shift>Up|monitor-up-move"
"<Super>Down|Unmaximize"
"<Super>End|workspace-last-switch"
"<Super><Escape>|shortcuts-restore"
"<Super>Home|workspace-1-switch"
"<Super>Left|tile-left-push"
"<Super>Right|tile-right-push"
"<Super>Tab|applications-switch"
"<Super>Up|maximize"
"<Super>a|application-view-toggle"
"<Super>d|desktop-show-toggle"
"<Super>h|hide"
"<Super>l|lock-screen"
"<Super>m|message-tray-toggle"
"<Super>n|notification-focus"
"<Super>o|video-rotation-lock"
"<Super>s|desklets-show"
"<Super>s|overview-toggle"
)
typeset -a _MARKED

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local M
	local K A

	for M in ${_MARKED};do
		K=$(get_shortcut_keys ${_LIST[${M}]}) 
		K=$(perl -p -e 's/[<]//g; s/[>](?!$)/+/g; s/[>]//' <<<${K})
		A=$(get_key_action ${_LIST[${M}]})
		msg_box -p -PP "${K} -> ${A}|Test shortcut?"
		[[ ${_MSG_KEY} == 'y' ]] && xdotool key ${K}
	done

	for M in ${_MARKED};do
		[[ ${M} -eq 0 ]] && continue
		_MARKED[${M}]=0
		list_set_selected ${M} ${_GHOST_ROW}
	done
}

get_shortcut_keys () {
	cut -d'|' -f1 <<<${@}
}

get_key_action () {
	cut -d'|' -f2 <<<${@} | sed 's/[-]/ /g'
}

item_decorate () {
	local NDX=${1}

	echo -n ${_LIST[${NDX}]}
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Display gnome keyboard shortcuts
\tUse <SEARCHTERM> to filter results
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

typeset -a OPTIONS
OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

[[ ${#} -ne 0 ]] && SEARCHTERM=${1}

_SHORTCUTS=(${(L)_SHORTCUTS}) # Set to lower for search

if [[ -n ${SEARCHTERM} ]];then
	_SHORTCUTS=(${(CM)_SHORTCUTS:#*${SEARCHTERM:l}*})
	HDR_MSG="matching${RESET}: ${WHITE_FG}${SEARCHTERM}${RESET}\t"
else
	HDR_MSG=''
	_SHORTCUTS=(${(onC)_SHORTCUTS}) # Proper case and sort
fi

if ! arr_is_populated "${_SHORTCUTS}";then
	exit_leave $(msg_exit W "No shortcuts found matching:${SEARCHTERM}")
fi

# Set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} ${CYAN_FG}Shortcut Key Definitions ${HDR_MSG}${RESET}  Selected:${WHITE_FG}%-d${RESET}  ${_PG}" ${#_LIST} ${SELECTED_COUNT}'
list_add_header_break

# Set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%-40s -> %-40s${RESET}\n" ${_LIST_NDX} "${$(get_shortcut_keys ${_LIST[${_LIST_NDX}]})}" "${(C)$(get_key_action ${_LIST[${_LIST_NDX}]})}" 
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select file(s) then <${GREEN_FG}ENTER${RESET}> [to do some action] ${ITALIC}or exit if none selected${RESET}"

list_set_key_msg '
printf "Press ${WHITE_FG}Home End PgUp PgDn, ${RESET}<${WHITE_FG}n${RESET}>ext, <${WHITE_FG}p${RESET}>rev, <${WHITE_FG}b${RESET}>ottom, <${WHITE_FG}t${RESET}>op, <${WHITE_FG}s${RESET}>ort columns, <${GREEN_FG}Enter${RESET}>${RESET} or <${WHITE_FG}q${RESET}>uit${RESET}"
'
list_set_action_msgs delete file
list_set_barlines true
list_set_sortable true
list_set_selection_limit 1
list_set_clear_ghosts true

while true;do
	# Get selection
	list_select ${_SHORTCUTS}
	[[ ${?} -eq 0 ]] && break

	# Get user selections
	_MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -ne 0 ]];then
		action_do
	fi
done

exit_leave
