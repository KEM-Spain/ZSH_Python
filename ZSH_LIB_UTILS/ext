#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Constants
typeset -A _SUPPORTED_TYPES=(
tar.bz2 "tar xvjf"
tar.gz "tar xvzf"
tar.xz "tar xvJf"
tar.lzma "tar --lzma xvf"
bz2 "bunzip2"
rar "unrar e"
gz "gunzip"
tar "tar xvf"
tbz2 "tar xvjf"
tgz "tar xvzf"
zip "unzip -d"
jar "unzip -d"
Z "uncompress"
7z "p7zip -d"
dmg "hdiutil mount"
xz "tar --lzma xvf"
zst "zstd -d"
)

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Extract any archive
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		c) echo "<ARCHIVE>";;
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type c)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-l${RESET} list supported file extensions"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HDl"
OPTIND=0

LIST_EXT=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     l) LIST_EXT=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
# Execution
#[[ ${_DEBUG} -eq 0 ]] && do_smcup

if [[ ${LIST_EXT} == 'true' ]];then
	do_rmcup
	for K in ${(ok)_SUPPORTED_TYPES};do
		printf "${WHITE_FG}EXT${RESET}:%10s ${WHITE_FG}CMD${RESET}:%s\n" ${K} ${_SUPPORTED_TYPES[${K}]}
	done
	exit_leave
fi

[[ ${#} -eq 0 ]] && usage "missing argument:$(opt_type c)" || FN=${1}
[[ ! -f ${FN} ]] && exit_leave $(msg_exit E "file not found:${FN}")

FES=(${${(s/./)FN}[2,-1]}) # All possible file extensions
FE=''
for L in ${FES};do
	if [[ -z ${_SUPPORTED_TYPES[${L}]} ]];then
		continue
	else
		FE+=".${L}"
	fi
done
echo "File extension:${WHITE_FG}${FE}${RESET}"

CMD=${_SUPPORTED_TYPES[${FE[2,-1]}]} # Skip leading dot
[[ -z ${CMD} ]] && exit_leave $(msg_exit E "unsupported extension:${FE}")

[[ ${CMD} =~ 'unzip' ]] && ARG_SET="$(tr -cd '[:alnum:]' <<<${FN:r}) ${(qqq)FN}" || ARG_SET="${FN}" # Special arg handling for unzip - needs dir name to extract to

echo "Command:${WHITE_FG}${CMD} ${ARG_SET}${RESET}"

eval "${CMD} ${ARG_SET}"
if [[ ${?} -ne 0 ]];then
	OUT="${RED_FG}Command${RESET}:${WHITE_FG}${CMD} ${ARG_SET} ${RED_FG}had errors${RESET}\n"
fi

exit_leave ${OUT}
