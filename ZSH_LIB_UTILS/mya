#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/STR.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Declarations
typeset -A ALIASES=()

# Constants
FN=/etc/zsh/aliases

# Vars
SEARCHTERM=''

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Show alias mappings
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		s) echo "<SEARCHTERM>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type s)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-c${RESET} show aliases that execute commands"
	echo -e "${WHITE_FG}-d${RESET} show aliases that execute directory changes"
	echo -e "${WHITE_FG}-e${RESET} echo alias corresponding to $(opt_type s)"
	echo -e "${WHITE_FG}-q${RESET} return true/false exit code for $(opt_type s)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

OPTSTR=":HDcdeq"
OPTIND=0

DIRCHANGE=true
CMDS=true
ECHO=false
OPTS=false
QUIET=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     c) CMDS=true;DIRCHANGE=false;;
     d) CMDS=false;DIRCHANGE=true;;
     e) ECHO=true;;
     q) QUIET=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
 
# Execution
[[ ${#} -ne 0 ]] && SEARCHTERM=${1}

if [[ -n ${SEARCHTERM} ]];then
	TAG="${WHITE_FG}(${RESET}FILTER = \"${WHITE_FG}${SEARCHTERM}${RESET}\"${WHITE_FG})${RESET}"
else
	TAG="${WHITE_FG}(${RESET}UNFILTERED${WHITE_FG})${RESET}"
fi

while read LINE;do
	[[ ! ${LINE} =~ '=' ]] && continue
	ALIAS=$(cut -d'=' -f1 <<<${LINE} | sed 's/alias//' | str_trim)
	CMD=$(cut -d'=' -f2 <<<${LINE} | sed -e "s/'//g" -e 's/"//g')
	ALIASES[${ALIAS}]=${CMD}
done < ${FN}

if [[ ${QUIET} == 'true' ]];then
	[[ -n ${ALIASES[${SEARCHTERM}]} ]] && return 0 || return 1
fi

if [[ ${ECHO} == 'true' ]];then
	for K in ${(k)ALIASES};do
		[[ ${K} == ${SEARCHTERM} ]] && printf "%s|%s\n" ${K} ${ALIASES[${K}]} && return 0
	done
	return 1
fi

{
	printf "\n${BOLD}${WHITE_FG}Registered Aliases${RESET} ${TAG}${RESET}\n\n"

	if [[ ${DIRCHANGE} == 'true' ]];then
		printf "\n${MAGENTA_FG}Directory Change\n----------------\n"

		HIT=false
		LAST_ALIAS=?
		for A in ${(ok)ALIASES};do
			[[ ! ${ALIASES[${A}]} =~ 'cd' ]] && continue
			[[ ! ${A} =~ "^.*${SEARCHTERM}.*" ]] && continue
			HIT=true
			if [[ ${A} =~ '[[:alpha:]]' && -z ${SEARCHTERM} ]];then
				[[ ${A[1,2]:l} =~ '\.[a-z]' ]] && TOKEN=${A[2]:l} || TOKEN=${A[1]:l}
				[[ ${TOKEN} != ${LAST_ALIAS} ]] && LAST_ALIAS=${TOKEN} && echo "[${BOLD}${WHITE_FG}${LAST_ALIAS:u}${RESET}]"
			fi
			printf "${BOLD}${CYAN_FG}%15s ${RESET}${WHITE_FG}%-50s${RESET}\n" ${A} ${ALIASES[${A}]}
		done
		[[ ${HIT} == 'false' ]] && echo "${RED_FG}NON MATCHING FILTERED${RESET}"
	fi

	if [[ ${CMDS} == 'true' ]];then
		printf "\n${MAGENTA_FG}Commands\n--------\n"

		HIT=false
		for A in ${(ok)ALIASES};do
			[[ ${ALIASES[${A}]} =~ 'cd' ]] && continue
			[[ ! ${A} =~ "^${SEARCHTERM}.*" ]] && continue
			HIT=true
			if [[ ${A} =~ '[[:alpha:]]' && -z ${SEARCHTERM} ]];then
				[[ ${A[1,2]:l} =~ '\.[a-z]' ]] && TOKEN=${A[2]:l} || TOKEN=${A[1]:l}
				[[ ${TOKEN} != ${LAST_ALIAS} ]] && LAST_ALIAS=${TOKEN} && echo "[${BOLD}${WHITE_FG}${LAST_ALIAS:u}${RESET}]"
			fi
			printf "${BOLD}${CYAN_FG}%15s ${RESET}${WHITE_FG}%-50s${RESET}\n" ${A} ${ALIASES[${A}]}
		done
		[[ ${HIT} == 'false' ]] && echo "${RED_FG}NON MATCHING FILTERED${RESET}"
	fi
} | mypager
