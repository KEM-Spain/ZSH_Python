#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"
BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

# Imports
[[ -z ${ZSH_LIB_DIR} ]] && _LIB_DIR=/usr/local/lib || _LIB_DIR=${ZSH_LIB_DIR}
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SELECT.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Declarations
typeset -A _SZ_FN=()
typeset -a _DIR_LIST=()
typeset -a _FLIST=()
typeset -a _ICO_DIRS=(/opt ${HOME}/.local/share /usr/share/icons /usr/share/pixmaps)
typeset -a _LIST=()
typeset -a _SIZES=()
typeset -a _SUB_LIST=()
typeset -aU _SZ_LIST=()

# Constants
_ICO_REGEX='.*(ico|png|svg)$'
_ICO_STASH=/tmp/icon_stash

# Globals
g_LIMIT=200
g_ICON_DIR=''
g_ICON_SIZE=''

# Functions
is_valid_int () {
	local ARG=${1}
	local REGEX='^[0-9]+$'

	[[ ${ARG} =~ ${REGEX} ]] && return 0
	return 1
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

read -r -d '' DESC<<EOF
Search for and display icons
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		l) echo "<INTEGER>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [<SEARCHTERM>]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-l $(opt_type l)${RESET} set limit on icons per page (default:${g_LIMIT})"
	echo -e "${WHITE_FG}-d${RESET} select icon directory from list"
	echo -e "${WHITE_FG}-p print icon paths"
	echo -e "${WHITE_FG}-s${RESET} select icon size from list"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_exit W ${PENDING_MSGS})
}

typeset -a OPTIONS
OPTSTR=":HDl:dps"
OPTIND=0

GET_DIR=false
GET_SIZE=false
PRINT_PATHS=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     d) GET_DIR=true;;
	  l) if is_valid_int ${OPTARG};then
           g_LIMIT=${OPTARG}
        else
			  exit_leave $(msg_exit W "Invalid integer")
        fi;;
     p) PRINT_PATHS=true;;
     s) GET_SIZE=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ ${_DEBUG} -eq 0 ]] && do_smcup

[[ ${#} -ne 0 ]] && SEARCHTERM=${1}

if [[ ${GET_DIR} == 'true' ]];then
	g_ICON_DIR=''

	sel_set_list ${(on)_ICO_DIRS}
	sel_list -O ${MAGENTA_FG} -x5 -y11 -M"<w>Select icon directory<N>"

	[[ ${?} -ne 0 ]] && echo "${BOLD}${RED_FG}Cancelled...${RESET}" && exit_leave

	g_ICON_DIR=${_SEL_VAL}
	msg_box_clear OUTER_BOX
fi

# Build file list of icons
if [[ -n ${g_ICON_DIR} ]];then
	tput cup 0 0; printf "Processing directory ${WHITE_FG}%s${RESET}" ${g_ICON_DIR}
	if [[ -n ${SEARCHTERM} ]];then
		_FLIST=("${(f)$(find -P ${g_ICON_DIR} -type f -regextype 'posix-extended' -regex ".*${_ICO_REGEX}" | grep -i ${SEARCHTERM} 2>/dev/null)}")
	else
		_FLIST=("${(f)$(find -P ${g_ICON_DIR} -type f -regextype 'posix-extended' -regex ".*${_ICO_REGEX}" 2>/dev/null)}")
	fi
else
	NDX=0
	for D in ${_ICO_DIRS};do
		((NDX++))
		[[ ${D} =~ ".*MAC.*" ]] && continue
		[[ ${D:l} =~ ".*qt.*" ]] && continue

		if [[ -n ${SEARCHTERM} ]];then
			_SUB_LIST=("${(f)$(find -P ${D} -type f -regextype 'posix-extended' -regex ".*${_ICO_REGEX}" | grep -i ${SEARCHTERM} 2>/dev/null)}")
		else
			_SUB_LIST=("${(f)$(find -P ${D} -type f -regextype 'posix-extended' -regex ".*${_ICO_REGEX}")}")
		fi

		tput cup 0 0; printf "\rProcessing directory ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} directories ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_ICO_DIRS} $(( NDX * 100. / ${#_ICO_DIRS} )) 
		if [[ -n ${_SUB_LIST} ]];then
			_FLIST+=(${_SUB_LIST})
			_SUB_LIST=()
		fi
	done
fi

# Possible early exit
if [[ -n ${SEARCHTERM} ]];then
	if ! arr_is_populated "${_FLIST}";then
		exit_leave $(msg_exit W "No icons found matching:${SEARCHTERM}")
	fi
fi

if [[ ${GET_SIZE} == 'true' ]];then
	g_ICON_SIZE=''

	MSG="<w>Building size list...<N>"
	[[ ${#_FLIST} -gt 1000 ]] && MSG+="|Processing a large number of files (${#_FLIST}) - please wait..."
	msg_box -x5 -y11 ${MSG}

	for F in ${_FLIST};do
		_SZ_FN[${F}]=$(file ${F} | grep -Po '\d+ x \d+')
		_SZ_LIST+=${_SZ_FN[${F}]}
	done

	sel_set_list ${(on)_SZ_LIST}
	sel_list -O ${CYAN_FG} -x5 -y11 -M"<w>Select icon size<N>"

	[[ ${?} -ne 0 ]] && echo "${BOLD}${RED_FG}Cancelled...${RESET}" && exit_leave
	msg_box_clear OUTER_BOX

	g_ICON_SIZE=${_SEL_VAL}

	_FLIST=()
	for K in ${(k)_SZ_FN};do
		[[ ${_SZ_FN[${K}]} == ${g_ICON_SIZE} ]] && _FLIST+=${K} # Narrow _FLIST
	done
fi

if [[ ${PRINT_PATHS} == 'true' ]];then # View or save a list of icon paths
	FN_OUT=icon_list.out
	VIEW=false
	WRITE=false

	msg_box -p -H1 "<m>Icon List Options<N>|<w>View icon list in pager <I>or<N> <w>write to file?<N>|Enter: (<w>f<N>)ile or (<w>v<N>)iew"
	case ${_MSG_KEY} in
		v) VIEW=true;;
		f) WRITE=true;;
		*) exit_leave "${RED_FG}Operation Canceled${RESET}";;
	esac

	if [[ ${VIEW} == 'true' ]];then
		do_rmcup
		for L in ${_FLIST};do
			RANK=3
			[[ ${L:t:l} =~ "${SEARCHTERM:l}" ]] && RANK=1
			[[ ${L:t:l} =~ "[0-9]x[0-9]" ]] && RANK=2
			echo ${RANK}${L}
		done | sort -u | sed 's/^[0-9]//' | mypager
	elif [[ ${WRITE} == 'true' ]];then
		[[ -e ${FN_OUT} ]] && /bin/rm -f ${FN_OUT} >/dev/null 2>&1
		for L in ${_FLIST};do
			echo ${L} >> ${FN_OUT}
		done
		do_rmcup
		echo "Wrote ${#_FLIST} icon paths to file:${WHITE_FG}${FN_OUT}${RESET}"
	fi

	exit_leave
fi

# Display icons in viewer
ROW=1
tput cup ${ROW} 0; tput el; echo -n "Found:${WHITE_FG}${#_FLIST}${RESET} icon file(s)"
if [[ -n ${g_ICON_DIR} ]];then
	echo -n " in ${WHITE_FG}${g_ICON_DIR}${RESET}"
else
	echo -n " in ${WHITE_FG}${#_ICO_DIRS}${RESET} directories"
fi

if [[ -n ${SEARCHTERM} ]];then
	((ROW++))
	tput cup ${ROW} 0
	echo -n "Matching SEARCH:${WHITE_FG}${SEARCHTERM}${RESET}"
fi

if [[ -n ${g_ICON_SIZE} ]];then
	((ROW++))
	tput cup ${ROW} 0
	echo -n "Size:${WHITE_FG}${g_ICON_SIZE}${RESET}"
fi

((ROW++))
tput cup ${ROW} 0; tput el
echo -n "Continue (y/n)?"
read -sq RESPONSE
[[ ${RESPONSE} == 'n' ]] && exit_leave "${RED_FG}Operation Canceled${RESET}"

# Create links to selected files in ${_ICO_STASH}
[[ ! -e ${_ICO_STASH} ]] && md ${_ICO_STASH} || /bin/rm -f ${_ICO_STASH}/*
clear
NDX=0
[[ -n ${g_ICON_DIR} ]] && DIR_LBL=${g_ICON_DIR} || DIR_LBL="${#_ICO_DIRS} directories"
for F in ${_FLIST};do
	((NDX++))
	tput cup 0 0; tput el; printf "\rProcessing ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} in ${WHITE_FG}%s${RESET} ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#_FLIST} ${DIR_LBL} $(( NDX * 100. / ${#_FLIST} )) 
	ln -s ${F} ${_ICO_STASH} 2>/dev/null
done

clear

exec geeqie --geometry=1200x400+350+280 ${_ICO_STASH}
