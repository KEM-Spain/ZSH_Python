#!/usr/bin/zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
BOLD="\033[1m"

# Constants
JAR=/usr/local/etc/jdraw_v1.1.5.jar
_LIB_DIR=/usr/local/lib

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

center_wdw () {
	DIMS=$(xdpyinfo | grep dimension | perl -pe 's/^(.*:\s+)(.*)( pix.*$)/$2/g')
	RES_W=$(cut -d'x' -f1 <<<${DIMS})
	RES_H=$(cut -d'x' -f2 <<<${DIMS})

	NDX=0
	while true;do
		((NDX++))
		[[ ${NDX} -gt 5 ]] && break # Testing shows at least 5 trips for the id to settle
		WID_1=$(xdotool search --name jdraw 2>/dev/null | sed -n '1{p;q}')
		WID_2=$(xdotool search --name jdraw 2>/dev/null | sed -n '2{p;q}')
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} WID_1:${WID_1} WID_2:${WID_2}" >&2
		[[ ${WID_2} -gt ${WID_1} ]] && WID=${WID_2} # Want the largest (latest) window id
		[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} IDS:${IDS} OUT:${OUT} WID:${WID}" >&2
		sleep 1
	done
	[[ -z ${WID} ]] && echo "${0}:${RED_FG}Unable to locate window${RESET}:${WHITE_FG}$1${RESET}" && exit

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Calling: xdotool windowsize ${WID} 700 600"
	xdotool windowsize ${WID} 700 600

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Calling: xdotool getwindowgeometry --shell ${WID}"
	WIN_W=$(xdotool getwindowgeometry --shell ${WID} | head -4 | tail -1 | sed 's/[^0-9]*//')
	WIN_H=$(xdotool getwindowgeometry --shell ${WID} | head -5 | tail -1 | sed 's/[^0-9]*//')

	PX=$((RES_W/2 - WIN_W/2))
	PY=$((RES_H/2 - WIN_H/2))

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} Calling: xdotool windowmove ${WID} $PX $PY"
	xdotool windowmove ${WID} $PX $PY
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Pixel editor
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET}\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit W ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
# Execution
[[ ! -e ${JAR} ]] && exit_leave $(msg_exit E "${JAR} not found")

(
	nohup java -jar ${JAR} &
	center_wdw jdraw &
)> /dev/null 2>&1

exit_leave
