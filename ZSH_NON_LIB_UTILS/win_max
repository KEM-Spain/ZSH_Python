#!/usr/bin/zsh
# Declarations
typeset -A _CUR_KEYS
typeset -A _MAX_KEYS
typeset -A _SINGLE_WIN_APPS=(deluge 1 vlc 1 chrome 1 haruna 1 viber 1 pycharm 1)
typeset -A _WIN_KEYS

# Constants
_LOG=/tmp/${_SCRIPT}.log
_SCRIPT=${0:t}
_MAX_CYCLE=100 # Max wmctrl requests
_MAX_ITER=500
_MAX_WMCTRL_CALLS=10
_STABLE_ID=10 # Iterations without a change of id should indicate a stable id

# Globals
g_CYCLE=0
g_ID_CNT=0
g_ITER=0
g_WMCTRL_CALL=0

# Functions
log_it () {
	local MSG=${@}
	echo "$(date +"%D-%T") ${MSG}" >> ${_LOG}
}

# Execution
[[ -e ${_LOG} ]] && rm -f ${_LOG}
 
# Singleton
INSTANCES=$(pgrep -ci win_max)
[[ ${INSTANCES} -gt 1 ]] && log_it "win_max instance detected - exiting">>${_LOG} && exit 1

# Args
[[ ${#} -eq 0 ]] && echo "${0}: Missing argument:<APP>">&2 && exit 1
APP=${1}

log_it "${_SCRIPT}: Waiting for application:${APP}"

# Get PID
for X in {1..100};do
	PID=$(pgrep -ni ${APP:t})
	[[ -n ${PID} ]] && break
	sleep .1
done

if [[ -n ${PID} ]];then
	log_it "${_SCRIPT}: Application:${APP} PID:${PID}"
else
	log_it "${_SCRIPT}: Application:${APP} is NOT running" && exit 1
fi

# Maximize APP win
while true;do
	((g_ITER++))
	[[ ${g_ITER} -ge ${_MAX_ITER} ]] && log_it "Reached _MAX_ITER" && break

	while true;do
		((g_WMCTRL_CALL++))
		[[ ${g_WMCTRL_CALL} -ge ${_MAX_WMCTRL_CALLS} ]] && log_it "Unable to fetch window list (wmctrl) - exiting" && exit 1
		APP_WDWS=("${(f)$(wmctrl -plx 2>/dev/null | grep -i ${APP})}") # All app windows
		if [[ -z ${APP_WDWS} ]];then
			sleep 2
		else
			g_WMCTRL_CALL=0
			break
		fi
		log_it "g_WMCTRL_CALL:${g_WMCTRL_CALL} - Waiting for window list"
	done

	log_it "Resetting KEYS..."
	for K in ${(k)_CUR_KEYS};do
		_CUR_KEYS[${K}]=0
	done

	for W in ${APP_WDWS};do
		# Log_it "APP_WINDOW:${W}"
		W_ID=$(echo ${W} | grep -i ${W} | tr -s '[:space:]' | cut -d' ' -f1) # App window id
		W_PID=$(echo ${W} | grep -i ${W} | tr -s '[:space:]' | cut -d' ' -f3) # App window pid
		KEY=${APP}:${W_PID}:${W_ID}
		_CUR_KEYS[${KEY}]=1
		log_it "${KEY} is CURRENT"
		[[ -z ${_WIN_KEYS[${KEY}]} ]] && _WIN_KEYS[${KEY}]=0
	done

	[[ -z ${KEY} ]] && continue
	((g_CYCLE++))
	log_it "g_CYCLE:${g_CYCLE}"

	CALL_MAXIMIZE=false

	for K in ${(k)_CUR_KEYS};do
		[[ ${_CUR_KEYS[${K}]} -eq 0 ]] && log_it "DEAD KEY:${K}" && continue
		log_it "LIVE KEY:${K}"

		g_ID_CNT=${_WIN_KEYS[${K}]}
		((g_ID_CNT++))
		_WIN_KEYS[${K}]=${g_ID_CNT}
		log_it "_WIN_KEYS[${K}]=${_WIN_KEYS[${K}]}"

		_MAX_KEYS[${K}]=0
		if [[ ${_WIN_KEYS[${K}]} -ge ${_STABLE_ID} ]];then
			log_it "${K}:STABLE"
			_MAX_KEYS[${K}]=1
			CALL_MAXIMIZE=true
		else
			W_APP=$(cut -d':' -f1 <<<${K})
			if [[ ${_SINGLE_WIN_APPS[${W_APP}]} -eq 1 ]];then
				_MAX_KEYS[${K}]=1
				log_it "${K}:SINGLE_WIN_APP"
				CALL_MAXIMIZE=true
			fi
		fi
	done

	if [[ ${CALL_MAXIMIZE} == 'true' ]];then
		for K in ${(k)_MAX_KEYS};do
			if [[ ${_MAX_KEYS[${K}]} -eq 1 ]];then
				ID=$(cut -d':' -f3 <<<${K})
				wmctrl -i -r ${ID} -b add,maximized_vert,maximized_horz >/dev/null 2>&1
				log_it "${K}:MAXIMIZED"
			fi
		done
		wmctrl -ia ${W_ID}
		break
	fi

	[[ ${g_CYCLE} -ge ${_MAX_CYCLE} ]] && log_it "${0}: Reached _MAX_CYCLE - Window for:${APP} not found" && break
	sleep .1
done 

exit 0
